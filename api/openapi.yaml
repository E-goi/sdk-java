openapi: 3.0.0
info:
  description: |2-
     # Introduction
    This is our new version of API. We invite you to start using it and give us your feedback
    # Getting Started

    E-goi can be integrated with many environments and programming languages via our REST API.
    We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi.
    The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.

    The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.

    Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.

        BaseURL = api.egoiapp.com

    # RESTful Services
    This API supports 5 HTTP methods:

    * <b>GET</b>:
    The HTTP GET method is used to **read** (or retrieve) a representation of a resource.
    * <b>POST</b>:
    The POST verb is most-often utilized to **create** new resources.
    * <b>PATCH</b>:
    PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource
    * <b>PUT</b>:
    PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource.
    * <b>DELETE</b>:
    DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.

    # Authentication

    We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:
        #!/bin/bash
        curl -X GET 'https://api.egoiapp.com/my-account' \
        -H 'accept: application/json' \
        -H 'Apikey: <YOUR_APY_KEY>'

    Here you can see a curl Post example with authentication:
        #!/bin/bash
        curl -X POST 'http://api.egoiapp.com/tags' \
        -H 'accept: application/json' \
        -H 'Apikey: <YOUR_APY_KEY>' \
        -H 'Content-Type: application/json' \
        -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'

    # SDK
    Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.
     * <a href='https://github.com/E-goi/sdk-java'>Java</a>
     * <a href='https://github.com/E-goi/sdk-php'>PHP</a>
     * <a href='https://github.com/E-goi/sdk-python'>Python</a>
     * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>
     * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>
     * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>

    # Stream Limits
    Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB.

    # Timeouts
    Timeouts set a maximum waiting time on a request's response. Our API, sets a default timeout for each request and when breached, you'll receive an HTTP **408 (Request Timeout)** error code. You should take into consideration that response times can vary widely based on the complexity of the request, amount of data being analyzed, and the load on the system and workspace at the time of the query. When dealing with such errors, you should first attempt to reduce the complexity and amount of data under analysis, and only then, if problems are still occurring ask for support.

    For all these reasons, the default timeout for each request is **10 Seconds** and any request that creates or modifies data (**POST**, **PATCH** and **PUT**) will have a timeout of **60 Seconds**. Specific timeouts may exist for specific requests, these can be found in the request's documentation.

    # Callbacks
    A callback is an asynchronous API request that originates from the API server and is sent to the client in response to a previous request sent by that client.

    The API will make a **POST** request to the address defined in the URL with the information regarding the event of interest and share data related to that event.

    ***Note:*** Only http or https protocols are supported in the Url parameter.

    <security-definitions/>
  title: APIv3 (New)
  version: 3.0.0
servers:
- description: Egoi Public API Server
  url: https://api.egoiapp.com
tags:
- description: "Getting started: <br /> <br /> To start sending push notifications\
    \ you simply have to integrate with our server and import our libraries. Follow\
    \ the link to find out how! <a href='https://developers.e-goi.com/push/' target='_blank'>https://developers.e-goi.com/push/</a>"
  name: Push
paths:
  /automations:
    get:
      description: Returns all automations
      operationId: getAllAutomations
      parameters:
      - allowEmptyValue: false
        description: Reference attribute to automation id
        explode: true
        in: query
        name: automation_id
        required: false
        schema:
          type: integer
        style: form
      - allowEmptyValue: false
        description: Reference attribute to title
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Reference attribute to created by
        explode: true
        in: query
        name: created_by
        required: false
        schema:
          type: integer
        style: form
      - allowEmptyValue: false
        description: ID of the list that owns the automation
        explode: true
        in: query
        name: list_id
        required: false
        schema:
          $ref: '#/components/schemas/queryId'
        style: form
      - allowEmptyValue: false
        description: Automation status
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - active
          - inactive
          type: string
        style: form
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Type of order
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - allowEmptyValue: false
        description: Reference attribute to order automations
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          default: automation_id
          enum:
          - automation_id
          - title
          - list_id
          - created_by
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all automations
      tags:
      - Automations
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/automations?automation_id=<integer>&title=<string>&created_by=<integer>&list_id=<integer>&status=<string>&offset=<integer>&limit=10&order=desc&order_by=automation_id' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/automations?automation_id=<integer>&title=<string>&created_by=<integer>&list_id=<integer>&status=<string>&offset=<integer>&limit=10&order=desc&order_by=automation_id");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/automations?automation_id=<integer>&title=<string>&created_by=<integer>&list_id=<integer>&status=<string>&offset=<integer>&limit=10&order=desc&order_by=automation_id")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/automations?automation_id=<integer>&title=<string>&created_by=<integer>&list_id=<integer>&status=<string>&offset=<integer>&limit=10&order=desc&order_by=automation_id");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/automations?automation_id=<integer>&title=<string>&created_by=<integer>&list_id=<integer>&status=<string>&offset=<integer>&limit=10&order=desc&order_by=automation_id",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/automations?automation_id=<integer>&title=<string>&created_by=<integer>&list_id=<integer>&status=<string>&offset=<integer>&limit=10&order=desc&order_by=automation_id", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/automations?automation_id=<integer>&title=<string>&created_by=<integer>&list_id=<integer>&status=<string>&offset=<integer>&limit=10&order=desc&order_by=automation_id")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /automations/{automation_id}:
    delete:
      description: Remove automation information given its ID
      operationId: deleteAutomation
      parameters:
      - description: ID of the Automation
        explode: false
        in: path
        name: automation_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Remove automation
      tags:
      - Automations
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/automations/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/automations/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/automations/<integer>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/automations/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/automations/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/automations/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/automations/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /campaigns:
    get:
      description: Returns all campaigns
      operationId: getAllCampaigns
      parameters:
      - allowEmptyValue: false
        description: Channel of the campaign
        explode: true
        in: query
        name: channel
        required: false
        schema:
          enum:
          - email
          - push
          - sms
          - smart_sms
          - voice
          - web_push
          type: string
        style: form
      - allowEmptyValue: false
        description: Hash of the campaign
        explode: true
        in: query
        name: campaign_hash
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: ID of the list where the campaign belongs
        explode: true
        in: query
        name: list_id
        required: false
        schema:
          type: integer
        style: form
      - allowEmptyValue: false
        description: Status of the campaign
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - draft
          - canceled
          - queued
          - paused
          - sending
          - sent
          type: string
        style: form
      - allowEmptyValue: false
        description: Internal name of the campaign
        explode: true
        in: query
        name: internal_name
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: ID of the user who created the campaign
        explode: true
        in: query
        name: created_by
        required: false
        schema:
          type: integer
        style: form
      - allowEmptyValue: false
        description: ID of the group where the campaign belongs
        explode: true
        in: query
        name: group_id
        required: false
        schema:
          type: integer
        style: form
      - allowEmptyValue: false
        description: Created initial date
        explode: true
        in: query
        name: created_min
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Created finish
        explode: true
        in: query
        name: created_max
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Updated initial
        explode: true
        in: query
        name: updated_min
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Updated finish
        explode: true
        in: query
        name: updated_max
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Start date initial
        explode: true
        in: query
        name: start_date_min
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Start date finish
        explode: true
        in: query
        name: start_date_max
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: End Date initial
        explode: true
        in: query
        name: end_date_min
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: End Date finish
        explode: true
        in: query
        name: end_date_max
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Schedule Date initial
        explode: true
        in: query
        name: schedule_date_min
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Schedule Date finish
        explode: true
        in: query
        name: schedule_date_max
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Type of order
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - allowEmptyValue: false
        description: Reference attribute to order campaigns
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          default: created
          enum:
          - list_id
          - internal_name
          - created_by
          - group_id
          - created
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignsCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all Campaigns
      tags:
      - Campaigns
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/campaigns?channel=<string>&campaign_hash=<string>&list_id=<integer>&status=<string>&internal_name=<string>&created_by=<integer>&group_id=<integer>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>&start_date_min=<dateTime>&start_date_max=<dateTime>&end_date_min=<dateTime>&end_date_max=<dateTime>&schedule_date_min=<dateTime>&schedule_date_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=created' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns?channel=<string>&campaign_hash=<string>&list_id=<integer>&status=<string>&internal_name=<string>&created_by=<integer>&group_id=<integer>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>&start_date_min=<dateTime>&start_date_max=<dateTime>&end_date_min=<dateTime>&end_date_max=<dateTime>&schedule_date_min=<dateTime>&schedule_date_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=created");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns?channel=<string>&campaign_hash=<string>&list_id=<integer>&status=<string>&internal_name=<string>&created_by=<integer>&group_id=<integer>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>&start_date_min=<dateTime>&start_date_max=<dateTime>&end_date_min=<dateTime>&end_date_max=<dateTime>&schedule_date_min=<dateTime>&schedule_date_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=created")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/campaigns?channel=<string>&campaign_hash=<string>&list_id=<integer>&status=<string>&internal_name=<string>&created_by=<integer>&group_id=<integer>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>&start_date_min=<dateTime>&start_date_max=<dateTime>&end_date_min=<dateTime>&end_date_max=<dateTime>&schedule_date_min=<dateTime>&schedule_date_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=created");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns?channel=<string>&campaign_hash=<string>&list_id=<integer>&status=<string>&internal_name=<string>&created_by=<integer>&group_id=<integer>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>&start_date_min=<dateTime>&start_date_max=<dateTime>&end_date_min=<dateTime>&end_date_max=<dateTime>&schedule_date_min=<dateTime>&schedule_date_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=created",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/campaigns?channel=<string>&campaign_hash=<string>&list_id=<integer>&status=<string>&internal_name=<string>&created_by=<integer>&group_id=<integer>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>&start_date_min=<dateTime>&start_date_max=<dateTime>&end_date_min=<dateTime>&end_date_max=<dateTime>&schedule_date_min=<dateTime>&schedule_date_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=created", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns?channel=<string>&campaign_hash=<string>&list_id=<integer>&status=<string>&internal_name=<string>&created_by=<integer>&group_id=<integer>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>&start_date_min=<dateTime>&start_date_max=<dateTime>&end_date_min=<dateTime>&end_date_max=<dateTime>&schedule_date_min=<dateTime>&schedule_date_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=created")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /campaigns/{campaign_hash}:
    delete:
      description: Remove campaign information given its ID
      operationId: deleteCampaigns
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCampaignsConflict'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Remove Campaign
      tags:
      - Campaigns
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/campaigns/<string>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/<string>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/campaigns/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/campaigns/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /campaigns/email/{campaign_hash}/actions/send:
    post:
      description: Deploys and sends an email message
      operationId: actionSendEmail
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignEmailSendRequest'
        description: Parameters for the 'send email' action
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCampaignsConflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Send email message
      tags:
      - Email
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/email/<string>/actions/send' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"list_id":"<integer>","segments":{"type":"<string>"},"notify":["<integer>","<integer>"],"destination_field":"<string>","unique_contacts_only":false,"limit_hour":{"hour_start":"<string>","hour_end":"<string>"}}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/email/<string>/actions/send");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"list_id\":\"<integer>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"],\"destination_field\":\"<string>\",\"unique_contacts_only\":false,\"limit_hour\":{\"hour_start\":\"<string>\",\"hour_end\":\"<string>\"}}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"list_id\":\"<integer>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"],\"destination_field\":\"<string>\",\"unique_contacts_only\":false,\"limit_hour\":{\"hour_start\":\"<string>\",\"hour_end\":\"<string>\"}}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/email/<string>/actions/send")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"list_id":"<integer>","segments":{"type":"<string>"},"notify":["<integer>","<integer>"],"destination_field":"<string>","unique_contacts_only":false,"limit_hour":{"hour_start":"<string>","hour_end":"<string>"}});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/email/<string>/actions/send");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/email/<string>/actions/send",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"list_id\":\"<integer>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"],\"destination_field\":\"<string>\",\"unique_contacts_only\":false,\"limit_hour\":{\"hour_start\":\"<string>\",\"hour_end\":\"<string>\"}}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"list_id\":\"<integer>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"],\"destination_field\":\"<string>\",\"unique_contacts_only\":false,\"limit_hour\":{\"hour_start\":\"<string>\",\"hour_end\":\"<string>\"}}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaigns/email/<string>/actions/send", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/email/<string>/actions/send")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"list_id\":\"<integer>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"],\"destination_field\":\"<string>\",\"unique_contacts_only\":false,\"limit_hour\":{\"hour_start\":\"<string>\",\"hour_end\":\"<string>\"}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/email:
    post:
      description: Create a new email campaign
      operationId: createEmailCampaign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailCampaignCreate'
        description: Parameters for the Email Campaign
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashcodeCampaign'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new email campaign
      tags:
      - Email
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/email' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"list_id":"<integer>","internal_name":"<string>","content":{"type":"<string>","body":"<string>","plain_text":"<string>","snippet":"<string>"},"sender_id":"<integer>","subject":"<string>","reply_to":"<integer>","header_footer":{"id":"<integer>","header_links":{"forward":false,"view_web":false,"unsubscribe":false,"edit":false,"social_share":false,"facebook_share":false,"twitter_share":false},"footer_links":{"forward":false,"view_web":false,"unsubscribe":false,"edit":false,"social_share":false,"facebook_share":false,"twitter_share":false}}}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/email");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"body\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"subject\":\"<string>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"body\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"subject\":\"<string>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/email")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"list_id":"<integer>","internal_name":"<string>","content":{"type":"<string>","body":"<string>","plain_text":"<string>","snippet":"<string>"},"sender_id":"<integer>","subject":"<string>","reply_to":"<integer>","header_footer":{"id":"<integer>","header_links":{"forward":false,"view_web":false,"unsubscribe":false,"edit":false,"social_share":false,"facebook_share":false,"twitter_share":false},"footer_links":{"forward":false,"view_web":false,"unsubscribe":false,"edit":false,"social_share":false,"facebook_share":false,"twitter_share":false}}});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/email");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/email",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"body\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"subject\":\"<string>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"body\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"subject\":\"<string>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaigns/email", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/email")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"body\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"subject\":\"<string>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/email/{campaign_hash}:
    patch:
      description: Update email campaign
      operationId: patchEmailCampaign
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailCampaignPatch'
        description: Parameters for the Email Campaign
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashcodeCampaign'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update a specific email campaign
      tags:
      - Email
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PATCH 'api.egoiapp.com/campaigns/email/<string>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"internal_name":"<string>","subject":"<string>","content":{"body":"<string>","plain_text":"<string>","snippet":"<string>"},"sender_id":"<integer>","reply_to":"<integer>","header_footer":{"id":"<integer>","header_links":{"forward":false,"view_web":false,"unsubscribe":false,"edit":false,"social_share":false,"facebook_share":false,"twitter_share":false},"footer_links":{"forward":false,"view_web":false,"unsubscribe":false,"edit":false,"social_share":false,"facebook_share":false,"twitter_share":false}}}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/email/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"internal_name\":\"<string>\",\"subject\":\"<string>\",\"content\":{\"body\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"internal_name\":\"<string>\",\"subject\":\"<string>\",\"content\":{\"body\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/email/<string>")
              .method("PATCH", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"internal_name":"<string>","subject":"<string>","content":{"body":"<string>","plain_text":"<string>","snippet":"<string>"},"sender_id":"<integer>","reply_to":"<integer>","header_footer":{"id":"<integer>","header_links":{"forward":false,"view_web":false,"unsubscribe":false,"edit":false,"social_share":false,"facebook_share":false,"twitter_share":false},"footer_links":{"forward":false,"view_web":false,"unsubscribe":false,"edit":false,"social_share":false,"facebook_share":false,"twitter_share":false}}});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PATCH", "api.egoiapp.com/campaigns/email/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/email/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS =>"{\"internal_name\":\"<string>\",\"subject\":\"<string>\",\"content\":{\"body\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"internal_name\":\"<string>\",\"subject\":\"<string>\",\"content\":{\"body\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PATCH", "/campaigns/email/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/email/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Patch.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"internal_name\":\"<string>\",\"subject\":\"<string>\",\"content\":{\"body\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/email/rss/{campaign_hash}/actions/enable:
    post:
      description: Enables a rss email message
      operationId: actionEnableEmailRss
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Enables a rss email campaign
      tags:
      - Email
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/email/rss/<string>/actions/enable' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/email/rss/<string>/actions/enable");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/email/rss/<string>/actions/enable")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/email/rss/<string>/actions/enable");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/email/rss/<string>/actions/enable",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("POST", "/campaigns/email/rss/<string>/actions/enable", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/email/rss/<string>/actions/enable")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /campaigns/email/rss:
    post:
      description: Create a new email rss campaign
      operationId: createEmailRssCampaign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRssCampaignCreate'
        description: Parameters for the Email Campaign
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashcodeCampaign'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new email rss campaign
      tags:
      - Email
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/email/rss' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"list_id":"<integer>","internal_name":"<string>","content":{"type":"<string>","body":"<string>","feed":"<string>","plain_text":"<string>","snippet":"<string>"},"sender_id":"<integer>","subject":"<string>","reply_to":"<integer>","header_footer":{"id":"<integer>","header_links":{"forward":false,"view_web":false,"unsubscribe":false,"edit":false,"social_share":false,"facebook_share":false,"twitter_share":false},"footer_links":{"forward":false,"view_web":false,"unsubscribe":false,"edit":false,"social_share":false,"facebook_share":false,"twitter_share":false}}}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/email/rss");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"body\":\"<string>\",\"feed\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"subject\":\"<string>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"body\":\"<string>\",\"feed\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"subject\":\"<string>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/email/rss")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"list_id":"<integer>","internal_name":"<string>","content":{"type":"<string>","body":"<string>","feed":"<string>","plain_text":"<string>","snippet":"<string>"},"sender_id":"<integer>","subject":"<string>","reply_to":"<integer>","header_footer":{"id":"<integer>","header_links":{"forward":false,"view_web":false,"unsubscribe":false,"edit":false,"social_share":false,"facebook_share":false,"twitter_share":false},"footer_links":{"forward":false,"view_web":false,"unsubscribe":false,"edit":false,"social_share":false,"facebook_share":false,"twitter_share":false}}});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/email/rss");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/email/rss",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"body\":\"<string>\",\"feed\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"subject\":\"<string>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"body\":\"<string>\",\"feed\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"subject\":\"<string>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaigns/email/rss", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/email/rss")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"body\":\"<string>\",\"feed\":\"<string>\",\"plain_text\":\"<string>\",\"snippet\":\"<string>\"},\"sender_id\":\"<integer>\",\"subject\":\"<string>\",\"reply_to\":\"<integer>\",\"header_footer\":{\"id\":\"<integer>\",\"header_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false},\"footer_links\":{\"forward\":false,\"view_web\":false,\"unsubscribe\":false,\"edit\":false,\"social_share\":false,\"facebook_share\":false,\"twitter_share\":false}}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/push/{campaign_hash}/actions/send:
    post:
      description: Deploys and sends a push message
      operationId: actionSendPush
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignPushSendRequest'
        description: Parameters for the 'send push' action
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Send push message
      tags:
      - Push
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/push/<string>/actions/send' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"app_id":"<string>","segments":{"type":"<string>"},"notify":["<integer>","<integer>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/push/<string>/actions/send");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"app_id\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"app_id\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/push/<string>/actions/send")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"app_id":"<string>","segments":{"type":"<string>"},"notify":["<integer>","<integer>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/push/<string>/actions/send");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/push/<string>/actions/send",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"app_id\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"app_id\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaigns/push/<string>/actions/send", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/push/<string>/actions/send")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"app_id\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/push:
    post:
      description: Create a new push campaign
      operationId: createPushCampaign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushCampaignPostRequest'
        description: Parameters for the push campaign
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashcodeCampaign'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new push campaign
      tags:
      - Push
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/push' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"app_id":"<string>","title":"<string>","content":{"type":"<string>","message":"<string>"},"actions":{"type":"<string>","title":"<string>","link":"<string>","cancel_label":"<string>"},"geo_options":{"latitude":"<integer>","longitude":"<integer>","range":"<integer>","duration":"<integer>"},"notification_options":{"icon":"<string>"}}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/push");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"app_id\":\"<string>\",\"title\":\"<string>\",\"content\":{\"type\":\"<string>\",\"message\":\"<string>\"},\"actions\":{\"type\":\"<string>\",\"title\":\"<string>\",\"link\":\"<string>\",\"cancel_label\":\"<string>\"},\"geo_options\":{\"latitude\":\"<integer>\",\"longitude\":\"<integer>\",\"range\":\"<integer>\",\"duration\":\"<integer>\"},\"notification_options\":{\"icon\":\"<string>\"}}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"app_id\":\"<string>\",\"title\":\"<string>\",\"content\":{\"type\":\"<string>\",\"message\":\"<string>\"},\"actions\":{\"type\":\"<string>\",\"title\":\"<string>\",\"link\":\"<string>\",\"cancel_label\":\"<string>\"},\"geo_options\":{\"latitude\":\"<integer>\",\"longitude\":\"<integer>\",\"range\":\"<integer>\",\"duration\":\"<integer>\"},\"notification_options\":{\"icon\":\"<string>\"}}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/push")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"app_id":"<string>","title":"<string>","content":{"type":"<string>","message":"<string>"},"actions":{"type":"<string>","title":"<string>","link":"<string>","cancel_label":"<string>"},"geo_options":{"latitude":"<integer>","longitude":"<integer>","range":"<integer>","duration":"<integer>"},"notification_options":{"icon":"<string>"}});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/push");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/push",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"app_id\":\"<string>\",\"title\":\"<string>\",\"content\":{\"type\":\"<string>\",\"message\":\"<string>\"},\"actions\":{\"type\":\"<string>\",\"title\":\"<string>\",\"link\":\"<string>\",\"cancel_label\":\"<string>\"},\"geo_options\":{\"latitude\":\"<integer>\",\"longitude\":\"<integer>\",\"range\":\"<integer>\",\"duration\":\"<integer>\"},\"notification_options\":{\"icon\":\"<string>\"}}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"app_id\":\"<string>\",\"title\":\"<string>\",\"content\":{\"type\":\"<string>\",\"message\":\"<string>\"},\"actions\":{\"type\":\"<string>\",\"title\":\"<string>\",\"link\":\"<string>\",\"cancel_label\":\"<string>\"},\"geo_options\":{\"latitude\":\"<integer>\",\"longitude\":\"<integer>\",\"range\":\"<integer>\",\"duration\":\"<integer>\"},\"notification_options\":{\"icon\":\"<string>\"}}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaigns/push", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/push")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"app_id\":\"<string>\",\"title\":\"<string>\",\"content\":{\"type\":\"<string>\",\"message\":\"<string>\"},\"actions\":{\"type\":\"<string>\",\"title\":\"<string>\",\"link\":\"<string>\",\"cancel_label\":\"<string>\"},\"geo_options\":{\"latitude\":\"<integer>\",\"longitude\":\"<integer>\",\"range\":\"<integer>\",\"duration\":\"<integer>\"},\"notification_options\":{\"icon\":\"<string>\"}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/push/{campaign_hash}:
    patch:
      description: Update push campaign
      operationId: patchPushCampaign
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushCampaignPatchRequest'
        description: Parameters for the push campaign
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashcodeCampaign'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update a specific push campaign
      tags:
      - Push
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PATCH 'api.egoiapp.com/campaigns/push/<string>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"campaign_hash":"<string>","title":"<string>","content":{"message":"<string>"},"actions":{"type":"<string>","title":"<string>","link":"<string>","cancel_label":"<string>"},"geo_options":{"latitude":"<integer>","longitude":"<integer>","range":"<integer>"},"notification_options":{"icon":"<string>"}}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/push/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"campaign_hash\":\"<string>\",\"title\":\"<string>\",\"content\":{\"message\":\"<string>\"},\"actions\":{\"type\":\"<string>\",\"title\":\"<string>\",\"link\":\"<string>\",\"cancel_label\":\"<string>\"},\"geo_options\":{\"latitude\":\"<integer>\",\"longitude\":\"<integer>\",\"range\":\"<integer>\"},\"notification_options\":{\"icon\":\"<string>\"}}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"campaign_hash\":\"<string>\",\"title\":\"<string>\",\"content\":{\"message\":\"<string>\"},\"actions\":{\"type\":\"<string>\",\"title\":\"<string>\",\"link\":\"<string>\",\"cancel_label\":\"<string>\"},\"geo_options\":{\"latitude\":\"<integer>\",\"longitude\":\"<integer>\",\"range\":\"<integer>\"},\"notification_options\":{\"icon\":\"<string>\"}}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/push/<string>")
              .method("PATCH", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"campaign_hash":"<string>","title":"<string>","content":{"message":"<string>"},"actions":{"type":"<string>","title":"<string>","link":"<string>","cancel_label":"<string>"},"geo_options":{"latitude":"<integer>","longitude":"<integer>","range":"<integer>"},"notification_options":{"icon":"<string>"}});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PATCH", "api.egoiapp.com/campaigns/push/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/push/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS =>"{\"campaign_hash\":\"<string>\",\"title\":\"<string>\",\"content\":{\"message\":\"<string>\"},\"actions\":{\"type\":\"<string>\",\"title\":\"<string>\",\"link\":\"<string>\",\"cancel_label\":\"<string>\"},\"geo_options\":{\"latitude\":\"<integer>\",\"longitude\":\"<integer>\",\"range\":\"<integer>\"},\"notification_options\":{\"icon\":\"<string>\"}}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"campaign_hash\":\"<string>\",\"title\":\"<string>\",\"content\":{\"message\":\"<string>\"},\"actions\":{\"type\":\"<string>\",\"title\":\"<string>\",\"link\":\"<string>\",\"cancel_label\":\"<string>\"},\"geo_options\":{\"latitude\":\"<integer>\",\"longitude\":\"<integer>\",\"range\":\"<integer>\"},\"notification_options\":{\"icon\":\"<string>\"}}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PATCH", "/campaigns/push/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/push/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Patch.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"campaign_hash\":\"<string>\",\"title\":\"<string>\",\"content\":{\"message\":\"<string>\"},\"actions\":{\"type\":\"<string>\",\"title\":\"<string>\",\"link\":\"<string>\",\"cancel_label\":\"<string>\"},\"geo_options\":{\"latitude\":\"<integer>\",\"longitude\":\"<integer>\",\"range\":\"<integer>\"},\"notification_options\":{\"icon\":\"<string>\"}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/smart-sms/{campaign_hash}/actions/send:
    post:
      description: Deploys and sends a smart sms message
      operationId: actionSendSmartSms
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignSmsSendRequest'
        description: Parameters for the 'send sms' action
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Send smart sms message
      tags:
      - Smart Sms
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/smart-sms/<string>/actions/send' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"list_id":"<integer>","destination_field":"<string>","segments":{"type":"<string>"},"notify":["<integer>","<integer>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/smart-sms/<string>/actions/send");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/smart-sms/<string>/actions/send")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"list_id":"<integer>","destination_field":"<string>","segments":{"type":"<string>"},"notify":["<integer>","<integer>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/smart-sms/<string>/actions/send");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/smart-sms/<string>/actions/send",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaigns/smart-sms/<string>/actions/send", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/smart-sms/<string>/actions/send")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/smart-sms:
    post:
      description: |-
        Creates a new smart sms campaign.
                                **DISCLAIMER:** A URL will be added at the end of your SMS
      operationId: createSmartSmsCampaign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartSmsCampaign'
        description: Parameters for the Smart Sms Campaign
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashcodeCampaign'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new smart sms campaign
      tags:
      - Smart Sms
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/smart-sms' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"list_id":"<integer>","internal_name":"<string>","campaign_content":{"message":"<string>"},"page_content":{"type":"<string>","page_url":"<string>"},"sender_id":"<integer>","cname_id":"<integer>","options":{"encoding":"<string>","max_messages":"<integer>"}}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/smart-sms");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"campaign_content\":{\"message\":\"<string>\"},\"page_content\":{\"type\":\"<string>\",\"page_url\":\"<string>\"},\"sender_id\":\"<integer>\",\"cname_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"campaign_content\":{\"message\":\"<string>\"},\"page_content\":{\"type\":\"<string>\",\"page_url\":\"<string>\"},\"sender_id\":\"<integer>\",\"cname_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/smart-sms")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"list_id":"<integer>","internal_name":"<string>","campaign_content":{"message":"<string>"},"page_content":{"type":"<string>","page_url":"<string>"},"sender_id":"<integer>","cname_id":"<integer>","options":{"encoding":"<string>","max_messages":"<integer>"}});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/smart-sms");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/smart-sms",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"campaign_content\":{\"message\":\"<string>\"},\"page_content\":{\"type\":\"<string>\",\"page_url\":\"<string>\"},\"sender_id\":\"<integer>\",\"cname_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"campaign_content\":{\"message\":\"<string>\"},\"page_content\":{\"type\":\"<string>\",\"page_url\":\"<string>\"},\"sender_id\":\"<integer>\",\"cname_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaigns/smart-sms", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/smart-sms")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"campaign_content\":{\"message\":\"<string>\"},\"page_content\":{\"type\":\"<string>\",\"page_url\":\"<string>\"},\"sender_id\":\"<integer>\",\"cname_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/smart-sms/{campaign_hash}:
    patch:
      description: Update smart sms campaign
      operationId: patchSmartSmsCampaign
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartSmsCampaignPatchRequest'
        description: Parameters for the Smart Sms Campaign
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashcodeCampaign'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update a specific smart sms campaign
      tags:
      - Smart Sms
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PATCH 'api.egoiapp.com/campaigns/smart-sms/<string>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"internal_name":"<string>","campaign_content":{"message":"<string>"},"page_content":{"page_url":"<string>","page_html":"<string>","page_internal_name":"<string>"},"sender_id":"<integer>","cname_id":"<integer>","options":{"encoding":"<string>","max_messages":"<integer>"}}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/smart-sms/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"internal_name\":\"<string>\",\"campaign_content\":{\"message\":\"<string>\"},\"page_content\":{\"page_url\":\"<string>\",\"page_html\":\"<string>\",\"page_internal_name\":\"<string>\"},\"sender_id\":\"<integer>\",\"cname_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"internal_name\":\"<string>\",\"campaign_content\":{\"message\":\"<string>\"},\"page_content\":{\"page_url\":\"<string>\",\"page_html\":\"<string>\",\"page_internal_name\":\"<string>\"},\"sender_id\":\"<integer>\",\"cname_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/smart-sms/<string>")
              .method("PATCH", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"internal_name":"<string>","campaign_content":{"message":"<string>"},"page_content":{"page_url":"<string>","page_html":"<string>","page_internal_name":"<string>"},"sender_id":"<integer>","cname_id":"<integer>","options":{"encoding":"<string>","max_messages":"<integer>"}});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PATCH", "api.egoiapp.com/campaigns/smart-sms/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/smart-sms/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS =>"{\"internal_name\":\"<string>\",\"campaign_content\":{\"message\":\"<string>\"},\"page_content\":{\"page_url\":\"<string>\",\"page_html\":\"<string>\",\"page_internal_name\":\"<string>\"},\"sender_id\":\"<integer>\",\"cname_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"internal_name\":\"<string>\",\"campaign_content\":{\"message\":\"<string>\"},\"page_content\":{\"page_url\":\"<string>\",\"page_html\":\"<string>\",\"page_internal_name\":\"<string>\"},\"sender_id\":\"<integer>\",\"cname_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PATCH", "/campaigns/smart-sms/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/smart-sms/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Patch.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"internal_name\":\"<string>\",\"campaign_content\":{\"message\":\"<string>\"},\"page_content\":{\"page_url\":\"<string>\",\"page_html\":\"<string>\",\"page_internal_name\":\"<string>\"},\"sender_id\":\"<integer>\",\"cname_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/sms/{campaign_hash}/actions/send:
    post:
      description: Deploys and sends an sms message
      operationId: actionSendSms
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignSmsSendRequest'
        description: Parameters for the 'send sms' action
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Send sms message
      tags:
      - Sms
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/sms/<string>/actions/send' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"list_id":"<integer>","destination_field":"<string>","segments":{"type":"<string>"},"notify":["<integer>","<integer>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/sms/<string>/actions/send");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/sms/<string>/actions/send")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"list_id":"<integer>","destination_field":"<string>","segments":{"type":"<string>"},"notify":["<integer>","<integer>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/sms/<string>/actions/send");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/sms/<string>/actions/send",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaigns/sms/<string>/actions/send", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/sms/<string>/actions/send")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/sms:
    post:
      description: Create a new sms campaign
      operationId: createSmsCampaign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmsCampaign'
        description: Parameters for the Sms Campaign
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashcodeCampaign'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new sms campaign
      tags:
      - Sms
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/sms' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"list_id":"<integer>","internal_name":"<string>","content":{"type":"<string>","message":"<string>"},"sender_id":"<integer>","options":{"encoding":"<string>","max_messages":"<integer>"}}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/sms");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"message\":\"<string>\"},\"sender_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"message\":\"<string>\"},\"sender_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/sms")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"list_id":"<integer>","internal_name":"<string>","content":{"type":"<string>","message":"<string>"},"sender_id":"<integer>","options":{"encoding":"<string>","max_messages":"<integer>"}});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/sms");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/sms",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"message\":\"<string>\"},\"sender_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"message\":\"<string>\"},\"sender_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaigns/sms", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/sms")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"list_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"type\":\"<string>\",\"message\":\"<string>\"},\"sender_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/sms/{campaign_hash}:
    patch:
      description: Update sms campaign
      operationId: patchSmsCampaign
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmsCampaignPatchRequest'
        description: Parameters for the Sms Campaign
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashcodeCampaign'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update a specific sms campaign
      tags:
      - Sms
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PATCH 'api.egoiapp.com/campaigns/sms/<string>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"internal_name":"<string>","content":{"message":"<string>"},"sender_id":"<integer>","options":{"encoding":"<string>","max_messages":"<integer>"}}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/sms/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"internal_name\":\"<string>\",\"content\":{\"message\":\"<string>\"},\"sender_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"internal_name\":\"<string>\",\"content\":{\"message\":\"<string>\"},\"sender_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/sms/<string>")
              .method("PATCH", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"internal_name":"<string>","content":{"message":"<string>"},"sender_id":"<integer>","options":{"encoding":"<string>","max_messages":"<integer>"}});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PATCH", "api.egoiapp.com/campaigns/sms/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/sms/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS =>"{\"internal_name\":\"<string>\",\"content\":{\"message\":\"<string>\"},\"sender_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"internal_name\":\"<string>\",\"content\":{\"message\":\"<string>\"},\"sender_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PATCH", "/campaigns/sms/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/sms/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Patch.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"internal_name\":\"<string>\",\"content\":{\"message\":\"<string>\"},\"sender_id\":\"<integer>\",\"options\":{\"encoding\":\"<string>\",\"max_messages\":\"<integer>\"}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/voice/{campaign_hash}/actions/send:
    post:
      description: Deploys and sends an voice message
      operationId: actionSendVoice
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      requestBody:
        content:
          application/json:
            example:
              schedule_date: 2019-04-01 12:30:23
              list_id: 1
              segments:
                type: none
              notify:
              - 0
              destination_field: cellphone
              unique_contacts_only: true
              limit_contacts:
                type: percent
                value: 10
              limit_hour:
                hour_start: 01:00
                hour_end: 04:00
              limit_speed: 1
            schema:
              $ref: '#/components/schemas/CampaignVoiceSendRequest'
        description: Parameters for the 'send voice' action
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Send voice message
      tags:
      - Voice
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/voice/<string>/actions/send' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"list_id":"<integer>","destination_field":"<string>","unique_contacts_only":false,"segments":{"type":"<string>"},"notify":["<integer>","<integer>"],"limit_contacts":{"type":"<string>","value":"<integer>"},"limit_hour":{"hour_start":"<string>","hour_end":"<string>"},"limit_speed":"<integer>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/voice/<string>/actions/send");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"unique_contacts_only\":false,\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"],\"limit_contacts\":{\"type\":\"<string>\",\"value\":\"<integer>\"},\"limit_hour\":{\"hour_start\":\"<string>\",\"hour_end\":\"<string>\"},\"limit_speed\":\"<integer>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"unique_contacts_only\":false,\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"],\"limit_contacts\":{\"type\":\"<string>\",\"value\":\"<integer>\"},\"limit_hour\":{\"hour_start\":\"<string>\",\"hour_end\":\"<string>\"},\"limit_speed\":\"<integer>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/voice/<string>/actions/send")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"list_id":"<integer>","destination_field":"<string>","unique_contacts_only":false,"segments":{"type":"<string>"},"notify":["<integer>","<integer>"],"limit_contacts":{"type":"<string>","value":"<integer>"},"limit_hour":{"hour_start":"<string>","hour_end":"<string>"},"limit_speed":"<integer>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/voice/<string>/actions/send");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/voice/<string>/actions/send",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"unique_contacts_only\":false,\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"],\"limit_contacts\":{\"type\":\"<string>\",\"value\":\"<integer>\"},\"limit_hour\":{\"hour_start\":\"<string>\",\"hour_end\":\"<string>\"},\"limit_speed\":\"<integer>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"unique_contacts_only\":false,\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"],\"limit_contacts\":{\"type\":\"<string>\",\"value\":\"<integer>\"},\"limit_hour\":{\"hour_start\":\"<string>\",\"hour_end\":\"<string>\"},\"limit_speed\":\"<integer>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaigns/voice/<string>/actions/send", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/voice/<string>/actions/send")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"list_id\":\"<integer>\",\"destination_field\":\"<string>\",\"unique_contacts_only\":false,\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"],\"limit_contacts\":{\"type\":\"<string>\",\"value\":\"<integer>\"},\"limit_hour\":{\"hour_start\":\"<string>\",\"hour_end\":\"<string>\"},\"limit_speed\":\"<integer>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/voice:
    post:
      description: Create a new voice campaign
      operationId: createVoiceCampaign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoiceCampaign'
        description: Parameters for the Voice Campaign
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignHash'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new voice campaign
      tags:
      - Voice
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/voice' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"internal_name":"<string>","list_id":"<integer>","group_id":"<integer>","content":{"type":"<string>","audio":"<string>"},"sender_id":"<integer>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/voice");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"internal_name\":\"<string>\",\"list_id\":\"<integer>\",\"group_id\":\"<integer>\",\"content\":{\"type\":\"<string>\",\"audio\":\"<string>\"},\"sender_id\":\"<integer>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"internal_name\":\"<string>\",\"list_id\":\"<integer>\",\"group_id\":\"<integer>\",\"content\":{\"type\":\"<string>\",\"audio\":\"<string>\"},\"sender_id\":\"<integer>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/voice")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"internal_name":"<string>","list_id":"<integer>","group_id":"<integer>","content":{"type":"<string>","audio":"<string>"},"sender_id":"<integer>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/voice");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/voice",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"internal_name\":\"<string>\",\"list_id\":\"<integer>\",\"group_id\":\"<integer>\",\"content\":{\"type\":\"<string>\",\"audio\":\"<string>\"},\"sender_id\":\"<integer>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"internal_name\":\"<string>\",\"list_id\":\"<integer>\",\"group_id\":\"<integer>\",\"content\":{\"type\":\"<string>\",\"audio\":\"<string>\"},\"sender_id\":\"<integer>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaigns/voice", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/voice")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"internal_name\":\"<string>\",\"list_id\":\"<integer>\",\"group_id\":\"<integer>\",\"content\":{\"type\":\"<string>\",\"audio\":\"<string>\"},\"sender_id\":\"<integer>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/voice/{campaign_hash}:
    patch:
      description: Update a voice campaign
      operationId: patchVoiceCampaign
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoicePatchCampaign'
        description: Parameters for the Voice Campaign
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patchVoiceCampaign_200_response'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update a specific voice campaign
      tags:
      - Voice
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PATCH 'api.egoiapp.com/campaigns/voice/<string>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"internal_name":"<string>","group_id":"<integer>","message":{"audio":"<string>"},"sender_id":"<integer>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/voice/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"internal_name\":\"<string>\",\"group_id\":\"<integer>\",\"message\":{\"audio\":\"<string>\"},\"sender_id\":\"<integer>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"internal_name\":\"<string>\",\"group_id\":\"<integer>\",\"message\":{\"audio\":\"<string>\"},\"sender_id\":\"<integer>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/voice/<string>")
              .method("PATCH", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"internal_name":"<string>","group_id":"<integer>","message":{"audio":"<string>"},"sender_id":"<integer>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PATCH", "api.egoiapp.com/campaigns/voice/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/voice/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS =>"{\"internal_name\":\"<string>\",\"group_id\":\"<integer>\",\"message\":{\"audio\":\"<string>\"},\"sender_id\":\"<integer>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"internal_name\":\"<string>\",\"group_id\":\"<integer>\",\"message\":{\"audio\":\"<string>\"},\"sender_id\":\"<integer>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PATCH", "/campaigns/voice/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/voice/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Patch.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"internal_name\":\"<string>\",\"group_id\":\"<integer>\",\"message\":{\"audio\":\"<string>\"},\"sender_id\":\"<integer>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/web-push/{campaign_hash}/actions/send:
    post:
      description: Deploys and sends a webpush message
      operationId: actionSendWebPush
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignWebPushSendRequest'
        description: Parameters for the 'send web-push' action
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Send webpush message
      tags:
      - Webpush
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/web-push/<string>/actions/send' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"site_id":"<integer>","segments":{"type":"<string>"},"notify":["<integer>","<integer>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/web-push/<string>/actions/send");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"site_id\":\"<integer>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"site_id\":\"<integer>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/web-push/<string>/actions/send")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"site_id":"<integer>","segments":{"type":"<string>"},"notify":["<integer>","<integer>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/web-push/<string>/actions/send");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/web-push/<string>/actions/send",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"site_id\":\"<integer>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"site_id\":\"<integer>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaigns/web-push/<string>/actions/send", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/web-push/<string>/actions/send")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"site_id\":\"<integer>\",\"segments\":{\"type\":\"<string>\"},\"notify\":[\"<integer>\",\"<integer>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/web-push:
    post:
      description: Create a new webpush campaign
      operationId: createWebPushCampaign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebPushCampaign'
        description: Parameters for the webpush campaign
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patchVoiceCampaign_200_response'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new webpush campaign
      tags:
      - Webpush
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/web-push' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"site_id":"<integer>","internal_name":"<string>","content":{"title":"<string>","message":"<string>","link":"<string>","icon":"<string>"},"actions":[{"title":"<string>","link":"<string>"},{"title":"<string>","link":"<string>"}]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/web-push");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"site_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"title\":\"<string>\",\"message\":\"<string>\",\"link\":\"<string>\",\"icon\":\"<string>\"},\"actions\":[{\"title\":\"<string>\",\"link\":\"<string>\"},{\"title\":\"<string>\",\"link\":\"<string>\"}]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"site_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"title\":\"<string>\",\"message\":\"<string>\",\"link\":\"<string>\",\"icon\":\"<string>\"},\"actions\":[{\"title\":\"<string>\",\"link\":\"<string>\"},{\"title\":\"<string>\",\"link\":\"<string>\"}]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/web-push")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"site_id":"<integer>","internal_name":"<string>","content":{"title":"<string>","message":"<string>","link":"<string>","icon":"<string>"},"actions":[{"title":"<string>","link":"<string>"},{"title":"<string>","link":"<string>"}]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/web-push");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/web-push",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"site_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"title\":\"<string>\",\"message\":\"<string>\",\"link\":\"<string>\",\"icon\":\"<string>\"},\"actions\":[{\"title\":\"<string>\",\"link\":\"<string>\"},{\"title\":\"<string>\",\"link\":\"<string>\"}]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"site_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"title\":\"<string>\",\"message\":\"<string>\",\"link\":\"<string>\",\"icon\":\"<string>\"},\"actions\":[{\"title\":\"<string>\",\"link\":\"<string>\"},{\"title\":\"<string>\",\"link\":\"<string>\"}]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaigns/web-push", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/web-push")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"site_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"title\":\"<string>\",\"message\":\"<string>\",\"link\":\"<string>\",\"icon\":\"<string>\"},\"actions\":[{\"title\":\"<string>\",\"link\":\"<string>\"},{\"title\":\"<string>\",\"link\":\"<string>\"}]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/web-push/{campaign_hash}:
    patch:
      description: Update a webpush campaign
      operationId: patchWebPushCampaign
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebPushPatchCampaign'
        description: Parameters for the Webpush Campaign
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patchVoiceCampaign_200_response'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update a specific webpush campaign
      tags:
      - Webpush
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PATCH 'api.egoiapp.com/campaigns/web-push/<string>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"internal_name":"<string>","content":{"title":"<string>","message":"<string>","link":"<string>","icon":"<string>"},"actions":[{"title":"<string>","link":"<string>"},{"title":"<string>","link":"<string>"}]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/web-push/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"internal_name\":\"<string>\",\"content\":{\"title\":\"<string>\",\"message\":\"<string>\",\"link\":\"<string>\",\"icon\":\"<string>\"},\"actions\":[{\"title\":\"<string>\",\"link\":\"<string>\"},{\"title\":\"<string>\",\"link\":\"<string>\"}]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"internal_name\":\"<string>\",\"content\":{\"title\":\"<string>\",\"message\":\"<string>\",\"link\":\"<string>\",\"icon\":\"<string>\"},\"actions\":[{\"title\":\"<string>\",\"link\":\"<string>\"},{\"title\":\"<string>\",\"link\":\"<string>\"}]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/web-push/<string>")
              .method("PATCH", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"internal_name":"<string>","content":{"title":"<string>","message":"<string>","link":"<string>","icon":"<string>"},"actions":[{"title":"<string>","link":"<string>"},{"title":"<string>","link":"<string>"}]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PATCH", "api.egoiapp.com/campaigns/web-push/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/web-push/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS =>"{\"internal_name\":\"<string>\",\"content\":{\"title\":\"<string>\",\"message\":\"<string>\",\"link\":\"<string>\",\"icon\":\"<string>\"},\"actions\":[{\"title\":\"<string>\",\"link\":\"<string>\"},{\"title\":\"<string>\",\"link\":\"<string>\"}]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"internal_name\":\"<string>\",\"content\":{\"title\":\"<string>\",\"message\":\"<string>\",\"link\":\"<string>\",\"icon\":\"<string>\"},\"actions\":[{\"title\":\"<string>\",\"link\":\"<string>\"},{\"title\":\"<string>\",\"link\":\"<string>\"}]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PATCH", "/campaigns/web-push/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/web-push/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Patch.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"internal_name\":\"<string>\",\"content\":{\"title\":\"<string>\",\"message\":\"<string>\",\"link\":\"<string>\",\"icon\":\"<string>\"},\"actions\":[{\"title\":\"<string>\",\"link\":\"<string>\"},{\"title\":\"<string>\",\"link\":\"<string>\"}]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaigns/webpush/rss/{campaign_hash}/actions/enable:
    post:
      description: Enable rss webpush message
      operationId: actionEnableWebPushRss
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Enable a rss webpush campaign
      tags:
      - Webpush
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/webpush/rss/<string>/actions/enable' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/webpush/rss/<string>/actions/enable");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/webpush/rss/<string>/actions/enable")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/webpush/rss/<string>/actions/enable");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/webpush/rss/<string>/actions/enable",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("POST", "/campaigns/webpush/rss/<string>/actions/enable", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/webpush/rss/<string>/actions/enable")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /campaigns/webpush/rss:
    post:
      description: Create a new webpush rss campaign
      operationId: createWebPushRssCampaign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebPushRssCampaign'
        description: Parameters for the WebPush Campaign
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashcodeCampaign'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new webpush rss campaign
      tags:
      - Webpush
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaigns/webpush/rss' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"site_id":"<integer>","internal_name":"<string>","content":{"feed":"<string>"}}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaigns/webpush/rss");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"site_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"feed\":\"<string>\"}}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"site_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"feed\":\"<string>\"}}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaigns/webpush/rss")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"site_id":"<integer>","internal_name":"<string>","content":{"feed":"<string>"}});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaigns/webpush/rss");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaigns/webpush/rss",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"site_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"feed\":\"<string>\"}}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"site_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"feed\":\"<string>\"}}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaigns/webpush/rss", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaigns/webpush/rss")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"site_id\":\"<integer>\",\"internal_name\":\"<string>\",\"content\":{\"feed\":\"<string>\"}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaign-groups:
    get:
      description: Returns all campaign groups
      operationId: getAllCampaignGroups
      parameters:
      - description: Reference attribute to campaign group id
        explode: true
        in: query
        name: group_id
        required: false
        schema:
          $ref: '#/components/schemas/queryId'
        style: form
      - description: Reference attribute to campaign group id
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignGroupCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all campaign groups
      tags:
      - Campaign Groups
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/campaign-groups?group_id=<integer>&name=<string>&limit=10&offset=<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaign-groups?group_id=<integer>&name=<string>&limit=10&offset=<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaign-groups?group_id=<integer>&name=<string>&limit=10&offset=<integer>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/campaign-groups?group_id=<integer>&name=<string>&limit=10&offset=<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaign-groups?group_id=<integer>&name=<string>&limit=10&offset=<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/campaign-groups?group_id=<integer>&name=<string>&limit=10&offset=<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaign-groups?group_id=<integer>&name=<string>&limit=10&offset=<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Create a new campaign group
      operationId: createCampaignGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignGroupPost'
        description: Parameters for the Campaign Group
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignGroup'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new campaign group
      tags:
      - Campaign Groups
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/campaign-groups' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"name":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaign-groups");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"name\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaign-groups")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"name":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/campaign-groups");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaign-groups",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"name\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"name\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/campaign-groups", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaign-groups")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"name\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /campaign-groups/{group_id}:
    delete:
      description: Remove campaign group information given its ID
      operationId: deleteCampaignGroup
      parameters:
      - description: ID of the Campaign Group
        explode: false
        in: path
        name: group_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Remove Campaign Group
      tags:
      - Campaign Groups
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/campaign-groups/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaign-groups/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaign-groups/<integer>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/campaign-groups/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaign-groups/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/campaign-groups/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaign-groups/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    put:
      description: Update a campaign group
      operationId: updateCampaignGroup
      parameters:
      - description: ID of the Campaign Group
        explode: false
        in: path
        name: group_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignGroupPost'
        description: Parameters for the Campaign Group
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignGroup'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update a specific campaign group
      tags:
      - Campaign Groups
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PUT 'api.egoiapp.com/campaign-groups/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"name":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/campaign-groups/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"name\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/campaign-groups/<integer>")
              .method("PUT", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"name":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PUT", "api.egoiapp.com/campaign-groups/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/campaign-groups/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS =>"{\"name\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"name\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PUT", "/campaign-groups/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/campaign-groups/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Put.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"name\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /connectedsites:
    get:
      description: Returns all domains usable in Connected Sites
      operationId: getAllConnectedSites
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain_Collection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all Connected Sites
      tags:
      - Connected Sites
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/connectedsites' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/connectedsites");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/connectedsites")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/connectedsites");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/connectedsites",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/connectedsites", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/connectedsites")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Creates a domain usable in Connected Sites
      operationId: createConnectedSites
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectedSitesDomain'
        description: Parameters for new Connected Site
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectedSitesDomainDetail'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Creates a Connected Site
      tags:
      - Connected Sites
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/connectedsites' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"domain":"<string>","list_id":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/connectedsites");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"domain\":\"<string>\",\"list_id\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"domain\":\"<string>\",\"list_id\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/connectedsites")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"domain":"<string>","list_id":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/connectedsites");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/connectedsites",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"domain\":\"<string>\",\"list_id\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"domain\":\"<string>\",\"list_id\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/connectedsites", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/connectedsites")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"domain\":\"<string>\",\"list_id\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /connectedsites/{domain}:
    delete:
      description: Deletes a domain from Connected Sites
      operationId: deleteConnectedSites
      parameters:
      - description: Domain
        explode: false
        in: path
        name: domain
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Deletes a Connected Site
      tags:
      - Connected Sites
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/connectedsites/<string>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/connectedsites/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/connectedsites/<string>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/connectedsites/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/connectedsites/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/connectedsites/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/connectedsites/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    get:
      description: Returns domain info in Connected Sites
      operationId: getConnectedSites
      parameters:
      - description: Domain
        explode: false
        in: path
        name: domain
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectedSitesDomainDetail'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get a Connected Site
      tags:
      - Connected Sites
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/connectedsites/<string>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/connectedsites/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/connectedsites/<string>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/connectedsites/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/connectedsites/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/connectedsites/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/connectedsites/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /lists/{list_id}/contacts/actions/activate:
    post:
      description: Activates a collection of contacts (does not apply to removed contacts)
      operationId: actionActivateContacts
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateContactsRequest'
        description: Parameters for the request
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Activate contacts
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists/<integer>/contacts/actions/activate' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"type":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts/actions/activate");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"type\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"type\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts/actions/activate")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"type":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists/<integer>/contacts/actions/activate");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts/actions/activate",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"type\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"type\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists/<integer>/contacts/actions/activate", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts/actions/activate")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"type\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/contacts/actions/attach-tag:
    post:
      description: Attaches a tag to the provided contacts.
      operationId: actionAttachTag
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachTagRequest'
        description: Parameters for the Tag
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Attach tag to contact
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists/<integer>/contacts/actions/attach-tag' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"contacts":["<string>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts/actions/attach-tag");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"contacts\":[\"<string>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"contacts\":[\"<string>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts/actions/attach-tag")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"contacts":["<string>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists/<integer>/contacts/actions/attach-tag");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts/actions/attach-tag",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"contacts\":[\"<string>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"contacts\":[\"<string>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists/<integer>/contacts/actions/attach-tag", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts/actions/attach-tag")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"contacts\":[\"<string>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/contacts/actions/deactivate:
    post:
      description: Deactivates a collection of contacts (does not apply to removed
        contacts)
      operationId: actionDeactivateContacts
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeactivateContactsRequest'
        description: Parameters for the request
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Deactivate contacts
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists/<integer>/contacts/actions/deactivate' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"type":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts/actions/deactivate");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"type\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"type\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts/actions/deactivate")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"type":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists/<integer>/contacts/actions/deactivate");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts/actions/deactivate",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"type\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"type\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists/<integer>/contacts/actions/deactivate", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts/actions/deactivate")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"type\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/contacts/actions/detach-tag:
    post:
      description: Detach a tag to the provided contacts
      operationId: actionDetachTag
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetachTagRequest'
        description: Parameters for the Tag
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Detach tag to contact
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists/<integer>/contacts/actions/detach-tag' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"contacts":["<string>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts/actions/detach-tag");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"contacts\":[\"<string>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"contacts\":[\"<string>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts/actions/detach-tag")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"contacts":["<string>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists/<integer>/contacts/actions/detach-tag");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts/actions/detach-tag",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"contacts\":[\"<string>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"contacts\":[\"<string>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists/<integer>/contacts/actions/detach-tag", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts/actions/detach-tag")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"contacts\":[\"<string>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/contacts/actions/export:
    post:
      callbacks:
        ExportContacts:
          '{$request.body#/callbackUrl}':
            post:
              operationId: exportContacts_Post
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/ExportContactsWebhookData'
              responses:
                "200":
                  description: OK
              x-callback-request: true
      description: Exports a list of contacts to the desired callback url
      operationId: actionExportContacts
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactExportRequest'
        description: Parameters for export
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Exports a list of contacts
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists/<integer>/contacts/actions/export' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"format":"<string>","callback_url":"<uri>","segments":["<string>","<string>"],"fields":["<string>","<string>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts/actions/export");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"format\":\"<string>\",\"callback_url\":\"<uri>\",\"segments\":[\"<string>\",\"<string>\"],\"fields\":[\"<string>\",\"<string>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"format\":\"<string>\",\"callback_url\":\"<uri>\",\"segments\":[\"<string>\",\"<string>\"],\"fields\":[\"<string>\",\"<string>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts/actions/export")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"format":"<string>","callback_url":"<uri>","segments":["<string>","<string>"],"fields":["<string>","<string>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists/<integer>/contacts/actions/export");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts/actions/export",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"format\":\"<string>\",\"callback_url\":\"<uri>\",\"segments\":[\"<string>\",\"<string>\"],\"fields\":[\"<string>\",\"<string>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"format\":\"<string>\",\"callback_url\":\"<uri>\",\"segments\":[\"<string>\",\"<string>\"],\"fields\":[\"<string>\",\"<string>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists/<integer>/contacts/actions/export", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts/actions/export")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"format\":\"<string>\",\"callback_url\":\"<uri>\",\"segments\":[\"<string>\",\"<string>\"],\"fields\":[\"<string>\",\"<string>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/contacts/actions/forget:
    post:
      description: Forgets a list of contacts
      operationId: actionForgetContacts
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactForgetRequest'
        description: Parameters for the action
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Forget contacts
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists/<integer>/contacts/actions/forget' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"contacts":["<string>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts/actions/forget");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"contacts\":[\"<string>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"contacts\":[\"<string>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts/actions/forget")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"contacts":["<string>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists/<integer>/contacts/actions/forget");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts/actions/forget",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"contacts\":[\"<string>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"contacts\":[\"<string>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists/<integer>/contacts/actions/forget", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts/actions/forget")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"contacts\":[\"<string>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/contacts/actions/import-bulk:
    post:
      description: |-
        Imports a collection of contacts </br>
             **DISCLAIMER:** stream limits applied. [view here](#section/Stream-Limits 'Stream Limits')<br> ***Notes:***<br>Minimum of 2 contacts to use this method. [Use Create new contact method instead](#operation/createContact 'Create new contact')<br>It defaults to ***Bulk object*** import.
      operationId: actionImportBulk
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportBulkFileRequest'
        description: Parameters for the bulk import
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestEntityTooLarge'
          description: Request Entity Too Large
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Import collection of contacts
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists/<integer>/contacts/actions/import-bulk' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"mode":"<string>","compare_field":"<string>","contacts":[{"base":{"contact_id":"<string>","status":"active","first_name":"<string>","last_name":"<string>","birth_date":"<date>","language":"en","email":"<string>","cellphone":"<string>","phone":"<string>","push_token_android":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}],"push_token_ios":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}]},"extra":[{"field_id":"<integer>","format":"<string>","value":"<date>"},{"field_id":"<integer>","format":"<string>","value":"<date>"}]},{"base":{"contact_id":"<string>","status":"active","first_name":"<string>","last_name":"<string>","birth_date":"<date>","language":"en","email":"<string>","cellphone":"<string>","phone":"<string>","push_token_android":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}],"push_token_ios":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}]},"extra":[{"field_id":"<integer>","format":"<string>","value":"<date>"},{"field_id":"<integer>","format":"<string>","value":"<date>"}]}],"force_empty":false,"notify":["<integer>","<integer>"],"callback_url":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts/actions/import-bulk");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"mode\":\"<string>\",\"compare_field\":\"<string>\",\"contacts\":[{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}],\"force_empty\":false,\"notify\":[\"<integer>\",\"<integer>\"],\"callback_url\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"mode\":\"<string>\",\"compare_field\":\"<string>\",\"contacts\":[{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}],\"force_empty\":false,\"notify\":[\"<integer>\",\"<integer>\"],\"callback_url\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts/actions/import-bulk")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"mode":"<string>","compare_field":"<string>","contacts":[{"base":{"contact_id":"<string>","status":"active","first_name":"<string>","last_name":"<string>","birth_date":"<date>","language":"en","email":"<string>","cellphone":"<string>","phone":"<string>","push_token_android":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}],"push_token_ios":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}]},"extra":[{"field_id":"<integer>","format":"<string>","value":"<date>"},{"field_id":"<integer>","format":"<string>","value":"<date>"}]},{"base":{"contact_id":"<string>","status":"active","first_name":"<string>","last_name":"<string>","birth_date":"<date>","language":"en","email":"<string>","cellphone":"<string>","phone":"<string>","push_token_android":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}],"push_token_ios":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}]},"extra":[{"field_id":"<integer>","format":"<string>","value":"<date>"},{"field_id":"<integer>","format":"<string>","value":"<date>"}]}],"force_empty":false,"notify":["<integer>","<integer>"],"callback_url":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists/<integer>/contacts/actions/import-bulk");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts/actions/import-bulk",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"mode\":\"<string>\",\"compare_field\":\"<string>\",\"contacts\":[{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}],\"force_empty\":false,\"notify\":[\"<integer>\",\"<integer>\"],\"callback_url\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"mode\":\"<string>\",\"compare_field\":\"<string>\",\"contacts\":[{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}],\"force_empty\":false,\"notify\":[\"<integer>\",\"<integer>\"],\"callback_url\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists/<integer>/contacts/actions/import-bulk", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts/actions/import-bulk")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"mode\":\"<string>\",\"compare_field\":\"<string>\",\"contacts\":[{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}],\"force_empty\":false,\"notify\":[\"<integer>\",\"<integer>\"],\"callback_url\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/contacts/actions/unsubscribe:
    post:
      description: Unsubscribes contacts
      operationId: actionUnsubscribeContact
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveRequest'
        description: Parameters for the contact to unsubscribe
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Unsubscribes contacts
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists/<integer>/contacts/actions/unsubscribe' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"data":[{"contact_id":"<string>","unsubscription_method":"<string>","unsubscription_reason":"<string>","unsubscription_observation":"<string>"},{"contact_id":"<string>","unsubscription_method":"<string>","unsubscription_reason":"<string>","unsubscription_observation":"<string>"}]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts/actions/unsubscribe");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"data\":[{\"contact_id\":\"<string>\",\"unsubscription_method\":\"<string>\",\"unsubscription_reason\":\"<string>\",\"unsubscription_observation\":\"<string>\"},{\"contact_id\":\"<string>\",\"unsubscription_method\":\"<string>\",\"unsubscription_reason\":\"<string>\",\"unsubscription_observation\":\"<string>\"}]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"data\":[{\"contact_id\":\"<string>\",\"unsubscription_method\":\"<string>\",\"unsubscription_reason\":\"<string>\",\"unsubscription_observation\":\"<string>\"},{\"contact_id\":\"<string>\",\"unsubscription_method\":\"<string>\",\"unsubscription_reason\":\"<string>\",\"unsubscription_observation\":\"<string>\"}]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts/actions/unsubscribe")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"data":[{"contact_id":"<string>","unsubscription_method":"<string>","unsubscription_reason":"<string>","unsubscription_observation":"<string>"},{"contact_id":"<string>","unsubscription_method":"<string>","unsubscription_reason":"<string>","unsubscription_observation":"<string>"}]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists/<integer>/contacts/actions/unsubscribe");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts/actions/unsubscribe",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"data\":[{\"contact_id\":\"<string>\",\"unsubscription_method\":\"<string>\",\"unsubscription_reason\":\"<string>\",\"unsubscription_observation\":\"<string>\"},{\"contact_id\":\"<string>\",\"unsubscription_method\":\"<string>\",\"unsubscription_reason\":\"<string>\",\"unsubscription_observation\":\"<string>\"}]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"data\":[{\"contact_id\":\"<string>\",\"unsubscription_method\":\"<string>\",\"unsubscription_reason\":\"<string>\",\"unsubscription_observation\":\"<string>\"},{\"contact_id\":\"<string>\",\"unsubscription_method\":\"<string>\",\"unsubscription_reason\":\"<string>\",\"unsubscription_observation\":\"<string>\"}]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists/<integer>/contacts/actions/unsubscribe", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts/actions/unsubscribe")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"data\":[{\"contact_id\":\"<string>\",\"unsubscription_method\":\"<string>\",\"unsubscription_reason\":\"<string>\",\"unsubscription_observation\":\"<string>\"},{\"contact_id\":\"<string>\",\"unsubscription_method\":\"<string>\",\"unsubscription_reason\":\"<string>\",\"unsubscription_observation\":\"<string>\"}]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/contacts/actions/start-automation:
    post:
      description: Start automation to the provided contacts
      operationId: actionStartAutomation
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartAutomationRequest'
        description: Parameters for the operation to start automation
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartAutomationResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Start automation
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists/<integer>/contacts/actions/start-automation' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"automation_id":"<integer>","action_id":"<integer>","contacts":["<string>","<string>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts/actions/start-automation");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"automation_id\":\"<integer>\",\"action_id\":\"<integer>\",\"contacts\":[\"<string>\",\"<string>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"automation_id\":\"<integer>\",\"action_id\":\"<integer>\",\"contacts\":[\"<string>\",\"<string>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts/actions/start-automation")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"automation_id":"<integer>","action_id":"<integer>","contacts":["<string>","<string>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists/<integer>/contacts/actions/start-automation");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts/actions/start-automation",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"automation_id\":\"<integer>\",\"action_id\":\"<integer>\",\"contacts\":[\"<string>\",\"<string>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"automation_id\":\"<integer>\",\"action_id\":\"<integer>\",\"contacts\":[\"<string>\",\"<string>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists/<integer>/contacts/actions/start-automation", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts/actions/start-automation")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"automation_id\":\"<integer>\",\"action_id\":\"<integer>\",\"contacts\":[\"<string>\",\"<string>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/contacts/actions/update:
    post:
      description: |-
        Updates a collection of contacts (does not apply to removed contacts).

            Note that all contacts will be updated with the same values and the existance of unique fields in the payload will trigger a 409 Conflict response.
      operationId: actionUpdateContacts
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactsRequest'
        description: Parameters for the request
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Updates contacts
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists/<integer>/contacts/actions/update' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"type":"<string>","contacts":["<string>"],"base":{"contact_id":"<string>","status":"active","consent":"<string>","first_name":"<string>","last_name":"<string>","birth_date":"<date>","language":"en","email":"<string>","email_status":"<string>","cellphone":"<string>","cellphone_status":"<string>","phone":"<string>","phone_status":"<string>"},"extra":[{"field_id":"<integer>","format":"<string>","value":"<date>"},{"field_id":"<integer>","format":"<string>","value":"<date>"}]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts/actions/update");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"type\":\"<string>\",\"contacts\":[\"<string>\"],\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"consent\":\"<string>\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"email_status\":\"<string>\",\"cellphone\":\"<string>\",\"cellphone_status\":\"<string>\",\"phone\":\"<string>\",\"phone_status\":\"<string>\"},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"type\":\"<string>\",\"contacts\":[\"<string>\"],\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"consent\":\"<string>\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"email_status\":\"<string>\",\"cellphone\":\"<string>\",\"cellphone_status\":\"<string>\",\"phone\":\"<string>\",\"phone_status\":\"<string>\"},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts/actions/update")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"type":"<string>","contacts":["<string>"],"base":{"contact_id":"<string>","status":"active","consent":"<string>","first_name":"<string>","last_name":"<string>","birth_date":"<date>","language":"en","email":"<string>","email_status":"<string>","cellphone":"<string>","cellphone_status":"<string>","phone":"<string>","phone_status":"<string>"},"extra":[{"field_id":"<integer>","format":"<string>","value":"<date>"},{"field_id":"<integer>","format":"<string>","value":"<date>"}]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists/<integer>/contacts/actions/update");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts/actions/update",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"type\":\"<string>\",\"contacts\":[\"<string>\"],\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"consent\":\"<string>\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"email_status\":\"<string>\",\"cellphone\":\"<string>\",\"cellphone_status\":\"<string>\",\"phone\":\"<string>\",\"phone_status\":\"<string>\"},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"type\":\"<string>\",\"contacts\":[\"<string>\"],\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"consent\":\"<string>\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"email_status\":\"<string>\",\"cellphone\":\"<string>\",\"cellphone_status\":\"<string>\",\"phone\":\"<string>\",\"phone_status\":\"<string>\"},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists/<integer>/contacts/actions/update", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts/actions/update")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"type\":\"<string>\",\"contacts\":[\"<string>\"],\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"consent\":\"<string>\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"email_status\":\"<string>\",\"cellphone\":\"<string>\",\"cellphone_status\":\"<string>\",\"phone\":\"<string>\",\"phone_status\":\"<string>\"},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/contacts/{contact_id}/activities:
    get:
      description: Returns all contact activities
      operationId: getAllContactActivities
      parameters:
      - description: ID of the Contact
        explode: false
        in: path
        name: contact_id
        required: true
        schema:
          $ref: '#/components/schemas/contact_query_id'
        style: simple
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Start date
        explode: true
        in: query
        name: date_min
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: End date
        explode: true
        in: query
        name: date_max
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all contact activities
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/lists/<integer>/contacts/<string>/activities?offset=<integer>&limit=10&date_min=<dateTime>&date_max=<dateTime>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts/<string>/activities?offset=<integer>&limit=10&date_min=<dateTime>&date_max=<dateTime>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts/<string>/activities?offset=<integer>&limit=10&date_min=<dateTime>&date_max=<dateTime>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/lists/<integer>/contacts/<string>/activities?offset=<integer>&limit=10&date_min=<dateTime>&date_max=<dateTime>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts/<string>/activities?offset=<integer>&limit=10&date_min=<dateTime>&date_max=<dateTime>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/lists/<integer>/contacts/<string>/activities?offset=<integer>&limit=10&date_min=<dateTime>&date_max=<dateTime>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts/<string>/activities?offset=<integer>&limit=10&date_min=<dateTime>&date_max=<dateTime>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /lists/{list_id}/contacts:
    get:
      description: Returns all contacts
      operationId: getAllContacts
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: First name of the contacts to return
        explode: true
        in: query
        name: first_name
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Last name of the contacts to return
        explode: true
        in: query
        name: last_name
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Email of the contacts to return
        explode: true
        in: query
        name: email
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: EmailStatus of the contacts to return
        explode: true
        in: query
        name: email_status
        required: false
        schema:
          type: boolean
        style: form
      - allowEmptyValue: false
        description: Cellphone of the contacts to return
        explode: true
        in: query
        name: cellphone
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: CellphoneStatus of the contacts to return
        explode: true
        in: query
        name: cellphone_status
        required: false
        schema:
          type: boolean
        style: form
      - allowEmptyValue: false
        description: Phone of the contacts to return
        explode: true
        in: query
        name: phone
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: PhoneStatus of the contacts to return
        explode: true
        in: query
        name: phone_status
        required: false
        schema:
          type: boolean
        style: form
      - allowEmptyValue: false
        description: Birth date of the contacts to return
        explode: true
        in: query
        name: birth_date
        required: false
        schema:
          type: date
        style: form
      - allowEmptyValue: false
        description: Language date of the contacts to return
        explode: true
        in: query
        name: language
        required: false
        schema:
          enum:
          - pt
          - en
          - es
          - br
          - fr
          - de
          type: string
        style: form
      - allowEmptyValue: false
        description: "Extra field of contacts<div><span class='sc-cJSrbW cWGDGi'>\
          \ Example: </span> <span class='sc-uJMKN cTkJKI'> 'extra_field_id[field_id]=value'\
          \ </span></div>"
        explode: true
        in: query
        name: extra_field_id
        required: false
        schema:
          $ref: '#/components/schemas/getAllContacts_extra_field_id_parameter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all contacts
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/lists/<integer>/contacts?offset=<integer>&limit=10&first_name=<string>&last_name=<string>&email=<string>&email_status=<boolean>&cellphone=<string>&cellphone_status=<boolean>&phone=<string>&phone_status=<boolean>&birth_date=<date>&language=<string>&extra_field_id={"field_id":"<string>","other_field_id":"<string>"}' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts?offset=<integer>&limit=10&first_name=<string>&last_name=<string>&email=<string>&email_status=<boolean>&cellphone=<string>&cellphone_status=<boolean>&phone=<string>&phone_status=<boolean>&birth_date=<date>&language=<string>&extra_field_id={\"field_id\":\"<string>\",\"other_field_id\":\"<string>\"}");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts?offset=<integer>&limit=10&first_name=<string>&last_name=<string>&email=<string>&email_status=<boolean>&cellphone=<string>&cellphone_status=<boolean>&phone=<string>&phone_status=<boolean>&birth_date=<date>&language=<string>&extra_field_id={\"field_id\":\"<string>\",\"other_field_id\":\"<string>\"}")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/lists/<integer>/contacts?offset=<integer>&limit=10&first_name=<string>&last_name=<string>&email=<string>&email_status=<boolean>&cellphone=<string>&cellphone_status=<boolean>&phone=<string>&phone_status=<boolean>&birth_date=<date>&language=<string>&extra_field_id={"field_id":"<string>","other_field_id":"<string>"}");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts?offset=<integer>&limit=10&first_name=<string>&last_name=<string>&email=<string>&email_status=<boolean>&cellphone=<string>&cellphone_status=<boolean>&phone=<string>&phone_status=<boolean>&birth_date=<date>&language=<string>&extra_field_id={"field_id":"<string>","other_field_id":"<string>"}",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/lists/<integer>/contacts?offset=<integer>&limit=10&first_name=<string>&last_name=<string>&email=<string>&email_status=<boolean>&cellphone=<string>&cellphone_status=<boolean>&phone=<string>&phone_status=<boolean>&birth_date=<date>&language=<string>&extra_field_id={\"field_id\":\"<string>\",\"other_field_id\":\"<string>\"}", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts?offset=<integer>&limit=10&first_name=<string>&last_name=<string>&email=<string>&email_status=<boolean>&cellphone=<string>&cellphone_status=<boolean>&phone=<string>&phone_status=<boolean>&birth_date=<date>&language=<string>&extra_field_id={\"field_id\":\"<string>\",\"other_field_id\":\"<string>\"}")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Create a new contact
      operationId: createContact
      parameters:
      - description: ID of the list where the contact belongs
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contactBaseExtraPost'
        description: Parameters for the Contact
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateContactResponse'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostContactsConflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new contact
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists/<integer>/contacts' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"base":{"contact_id":"<string>","status":"active","first_name":"<string>","last_name":"<string>","birth_date":"<date>","language":"en","email":"<string>","cellphone":"<string>","phone":"<string>","push_token_android":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}],"push_token_ios":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}]},"extra":[{"field_id":"<integer>","format":"<string>","value":"<date>"},{"field_id":"<integer>","format":"<string>","value":"<date>"}]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"base":{"contact_id":"<string>","status":"active","first_name":"<string>","last_name":"<string>","birth_date":"<date>","language":"en","email":"<string>","cellphone":"<string>","phone":"<string>","push_token_android":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}],"push_token_ios":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}]},"extra":[{"field_id":"<integer>","format":"<string>","value":"<date>"},{"field_id":"<integer>","format":"<string>","value":"<date>"}]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists/<integer>/contacts");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists/<integer>/contacts", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/contacts/{contact_id}:
    get:
      description: Returns contact information given its ID
      operationId: getContact
      parameters:
      - description: ID of the Contact
        explode: false
        in: path
        name: contact_id
        required: true
        schema:
          $ref: '#/components/schemas/contact_query_id'
        style: simple
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplexContact'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get contact
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/lists/<integer>/contacts/<string>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts/<string>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/lists/<integer>/contacts/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/lists/<integer>/contacts/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    patch:
      description: Update contact
      operationId: patchContact
      parameters:
      - description: ID of the Contact
        explode: false
        in: path
        name: contact_id
        required: true
        schema:
          $ref: '#/components/schemas/contact_query_id'
        style: simple
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contactBaseStatusExtraNoRemoved'
        description: Parameters for the contact
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateContactResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update a specific contact
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PATCH 'api.egoiapp.com/lists/<integer>/contacts/<string>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"base":{"contact_id":"<string>","status":"active","consent":"<string>","first_name":"<string>","last_name":"<string>","birth_date":"<date>","language":"en","email":"<string>","email_status":"<string>","cellphone":"<string>","cellphone_status":"<string>","phone":"<string>","phone_status":"<string>","push_token_android":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}],"push_token_ios":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}]},"extra":[{"field_id":"<integer>","format":"<string>","value":"<date>"},{"field_id":"<integer>","format":"<string>","value":"<date>"}]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"consent\":\"<string>\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"email_status\":\"<string>\",\"cellphone\":\"<string>\",\"cellphone_status\":\"<string>\",\"phone\":\"<string>\",\"phone_status\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"consent\":\"<string>\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"email_status\":\"<string>\",\"cellphone\":\"<string>\",\"cellphone_status\":\"<string>\",\"phone\":\"<string>\",\"phone_status\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts/<string>")
              .method("PATCH", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"base":{"contact_id":"<string>","status":"active","consent":"<string>","first_name":"<string>","last_name":"<string>","birth_date":"<date>","language":"en","email":"<string>","email_status":"<string>","cellphone":"<string>","cellphone_status":"<string>","phone":"<string>","phone_status":"<string>","push_token_android":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}],"push_token_ios":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}]},"extra":[{"field_id":"<integer>","format":"<string>","value":"<date>"},{"field_id":"<integer>","format":"<string>","value":"<date>"}]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PATCH", "api.egoiapp.com/lists/<integer>/contacts/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS =>"{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"consent\":\"<string>\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"email_status\":\"<string>\",\"cellphone\":\"<string>\",\"cellphone_status\":\"<string>\",\"phone\":\"<string>\",\"phone_status\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"consent\":\"<string>\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"email_status\":\"<string>\",\"cellphone\":\"<string>\",\"cellphone_status\":\"<string>\",\"phone\":\"<string>\",\"phone_status\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PATCH", "/lists/<integer>/contacts/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Patch.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"consent\":\"<string>\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"email_status\":\"<string>\",\"cellphone\":\"<string>\",\"cellphone_status\":\"<string>\",\"phone\":\"<string>\",\"phone_status\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /contacts/search:
    get:
      description: Searches a contact across all lists and returns a collection of
        contacts found
      operationId: searchContacts
      parameters:
      - allowEmptyValue: false
        description: Type of contact to search (defaults to 'email')
        explode: true
        in: query
        name: type
        required: false
        schema:
          default: email
          enum:
          - email
          - cellphone
          - phone
          type: string
        style: form
      - allowEmptyValue: false
        description: Contact to search
        explode: true
        in: query
        name: contact
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchContacts_200_response'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Search contact
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/contacts/search?type=email&contact=<string>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/contacts/search?type=email&contact=<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/contacts/search?type=email&contact=<string>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/contacts/search?type=email&contact=<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/contacts/search?type=email&contact=<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/contacts/search?type=email&contact=<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/contacts/search?type=email&contact=<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /lists/{list_id}/contacts/segment/{segment_id}:
    get:
      description: Returns all contacts filtered by Segment Id
      operationId: getAllContactsBySegment
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - description: ID of the Segment
        explode: false
        in: path
        name: segment_id
        required: true
        schema:
          type: string
        style: simple
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Show removed contacts
        explode: true
        in: query
        name: show_removed
        required: false
        schema:
          $ref: '#/components/schemas/show_removed'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactCollection'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all contacts by Segment Id
      tags:
      - Contacts
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/lists/<integer>/contacts/segment/<string>?offset=<integer>&limit=10&show_removed=false' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/contacts/segment/<string>?offset=<integer>&limit=10&show_removed=false");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/contacts/segment/<string>?offset=<integer>&limit=10&show_removed=false")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/lists/<integer>/contacts/segment/<string>?offset=<integer>&limit=10&show_removed=false");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/contacts/segment/<string>?offset=<integer>&limit=10&show_removed=false",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/lists/<integer>/contacts/segment/<string>?offset=<integer>&limit=10&show_removed=false", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/contacts/segment/<string>?offset=<integer>&limit=10&show_removed=false")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /cnames:
    get:
      description: Returns all cnames
      operationId: getAllCNames
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CNamesCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get All CNames
      tags:
      - CNames
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/cnames' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/cnames");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/cnames")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/cnames");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/cnames",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/cnames", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/cnames")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Creates a cnames
      operationId: createCName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CNamePost'
        description: Parameters for the cname
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CName'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCNameConflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create cname
      tags:
      - CNames
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/cnames' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"value":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/cnames");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"value\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"value\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/cnames")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"value":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/cnames");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/cnames",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"value\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"value\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/cnames", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/cnames")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"value\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /{domain}/carts:
    post:
      description: "Creates a new cart. If ***contact_id*** is specified, order will\
        \ be atached to the contact, if the contact propreties are specified, we'll\
        \ create the user, if its already in your list it will get the correct contact\
        \ (**make sure you are sending atleast all configured list's unique fields**).\
        \ This same logic is also applied to the **product_identifier**."
      operationId: createCart
      parameters:
      - description: Domain
        explode: false
        in: path
        name: domain
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
        description: Parameters for the Carts
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create cart
      tags:
      - Ecommerce
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/<string>/carts' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"cart_id":"<string>","cart_total":"<double>","contact":{"base":{"contact_id":"<string>","status":"active","first_name":"<string>","last_name":"<string>","birth_date":"<date>","language":"en","email":"<string>","cellphone":"<string>","phone":"<string>","push_token_android":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}],"push_token_ios":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}]},"extra":[{"field_id":"<integer>","format":"<string>","value":"<date>"},{"field_id":"<integer>","format":"<string>","value":"<date>"}]},"products":[{"categories":["<string>","<string>"],"related_products":["<string>","<string>"],"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}],"product_identifier":"<string>","catalog_id":"<integer>","name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>"},{"categories":["<string>","<string>"],"related_products":["<string>","<string>"],"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}],"product_identifier":"<string>","catalog_id":"<integer>","name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>"}]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/<string>/carts");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"cart_id\":\"<string>\",\"cart_total\":\"<double>\",\"contact\":{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"cart_id\":\"<string>\",\"cart_total\":\"<double>\",\"contact\":{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/<string>/carts")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"cart_id":"<string>","cart_total":"<double>","contact":{"base":{"contact_id":"<string>","status":"active","first_name":"<string>","last_name":"<string>","birth_date":"<date>","language":"en","email":"<string>","cellphone":"<string>","phone":"<string>","push_token_android":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}],"push_token_ios":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}]},"extra":[{"field_id":"<integer>","format":"<string>","value":"<date>"},{"field_id":"<integer>","format":"<string>","value":"<date>"}]},"products":[{"categories":["<string>","<string>"],"related_products":["<string>","<string>"],"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}],"product_identifier":"<string>","catalog_id":"<integer>","name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>"},{"categories":["<string>","<string>"],"related_products":["<string>","<string>"],"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}],"product_identifier":"<string>","catalog_id":"<integer>","name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>"}]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/<string>/carts");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/<string>/carts",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"cart_id\":\"<string>\",\"cart_total\":\"<double>\",\"contact\":{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"cart_id\":\"<string>\",\"cart_total\":\"<double>\",\"contact\":{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/<string>/carts", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/<string>/carts")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"cart_id\":\"<string>\",\"cart_total\":\"<double>\",\"contact\":{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /catalogs:
    get:
      description: Returns all catalogs
      operationId: getAllCatalogs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all catalogs
      tags:
      - Ecommerce
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/catalogs' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/catalogs");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/catalogs")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/catalogs");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/catalogs",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/catalogs", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/catalogs")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Creates a new catalog
      operationId: createCatalog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogPostRequest'
        description: Parameters for the Catalog
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new catalog
      tags:
      - Ecommerce
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/catalogs' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"title":"<string>","language":"<string>","currency":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/catalogs");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"title\":\"<string>\",\"language\":\"<string>\",\"currency\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"title\":\"<string>\",\"language\":\"<string>\",\"currency\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/catalogs")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"title":"<string>","language":"<string>","currency":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/catalogs");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/catalogs",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"title\":\"<string>\",\"language\":\"<string>\",\"currency\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"title\":\"<string>\",\"language\":\"<string>\",\"currency\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/catalogs", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/catalogs")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"title\":\"<string>\",\"language\":\"<string>\",\"currency\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /catalogs/{catalog_id}:
    delete:
      description: Remove catalog information given its ID
      operationId: deleteCatalog
      parameters:
      - description: ID of the Catalog
        explode: false
        in: path
        name: catalog_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Remove catalog
      tags:
      - Ecommerce
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/catalogs/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/catalogs/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/catalogs/<integer>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/catalogs/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/catalogs/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/catalogs/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/catalogs/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /{domain}/orders:
    post:
      description: "Creates a new order. If **contact_id** is specified, order will\
        \ be atached to the contact, if the contact propreties are specified, we'll\
        \ create the user, if its already in your list it will get the correct contact\
        \ (***make sure you are sending atleast all configured list's unique fields***).\
        \ This same logic is also applied to the **product_identifier**."
      operationId: CreateOrder
      parameters:
      - description: Domain
        explode: false
        in: path
        name: domain
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
        description: Parameters for the Orders
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestEntityTooLarge'
          description: Request Entity Too Large
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create order
      tags:
      - Ecommerce
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/<string>/orders' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"order_id":"<string>","order_total":"<double>","cart_id":"<string>","contact":{"base":{"contact_id":"<string>","status":"active","first_name":"<string>","last_name":"<string>","birth_date":"<date>","language":"en","email":"<string>","cellphone":"<string>","phone":"<string>","push_token_android":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}],"push_token_ios":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}]},"extra":[{"field_id":"<integer>","format":"<string>","value":"<date>"},{"field_id":"<integer>","format":"<string>","value":"<date>"}]},"products":[{"categories":["<string>","<string>"],"related_products":["<string>","<string>"],"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}],"product_identifier":"<string>","catalog_id":"<integer>","name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>"},{"categories":["<string>","<string>"],"related_products":["<string>","<string>"],"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}],"product_identifier":"<string>","catalog_id":"<integer>","name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>"}]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/<string>/orders");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"order_id\":\"<string>\",\"order_total\":\"<double>\",\"cart_id\":\"<string>\",\"contact\":{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"order_id\":\"<string>\",\"order_total\":\"<double>\",\"cart_id\":\"<string>\",\"contact\":{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/<string>/orders")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"order_id":"<string>","order_total":"<double>","cart_id":"<string>","contact":{"base":{"contact_id":"<string>","status":"active","first_name":"<string>","last_name":"<string>","birth_date":"<date>","language":"en","email":"<string>","cellphone":"<string>","phone":"<string>","push_token_android":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}],"push_token_ios":[{"app_id":"<string>","token":"<string>"},{"app_id":"<string>","token":"<string>"}]},"extra":[{"field_id":"<integer>","format":"<string>","value":"<date>"},{"field_id":"<integer>","format":"<string>","value":"<date>"}]},"products":[{"categories":["<string>","<string>"],"related_products":["<string>","<string>"],"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}],"product_identifier":"<string>","catalog_id":"<integer>","name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>"},{"categories":["<string>","<string>"],"related_products":["<string>","<string>"],"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}],"product_identifier":"<string>","catalog_id":"<integer>","name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>"}]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/<string>/orders");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/<string>/orders",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"order_id\":\"<string>\",\"order_total\":\"<double>\",\"cart_id\":\"<string>\",\"contact\":{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"order_id\":\"<string>\",\"order_total\":\"<double>\",\"cart_id\":\"<string>\",\"contact\":{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/<string>/orders", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/<string>/orders")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"order_id\":\"<string>\",\"order_total\":\"<double>\",\"cart_id\":\"<string>\",\"contact\":{\"base\":{\"contact_id\":\"<string>\",\"status\":\"active\",\"first_name\":\"<string>\",\"last_name\":\"<string>\",\"birth_date\":\"<date>\",\"language\":\"en\",\"email\":\"<string>\",\"cellphone\":\"<string>\",\"phone\":\"<string>\",\"push_token_android\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}],\"push_token_ios\":[{\"app_id\":\"<string>\",\"token\":\"<string>\"},{\"app_id\":\"<string>\",\"token\":\"<string>\"}]},\"extra\":[{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"},{\"field_id\":\"<integer>\",\"format\":\"<string>\",\"value\":\"<date>\"}]},\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/orders:
    post:
      description: |-
        Creates new bulk orders syncronization </br>
             **DISCLAIMER:** stream limits applied. [view here](#section/Stream-Limits 'Stream Limits')
      operationId: ImportOrdersBulk
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportOrdersBulk'
        description: Parameters for the Orders
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: NotFound
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Orders import bulk request
      tags:
      - Ecommerce Activity
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists/<integer>/orders' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '[{"order_id":"<string>","revenue":"<number>","store_url":"<string>","date":"<dateTime>","items":[{"id":"<string>","name":"<string>","category":"<string>","price":"<number>","quantity":"<integer>"},{"id":"<string>","name":"<string>","category":"<string>","price":"<number>","quantity":"<integer>"}],"contact_id":"<string>"},{"order_id":"<string>","revenue":"<number>","store_url":"<string>","date":"<dateTime>","items":[{"id":"<string>","name":"<string>","category":"<string>","price":"<number>","quantity":"<integer>"},{"id":"<string>","name":"<string>","category":"<string>","price":"<number>","quantity":"<integer>"}],"contact_id":"<string>"}]'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/orders");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "[{\"order_id\":\"<string>\",\"revenue\":\"<number>\",\"store_url\":\"<string>\",\"date\":\"<dateTime>\",\"items\":[{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"},{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"}],\"contact_id\":\"<string>\"},{\"order_id\":\"<string>\",\"revenue\":\"<number>\",\"store_url\":\"<string>\",\"date\":\"<dateTime>\",\"items\":[{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"},{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"}],\"contact_id\":\"<string>\"}]",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "[{\"order_id\":\"<string>\",\"revenue\":\"<number>\",\"store_url\":\"<string>\",\"date\":\"<dateTime>\",\"items\":[{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"},{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"}],\"contact_id\":\"<string>\"},{\"order_id\":\"<string>\",\"revenue\":\"<number>\",\"store_url\":\"<string>\",\"date\":\"<dateTime>\",\"items\":[{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"},{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"}],\"contact_id\":\"<string>\"}]");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/orders")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify([{"order_id":"<string>","revenue":"<number>","store_url":"<string>","date":"<dateTime>","items":[{"id":"<string>","name":"<string>","category":"<string>","price":"<number>","quantity":"<integer>"},{"id":"<string>","name":"<string>","category":"<string>","price":"<number>","quantity":"<integer>"}],"contact_id":"<string>"},{"order_id":"<string>","revenue":"<number>","store_url":"<string>","date":"<dateTime>","items":[{"id":"<string>","name":"<string>","category":"<string>","price":"<number>","quantity":"<integer>"},{"id":"<string>","name":"<string>","category":"<string>","price":"<number>","quantity":"<integer>"}],"contact_id":"<string>"}]);

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists/<integer>/orders");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/orders",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"[{\"order_id\":\"<string>\",\"revenue\":\"<number>\",\"store_url\":\"<string>\",\"date\":\"<dateTime>\",\"items\":[{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"},{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"}],\"contact_id\":\"<string>\"},{\"order_id\":\"<string>\",\"revenue\":\"<number>\",\"store_url\":\"<string>\",\"date\":\"<dateTime>\",\"items\":[{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"},{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"}],\"contact_id\":\"<string>\"}]",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "[{\"order_id\":\"<string>\",\"revenue\":\"<number>\",\"store_url\":\"<string>\",\"date\":\"<dateTime>\",\"items\":[{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"},{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"}],\"contact_id\":\"<string>\"},{\"order_id\":\"<string>\",\"revenue\":\"<number>\",\"store_url\":\"<string>\",\"date\":\"<dateTime>\",\"items\":[{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"},{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"}],\"contact_id\":\"<string>\"}]"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists/<integer>/orders", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/orders")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "[{\"order_id\":\"<string>\",\"revenue\":\"<number>\",\"store_url\":\"<string>\",\"date\":\"<dateTime>\",\"items\":[{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"},{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"}],\"contact_id\":\"<string>\"},{\"order_id\":\"<string>\",\"revenue\":\"<number>\",\"store_url\":\"<string>\",\"date\":\"<dateTime>\",\"items\":[{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"},{\"id\":\"<string>\",\"name\":\"<string>\",\"category\":\"<string>\",\"price\":\"<number>\",\"quantity\":\"<integer>\"}],\"contact_id\":\"<string>\"}]"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /catalogs/{catalog_id}/products/actions/import:
    post:
      description: |-
        Imports a collection of products</br>
             **DISCLAIMER:** stream limits applied. [view here](#section/Stream-Limits 'Stream Limits')
      operationId: ImportProducts
      parameters:
      - description: ID of the Catalog
        explode: false
        in: path
        name: catalog_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductBulkRequest'
        description: Parameters for the Product
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayloadTooLarge'
          description: Payload Too Large
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Import products
      tags:
      - Ecommerce
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/catalogs/<integer>/products/actions/import' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"products":[{"categories":["<string>","<string>"],"related_products":["<string>","<string>"],"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}],"product_identifier":"<string>","catalog_id":"<integer>","name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>"},{"categories":["<string>","<string>"],"related_products":["<string>","<string>"],"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}],"product_identifier":"<string>","catalog_id":"<integer>","name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>"}],"mode":"update"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/catalogs/<integer>/products/actions/import");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}],\"mode\":\"update\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}],\"mode\":\"update\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/catalogs/<integer>/products/actions/import")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"products":[{"categories":["<string>","<string>"],"related_products":["<string>","<string>"],"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}],"product_identifier":"<string>","catalog_id":"<integer>","name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>"},{"categories":["<string>","<string>"],"related_products":["<string>","<string>"],"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}],"product_identifier":"<string>","catalog_id":"<integer>","name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>"}],"mode":"update"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/catalogs/<integer>/products/actions/import");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/catalogs/<integer>/products/actions/import",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}],\"mode\":\"update\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}],\"mode\":\"update\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/catalogs/<integer>/products/actions/import", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/catalogs/<integer>/products/actions/import")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"products\":[{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"},{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}],\"mode\":\"update\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /catalogs/{catalog_id}/products:
    get:
      description: Returns all products for the given catalog
      operationId: getAllProducts
      parameters:
      - description: ID of the Catalog
        explode: false
        in: path
        name: catalog_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - allowEmptyValue: false
        description: Filter by product ID in your store
        explode: true
        in: query
        name: product_identifier
        required: false
        schema:
          pattern: "[a-zA-Z0-9\\_\\-.]"
          type: string
        style: form
      - allowEmptyValue: false
        description: Filter by name of the product
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Filter by description of the product
        explode: true
        in: query
        name: description
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Filter by Stock Keeping Unit
        explode: true
        in: query
        name: sku
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Filter by Universal Product Code
        explode: true
        in: query
        name: upc
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Filter by European Article Numbering
        explode: true
        in: query
        name: ean
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Filter by Global Trade Item Number
        explode: true
        in: query
        name: gtin
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Filter by Manufacturer Part Number
        explode: true
        in: query
        name: mpn
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Filter by price of the product
        explode: true
        in: query
        name: price
        required: false
        schema:
          type: number
        style: form
      - allowEmptyValue: false
        description: Filter by sale price of the product
        explode: true
        in: query
        name: sale_price
        required: false
        schema:
          type: number
        style: form
      - allowEmptyValue: false
        description: Filter by brand of the product
        explode: true
        in: query
        name: brand
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: "Filter by custom attributes of products<div><span class='sc-cJSrbW\
          \ cWGDGi'> Example: </span> <span class='sc-uJMKN cTkJKI'> 'custom_attributes[alias]=value'\
          \ </span></div>"
        explode: true
        in: query
        name: custom_attributes
        required: false
        schema:
          $ref: '#/components/schemas/getAllProducts_custom_attributes_parameter'
        style: deepObject
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all products
      tags:
      - Ecommerce
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/catalogs/<integer>/products?product_identifier=<string>&name=<string>&description=<string>&sku=<string>&upc=<string>&ean=<string>&gtin=<string>&mpn=<string>&price=<number>&sale_price=<number>&brand=<string>&custom_attributes[alias]=<string>&custom_attributes[other_alias]=<string>&offset=<integer>&limit=10' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/catalogs/<integer>/products?product_identifier=<string>&name=<string>&description=<string>&sku=<string>&upc=<string>&ean=<string>&gtin=<string>&mpn=<string>&price=<number>&sale_price=<number>&brand=<string>&custom_attributes[alias]=<string>&custom_attributes[other_alias]=<string>&offset=<integer>&limit=10");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/catalogs/<integer>/products?product_identifier=<string>&name=<string>&description=<string>&sku=<string>&upc=<string>&ean=<string>&gtin=<string>&mpn=<string>&price=<number>&sale_price=<number>&brand=<string>&custom_attributes[alias]=<string>&custom_attributes[other_alias]=<string>&offset=<integer>&limit=10")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/catalogs/<integer>/products?product_identifier=<string>&name=<string>&description=<string>&sku=<string>&upc=<string>&ean=<string>&gtin=<string>&mpn=<string>&price=<number>&sale_price=<number>&brand=<string>&custom_attributes[alias]=<string>&custom_attributes[other_alias]=<string>&offset=<integer>&limit=10");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/catalogs/<integer>/products?product_identifier=<string>&name=<string>&description=<string>&sku=<string>&upc=<string>&ean=<string>&gtin=<string>&mpn=<string>&price=<number>&sale_price=<number>&brand=<string>&custom_attributes[alias]=<string>&custom_attributes[other_alias]=<string>&offset=<integer>&limit=10",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/catalogs/<integer>/products?product_identifier=<string>&name=<string>&description=<string>&sku=<string>&upc=<string>&ean=<string>&gtin=<string>&mpn=<string>&price=<number>&sale_price=<number>&brand=<string>&custom_attributes[alias]=<string>&custom_attributes[other_alias]=<string>&offset=<integer>&limit=10", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/catalogs/<integer>/products?product_identifier=<string>&name=<string>&description=<string>&sku=<string>&upc=<string>&ean=<string>&gtin=<string>&mpn=<string>&price=<number>&sale_price=<number>&brand=<string>&custom_attributes[alias]=<string>&custom_attributes[other_alias]=<string>&offset=<integer>&limit=10")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Creates a new product
      operationId: createProduct
      parameters:
      - description: ID of the Catalog
        explode: false
        in: path
        name: catalog_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPostRequest'
        description: Parameters for the Product
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostProductsConflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new product
      tags:
      - Ecommerce
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/catalogs/<integer>/products' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"categories":["<string>","<string>"],"related_products":["<string>","<string>"],"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}],"product_identifier":"<string>","catalog_id":"<integer>","name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/catalogs/<integer>/products");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/catalogs/<integer>/products")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"categories":["<string>","<string>"],"related_products":["<string>","<string>"],"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}],"product_identifier":"<string>","catalog_id":"<integer>","name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/catalogs/<integer>/products");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/catalogs/<integer>/products",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/catalogs/<integer>/products", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/catalogs/<integer>/products")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"categories\":[\"<string>\",\"<string>\"],\"related_products\":[\"<string>\",\"<string>\"],\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}],\"product_identifier\":\"<string>\",\"catalog_id\":\"<integer>\",\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /catalogs/{catalog_id}/products/{product_identifier}:
    delete:
      description: Remove product information given its ID
      operationId: deleteProduct
      parameters:
      - description: ID of the Catalog
        explode: false
        in: path
        name: catalog_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - description: ID of the Product
        explode: false
        in: path
        name: product_identifier
        required: true
        schema:
          pattern: "[a-zA-Z0-9\\_\\-.]"
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Remove product
      tags:
      - Ecommerce
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/catalogs/<integer>/products/<string>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/catalogs/<integer>/products/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/catalogs/<integer>/products/<string>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/catalogs/<integer>/products/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/catalogs/<integer>/products/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/catalogs/<integer>/products/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/catalogs/<integer>/products/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    get:
      description: Returns product information given its ID
      operationId: getProduct
      parameters:
      - description: ID of the Catalog
        explode: false
        in: path
        name: catalog_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - description: ID of the Product
        explode: false
        in: path
        name: product_identifier
        required: true
        schema:
          pattern: "[a-zA-Z0-9\\_\\-.]"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get product
      tags:
      - Ecommerce
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/catalogs/<integer>/products/<string>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/catalogs/<integer>/products/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/catalogs/<integer>/products/<string>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/catalogs/<integer>/products/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/catalogs/<integer>/products/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/catalogs/<integer>/products/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/catalogs/<integer>/products/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    patch:
      description: Updates a product
      operationId: updateProduct
      parameters:
      - description: ID of the Catalog
        explode: false
        in: path
        name: catalog_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - description: ID of the Product
        explode: false
        in: path
        name: product_identifier
        required: true
        schema:
          pattern: "[a-zA-Z0-9\\_\\-.]"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPatchRequest'
        description: Parameters for the product
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update product
      tags:
      - Ecommerce
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PATCH 'api.egoiapp.com/catalogs/<integer>/products/<string>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>","categories":["<string>","<string>"],"related_products":{"external_product_id":["<string>","<string>"]},"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/catalogs/<integer>/products/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\",\"categories\":[\"<string>\",\"<string>\"],\"related_products\":{\"external_product_id\":[\"<string>\",\"<string>\"]},\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\",\"categories\":[\"<string>\",\"<string>\"],\"related_products\":{\"external_product_id\":[\"<string>\",\"<string>\"]},\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/catalogs/<integer>/products/<string>")
              .method("PATCH", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"name":"<string>","description":"<string>","sku":"<string>","upc":"<string>","ean":"<string>","gtin":"<string>","mpn":"<string>","link":"<string>","image_link":"<string>","price":0,"sale_price":0,"brand":"<string>","categories":["<string>","<string>"],"related_products":{"external_product_id":["<string>","<string>"]},"custom_attributes":[{"alias":"<string>","value":"<string>"},{"alias":"<string>","value":"<string>"}]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PATCH", "api.egoiapp.com/catalogs/<integer>/products/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/catalogs/<integer>/products/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS =>"{\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\",\"categories\":[\"<string>\",\"<string>\"],\"related_products\":{\"external_product_id\":[\"<string>\",\"<string>\"]},\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\",\"categories\":[\"<string>\",\"<string>\"],\"related_products\":{\"external_product_id\":[\"<string>\",\"<string>\"]},\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PATCH", "/catalogs/<integer>/products/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/catalogs/<integer>/products/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Patch.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"name\":\"<string>\",\"description\":\"<string>\",\"sku\":\"<string>\",\"upc\":\"<string>\",\"ean\":\"<string>\",\"gtin\":\"<string>\",\"mpn\":\"<string>\",\"link\":\"<string>\",\"image_link\":\"<string>\",\"price\":0,\"sale_price\":0,\"brand\":\"<string>\",\"categories\":[\"<string>\",\"<string>\"],\"related_products\":{\"external_product_id\":[\"<string>\",\"<string>\"]},\"custom_attributes\":[{\"alias\":\"<string>\",\"value\":\"<string>\"},{\"alias\":\"<string>\",\"value\":\"<string>\"}]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/fields/base/{field_id}:
    patch:
      description: Updates a base field
      operationId: patchBaseField
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - description: ID of the base field
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequestBaseField'
        description: Parameters for the extra field
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update base field
      tags:
      - Fields
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PATCH 'api.egoiapp.com/lists/<integer>/fields/base/<string>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"unique":"<boolean>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/fields/base/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"unique\":\"<boolean>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"unique\":\"<boolean>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/fields/base/<string>")
              .method("PATCH", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"unique":"<boolean>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PATCH", "api.egoiapp.com/lists/<integer>/fields/base/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/fields/base/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS =>"{\"unique\":\"<boolean>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"unique\":\"<boolean>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PATCH", "/lists/<integer>/fields/base/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/fields/base/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Patch.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"unique\":\"<boolean>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/fields/extra/{field_id}:
    delete:
      description: Removes an extra field given its ID
      operationId: deleteExtraField
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - description: ID of the Field
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFieldsConflict'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Remove extra field
      tags:
      - Fields
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/lists/<integer>/fields/extra/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/fields/extra/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/fields/extra/<integer>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/lists/<integer>/fields/extra/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/fields/extra/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/lists/<integer>/fields/extra/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/fields/extra/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    patch:
      description: Updates an extra field
      operationId: patchExtraField
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - description: ID of the Field
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequestField'
        description: Parameters for the extra field
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update extra field
      tags:
      - Fields
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PATCH 'api.egoiapp.com/lists/<integer>/fields/extra/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"name":"<string>","unique":"<boolean>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/fields/extra/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"name\":\"<string>\",\"unique\":\"<boolean>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"<string>\",\"unique\":\"<boolean>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/fields/extra/<integer>")
              .method("PATCH", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"name":"<string>","unique":"<boolean>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PATCH", "api.egoiapp.com/lists/<integer>/fields/extra/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/fields/extra/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS =>"{\"name\":\"<string>\",\"unique\":\"<boolean>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"name\":\"<string>\",\"unique\":\"<boolean>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PATCH", "/lists/<integer>/fields/extra/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/fields/extra/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Patch.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"name\":\"<string>\",\"unique\":\"<boolean>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/fields/extra:
    post:
      description: Creates an extra field
      operationId: createExtraField
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Field'
        description: Parameters for the extra field
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create extra field
      tags:
      - Fields
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists/<integer>/fields/extra' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"name":"<string>","format":"<string>","unique":"<boolean>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/fields/extra");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"name\":\"<string>\",\"format\":\"<string>\",\"unique\":\"<boolean>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"<string>\",\"format\":\"<string>\",\"unique\":\"<boolean>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/fields/extra")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"name":"<string>","format":"<string>","unique":"<boolean>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists/<integer>/fields/extra");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/fields/extra",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"name\":\"<string>\",\"format\":\"<string>\",\"unique\":\"<boolean>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"name\":\"<string>\",\"format\":\"<string>\",\"unique\":\"<boolean>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists/<integer>/fields/extra", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/fields/extra")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"name\":\"<string>\",\"format\":\"<string>\",\"unique\":\"<boolean>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/fields:
    get:
      description: Returns all fields
      operationId: getAllFields
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all fields
      tags:
      - Fields
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/lists/<integer>/fields?offset=<integer>&limit=10' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/fields?offset=<integer>&limit=10");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/fields?offset=<integer>&limit=10")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/lists/<integer>/fields?offset=<integer>&limit=10");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/fields?offset=<integer>&limit=10",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/lists/<integer>/fields?offset=<integer>&limit=10", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/fields?offset=<integer>&limit=10")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /lists/{list_id}/fields/extra/{field_id}/options:
    get:
      description: Returns all options of a given field
      operationId: getAllFieldOptions
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - description: ID of the Field
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldOptionsCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all field options
      tags:
      - Fields
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/lists/<integer>/fields/extra/<integer>/options", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Creates a field option
      operationId: createFieldOption
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - description: ID of the Field
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldOptionPost'
        description: Parameters for the field option
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldOption'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new field option
      tags:
      - Fields
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"en":"<string>","pt":"<string>","br":"<string>","es":"<string>","de":"<string>","hu":"<string>","fr":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"en\":\"<string>\",\"pt\":\"<string>\",\"br\":\"<string>\",\"es\":\"<string>\",\"de\":\"<string>\",\"hu\":\"<string>\",\"fr\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"en\":\"<string>\",\"pt\":\"<string>\",\"br\":\"<string>\",\"es\":\"<string>\",\"de\":\"<string>\",\"hu\":\"<string>\",\"fr\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"en":"<string>","pt":"<string>","br":"<string>","es":"<string>","de":"<string>","hu":"<string>","fr":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"en\":\"<string>\",\"pt\":\"<string>\",\"br\":\"<string>\",\"es\":\"<string>\",\"de\":\"<string>\",\"hu\":\"<string>\",\"fr\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"en\":\"<string>\",\"pt\":\"<string>\",\"br\":\"<string>\",\"es\":\"<string>\",\"de\":\"<string>\",\"hu\":\"<string>\",\"fr\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists/<integer>/fields/extra/<integer>/options", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"en\":\"<string>\",\"pt\":\"<string>\",\"br\":\"<string>\",\"es\":\"<string>\",\"de\":\"<string>\",\"hu\":\"<string>\",\"fr\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}/fields/extra/{field_id}/options/{option_id}:
    delete:
      description: Deletes an option of a list of values field
      operationId: deleteFieldOption
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - description: ID of the Field
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - description: ID of the field option
        explode: false
        in: path
        name: option_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Deletes an option
      tags:
      - Fields
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options/<integer>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/lists/<integer>/fields/extra/<integer>/options/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    patch:
      description: Updates a field option
      operationId: updateFieldOption
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - description: ID of the Field
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - description: ID of the field option
        explode: false
        in: path
        name: option_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldOptionPost'
        description: Parameters for the field option
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldOption'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update field option
      tags:
      - Fields
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PATCH 'api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"en":"<string>","pt":"<string>","br":"<string>","es":"<string>","de":"<string>","hu":"<string>","fr":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"en\":\"<string>\",\"pt\":\"<string>\",\"br\":\"<string>\",\"es\":\"<string>\",\"de\":\"<string>\",\"hu\":\"<string>\",\"fr\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"en\":\"<string>\",\"pt\":\"<string>\",\"br\":\"<string>\",\"es\":\"<string>\",\"de\":\"<string>\",\"hu\":\"<string>\",\"fr\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options/<integer>")
              .method("PATCH", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"en":"<string>","pt":"<string>","br":"<string>","es":"<string>","de":"<string>","hu":"<string>","fr":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PATCH", "api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS =>"{\"en\":\"<string>\",\"pt\":\"<string>\",\"br\":\"<string>\",\"es\":\"<string>\",\"de\":\"<string>\",\"hu\":\"<string>\",\"fr\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"en\":\"<string>\",\"pt\":\"<string>\",\"br\":\"<string>\",\"es\":\"<string>\",\"de\":\"<string>\",\"hu\":\"<string>\",\"fr\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PATCH", "/lists/<integer>/fields/extra/<integer>/options/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/fields/extra/<integer>/options/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Patch.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"en\":\"<string>\",\"pt\":\"<string>\",\"br\":\"<string>\",\"es\":\"<string>\",\"de\":\"<string>\",\"hu\":\"<string>\",\"fr\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists:
    get:
      description: Returns all lists
      operationId: getAllLists
      parameters:
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Type of order
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - allowEmptyValue: false
        description: Reference attribute to order lists
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          default: list_id
          enum:
          - list_id
          - internal_name
          - public_name
          - created
          - updated
          type: string
        style: form
      - description: Internal name of the list
        explode: true
        in: query
        name: internal_name
        required: false
        schema:
          type: string
        style: form
      - description: Public name of the list
        explode: true
        in: query
        name: public_name
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Created initial date
        explode: true
        in: query
        name: created_min
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Created finish
        explode: true
        in: query
        name: created_max
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Updated initial
        explode: true
        in: query
        name: updated_min
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Updated finish
        explode: true
        in: query
        name: updated_max
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all lists
      tags:
      - Lists
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/lists?offset=<integer>&limit=10&order=desc&order_by=list_id&internal_name=<string>&public_name=<string>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists?offset=<integer>&limit=10&order=desc&order_by=list_id&internal_name=<string>&public_name=<string>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists?offset=<integer>&limit=10&order=desc&order_by=list_id&internal_name=<string>&public_name=<string>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/lists?offset=<integer>&limit=10&order=desc&order_by=list_id&internal_name=<string>&public_name=<string>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists?offset=<integer>&limit=10&order=desc&order_by=list_id&internal_name=<string>&public_name=<string>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/lists?offset=<integer>&limit=10&order=desc&order_by=list_id&internal_name=<string>&public_name=<string>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists?offset=<integer>&limit=10&order=desc&order_by=list_id&internal_name=<string>&public_name=<string>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Create a new list
      operationId: createList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequestList'
        description: Parameters for the List
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostListsConflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new list
      tags:
      - Lists
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/lists' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"internal_name":"<string>","public_name":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"internal_name\":\"<string>\",\"public_name\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"internal_name\":\"<string>\",\"public_name\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"internal_name":"<string>","public_name":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/lists");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"internal_name\":\"<string>\",\"public_name\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"internal_name\":\"<string>\",\"public_name\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/lists", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"internal_name\":\"<string>\",\"public_name\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /lists/{list_id}:
    delete:
      description: Remove list information given its ID
      operationId: deleteList
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteListsConflict'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Remove list
      tags:
      - Lists
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/lists/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/lists/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/lists/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    patch:
      description: Update a list
      operationId: updateList
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequestList'
        description: Parameters for the List
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update a specific list
      tags:
      - Lists
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PATCH 'api.egoiapp.com/lists/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"internal_name":"<string>","public_name":"<string>","group_id":"<integer>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"internal_name\":\"<string>\",\"public_name\":\"<string>\",\"group_id\":\"<integer>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"internal_name\":\"<string>\",\"public_name\":\"<string>\",\"group_id\":\"<integer>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>")
              .method("PATCH", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"internal_name":"<string>","public_name":"<string>","group_id":"<integer>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PATCH", "api.egoiapp.com/lists/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS =>"{\"internal_name\":\"<string>\",\"public_name\":\"<string>\",\"group_id\":\"<integer>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"internal_name\":\"<string>\",\"public_name\":\"<string>\",\"group_id\":\"<integer>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PATCH", "/lists/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Patch.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"internal_name\":\"<string>\",\"public_name\":\"<string>\",\"group_id\":\"<integer>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /my-account/actions/enable-te:
    post:
      description: Enable Track&Engage
      operationId: enableTe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/enableTe_request'
        description: Parameters for the Tracking&Engage
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnableTeConflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Enable Track&Engage
      tags:
      - My Account
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/my-account/actions/enable-te' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"domain":"<string>","list_id":"<integer>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/my-account/actions/enable-te");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"domain\":\"<string>\",\"list_id\":\"<integer>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"domain\":\"<string>\",\"list_id\":\"<integer>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/my-account/actions/enable-te")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"domain":"<string>","list_id":"<integer>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/my-account/actions/enable-te");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/my-account/actions/enable-te",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"domain\":\"<string>\",\"list_id\":\"<integer>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"domain\":\"<string>\",\"list_id\":\"<integer>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/my-account/actions/enable-te", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/my-account/actions/enable-te")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"domain\":\"<string>\",\"list_id\":\"<integer>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /my-account/actions/enable-transactional:
    post:
      description: Enable Transactionale api usage
      operationId: enableTransactional
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnableTransactionalConflict'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Enable Transactional
      tags:
      - My Account
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/my-account/actions/enable-transactional' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/my-account/actions/enable-transactional");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/my-account/actions/enable-transactional")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/my-account/actions/enable-transactional");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/my-account/actions/enable-transactional",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("POST", "/my-account/actions/enable-transactional", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/my-account/actions/enable-transactional")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /my-account:
    get:
      description: My Account Info
      operationId: getMyAccount
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyAccount'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get My Account Info
      tags:
      - My Account
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/my-account' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/my-account");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/my-account")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/my-account");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/my-account",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/my-account", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/my-account")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /operations/actions/approve:
    post:
      description: Approves an operation
      operationId: actionApproveOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationActionRequest'
        description: Parameters for the request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationActionResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Approve operation
      tags:
      - Operations
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/operations/actions/approve' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"operations":["<integer>","<integer>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/operations/actions/approve");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"operations\":[\"<integer>\",\"<integer>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"operations\":[\"<integer>\",\"<integer>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/operations/actions/approve")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"operations":["<integer>","<integer>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/operations/actions/approve");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/operations/actions/approve",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"operations\":[\"<integer>\",\"<integer>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"operations\":[\"<integer>\",\"<integer>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/operations/actions/approve", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/operations/actions/approve")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"operations\":[\"<integer>\",\"<integer>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /operations/actions/cancel:
    post:
      description: Cancels an operation
      operationId: actionCancelOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationActionRequest'
        description: Parameters for the request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationActionResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Cancel operation
      tags:
      - Operations
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/operations/actions/cancel' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"operations":["<integer>","<integer>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/operations/actions/cancel");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"operations\":[\"<integer>\",\"<integer>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"operations\":[\"<integer>\",\"<integer>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/operations/actions/cancel")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"operations":["<integer>","<integer>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/operations/actions/cancel");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/operations/actions/cancel",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"operations\":[\"<integer>\",\"<integer>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"operations\":[\"<integer>\",\"<integer>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/operations/actions/cancel", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/operations/actions/cancel")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"operations\":[\"<integer>\",\"<integer>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /operations/actions/pause:
    post:
      description: Pauses an operation
      operationId: actionPauseOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationActionRequest'
        description: Parameters for the request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationActionResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Pause operation
      tags:
      - Operations
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/operations/actions/pause' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"operations":["<integer>","<integer>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/operations/actions/pause");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"operations\":[\"<integer>\",\"<integer>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"operations\":[\"<integer>\",\"<integer>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/operations/actions/pause")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"operations":["<integer>","<integer>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/operations/actions/pause");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/operations/actions/pause",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"operations\":[\"<integer>\",\"<integer>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"operations\":[\"<integer>\",\"<integer>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/operations/actions/pause", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/operations/actions/pause")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"operations\":[\"<integer>\",\"<integer>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /operations/actions/resume:
    post:
      description: Resumes an operation
      operationId: actionResumeOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationActionRequest'
        description: Parameters for the request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationActionResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Resume operation
      tags:
      - Operations
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/operations/actions/resume' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"operations":["<integer>","<integer>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/operations/actions/resume");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"operations\":[\"<integer>\",\"<integer>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"operations\":[\"<integer>\",\"<integer>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/operations/actions/resume")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"operations":["<integer>","<integer>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/operations/actions/resume");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/operations/actions/resume",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"operations\":[\"<integer>\",\"<integer>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"operations\":[\"<integer>\",\"<integer>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/operations/actions/resume", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/operations/actions/resume")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"operations\":[\"<integer>\",\"<integer>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /operations:
    get:
      description: Returns all operations in queue
      operationId: getAllOperations
      parameters:
      - description: Operation type
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - import_contacts
          - update_contacts
          - export_contacts
          - export_reports
          - advanced_report
          - email
          - sms
          - smart_sms
          - voice
          - push
          - webpush
          - ads
          - social
          - segment_generation
          - mass_operation
          - unify
          - import_ecommerce
          - attach_tag
          - detach_tag
          type: string
        style: form
      - description: Operation state
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - queued
          - processing
          - executing
          - paused
          type: string
        style: form
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Type of order
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - allowEmptyValue: false
        description: Reference attribute to order operations
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          enum:
          - operation_id
          - created
          - start_date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationsCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all queued operations
      tags:
      - Operations
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/operations?type=<string>&status=<string>&offset=<integer>&limit=10&order=desc&order_by=<string>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/operations?type=<string>&status=<string>&offset=<integer>&limit=10&order=desc&order_by=<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/operations?type=<string>&status=<string>&offset=<integer>&limit=10&order=desc&order_by=<string>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/operations?type=<string>&status=<string>&offset=<integer>&limit=10&order=desc&order_by=<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/operations?type=<string>&status=<string>&offset=<integer>&limit=10&order=desc&order_by=<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/operations?type=<string>&status=<string>&offset=<integer>&limit=10&order=desc&order_by=<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/operations?type=<string>&status=<string>&offset=<integer>&limit=10&order=desc&order_by=<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /ping:
    post:
      description: Checks if API is up and running
      operationId: ping
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      summary: Pings the API
      tags:
      - Ping
      x-code-samples:
      - lang: cURL
        source: curl --location --max-time 30 --request POST 'api.egoiapp.com/ping'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/ping");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/ping")
              .method("POST", body)
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/ping");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/ping",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {}
          conn.request("POST", "/ping", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/ping")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /push/apps:
    get:
      description: Get all Push applications from E-goi
      operationId: getPushApps
      parameters:
      - allowEmptyValue: false
        description: ID of the list to search for.
        explode: true
        in: query
        name: list_id
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AppStructure'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all Push applications from E-goi
      tags:
      - Push
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/push/apps?list_id=<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/push/apps?list_id=<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/push/apps?list_id=<integer>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/push/apps?list_id=<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/push/apps?list_id=<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/push/apps?list_id=<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/push/apps?list_id=<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /push/apps/{app_id}:
    get:
      description: Get a Push application from E-goi
      operationId: getPushApp
      parameters:
      - description: ID of the E-goi push app.
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppStructure'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get a Push application from E-goi
      tags:
      - Push
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/push/apps/<string>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/push/apps/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/push/apps/<string>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/push/apps/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/push/apps/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/push/apps/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/push/apps/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /push/apps/{app_id}/event:
    post:
      description: Registers a Firebase token
      operationId: registerPushEvent
      parameters:
      - description: ID of the E-goi push app.
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushEvent'
        description: Parameters for the event
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushResponse'
          description: Accepted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Registers an event from the push notification.
      tags:
      - Push
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/push/apps/<string>/event' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"os":"<string>","contact":"<string>","message_hash":"<string>","event":"<string>","device_id":"<integer>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/push/apps/<string>/event");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"os\":\"<string>\",\"contact\":\"<string>\",\"message_hash\":\"<string>\",\"event\":\"<string>\",\"device_id\":\"<integer>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"os\":\"<string>\",\"contact\":\"<string>\",\"message_hash\":\"<string>\",\"event\":\"<string>\",\"device_id\":\"<integer>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/push/apps/<string>/event")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"os":"<string>","contact":"<string>","message_hash":"<string>","event":"<string>","device_id":"<integer>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/push/apps/<string>/event");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/push/apps/<string>/event",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"os\":\"<string>\",\"contact\":\"<string>\",\"message_hash\":\"<string>\",\"event\":\"<string>\",\"device_id\":\"<integer>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"os\":\"<string>\",\"contact\":\"<string>\",\"message_hash\":\"<string>\",\"event\":\"<string>\",\"device_id\":\"<integer>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/push/apps/<string>/event", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/push/apps/<string>/event")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"os\":\"<string>\",\"contact\":\"<string>\",\"message_hash\":\"<string>\",\"event\":\"<string>\",\"device_id\":\"<integer>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /push/apps/{app_id}/token:
    post:
      description: Registers a Firebase token
      operationId: registerPushToken
      parameters:
      - description: ID of the E-goi push app.
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushToken'
        description: Parameters for the token
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushResponse'
          description: Accepted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Registers a Firebase token
      tags:
      - Push
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/push/apps/<string>/token' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"os":"<string>","token":"<string>","two_steps_data":{"field":"<string>","value":"<string>"}}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/push/apps/<string>/token");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"os\":\"<string>\",\"token\":\"<string>\",\"two_steps_data\":{\"field\":\"<string>\",\"value\":\"<string>\"}}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"os\":\"<string>\",\"token\":\"<string>\",\"two_steps_data\":{\"field\":\"<string>\",\"value\":\"<string>\"}}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/push/apps/<string>/token")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"os":"<string>","token":"<string>","two_steps_data":{"field":"<string>","value":"<string>"}});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/push/apps/<string>/token");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/push/apps/<string>/token",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"os\":\"<string>\",\"token\":\"<string>\",\"two_steps_data\":{\"field\":\"<string>\",\"value\":\"<string>\"}}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"os\":\"<string>\",\"token\":\"<string>\",\"two_steps_data\":{\"field\":\"<string>\",\"value\":\"<string>\"}}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/push/apps/<string>/token", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/push/apps/<string>/token")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"os\":\"<string>\",\"token\":\"<string>\",\"two_steps_data\":{\"field\":\"<string>\",\"value\":\"<string>\"}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /reports/advanced:
    get:
      description: Returns all advanced reports
      operationId: getAllAdvancedReports
      parameters:
      - description: Advanced report status
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - queued
          - running
          - finished
          - stopped
          - canceled
          - paused
          - error
          type: string
        style: form
      - allowEmptyValue: false
        description: Advanced report title
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Created initial date
        explode: true
        in: query
        name: created_min
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Created finish
        explode: true
        in: query
        name: created_max
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Type of order
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Reference attribute to order the advanced reports
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          default: advanced_report_id
          enum:
          - advanced_report_id
          - title
          - created
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedReportsCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all advanced reports
      tags:
      - Advanced Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/reports/advanced?status=<string>&title=<string>&created_min=<dateTime>&created_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=advanced_report_id' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/advanced?status=<string>&title=<string>&created_min=<dateTime>&created_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=advanced_report_id");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/advanced?status=<string>&title=<string>&created_min=<dateTime>&created_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=advanced_report_id")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/reports/advanced?status=<string>&title=<string>&created_min=<dateTime>&created_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=advanced_report_id");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/advanced?status=<string>&title=<string>&created_min=<dateTime>&created_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=advanced_report_id",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/reports/advanced?status=<string>&title=<string>&created_min=<dateTime>&created_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=advanced_report_id", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/advanced?status=<string>&title=<string>&created_min=<dateTime>&created_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=advanced_report_id")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /reports/advanced/email-bounces:
    post:
      description: Generates a new email bounces report
      operationId: generateEmailBouncesReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateEmailBouncesReport'
        description: Parameters for the email bounces report
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Generate email bounces report
      tags:
      - Advanced Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/reports/advanced/email-bounces' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"campaigns":[{"list_id":"<integer>","type":"<string>"},{"list_id":"<integer>","type":"<string>"}],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"bounce_date":"<boolean>","bounce_type":"<boolean>","bounce_detail":"<boolean>"},"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>"}},"options":{"include_unopens":"<boolean>","notify":["<integer>","<integer>"],"grouping":"by_campaign"},"callback_url":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/advanced/email-bounces");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"bounce_date\":\"<boolean>\",\"bounce_type\":\"<boolean>\",\"bounce_detail\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\"}},\"options\":{\"include_unopens\":\"<boolean>\",\"notify\":[\"<integer>\",\"<integer>\"],\"grouping\":\"by_campaign\"},\"callback_url\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"bounce_date\":\"<boolean>\",\"bounce_type\":\"<boolean>\",\"bounce_detail\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\"}},\"options\":{\"include_unopens\":\"<boolean>\",\"notify\":[\"<integer>\",\"<integer>\"],\"grouping\":\"by_campaign\"},\"callback_url\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/advanced/email-bounces")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"campaigns":[{"list_id":"<integer>","type":"<string>"},{"list_id":"<integer>","type":"<string>"}],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"bounce_date":"<boolean>","bounce_type":"<boolean>","bounce_detail":"<boolean>"},"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>"}},"options":{"include_unopens":"<boolean>","notify":["<integer>","<integer>"],"grouping":"by_campaign"},"callback_url":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/reports/advanced/email-bounces");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/advanced/email-bounces",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"bounce_date\":\"<boolean>\",\"bounce_type\":\"<boolean>\",\"bounce_detail\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\"}},\"options\":{\"include_unopens\":\"<boolean>\",\"notify\":[\"<integer>\",\"<integer>\"],\"grouping\":\"by_campaign\"},\"callback_url\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"bounce_date\":\"<boolean>\",\"bounce_type\":\"<boolean>\",\"bounce_detail\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\"}},\"options\":{\"include_unopens\":\"<boolean>\",\"notify\":[\"<integer>\",\"<integer>\"],\"grouping\":\"by_campaign\"},\"callback_url\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/reports/advanced/email-bounces", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/advanced/email-bounces")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"bounce_date\":\"<boolean>\",\"bounce_type\":\"<boolean>\",\"bounce_detail\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\"}},\"options\":{\"include_unopens\":\"<boolean>\",\"notify\":[\"<integer>\",\"<integer>\"],\"grouping\":\"by_campaign\"},\"callback_url\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /reports/advanced/email-clicks-by-contact:
    post:
      description: Generates a new email clicks by contact report
      operationId: generateEmailClicksByContactReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateEmailClicksByContactReport'
        description: Parameters for the email clicks by contact report
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Generate email clicks by contact report
      tags:
      - Advanced Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/reports/advanced/email-clicks-by-contact' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"campaigns":[{"list_id":"<integer>","type":"<string>"},{"list_id":"<integer>","type":"<string>"}],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"clicks":"<boolean>"},"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>","url":"<boolean>","country":"<boolean>","city":"<boolean>","region":"<boolean>","program":"<boolean>","os":"<boolean>"}},"options":{"notify":["<integer>","<integer>"]},"callback_url":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/advanced/email-clicks-by-contact");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"clicks\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"url\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"clicks\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"url\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/advanced/email-clicks-by-contact")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"campaigns":[{"list_id":"<integer>","type":"<string>"},{"list_id":"<integer>","type":"<string>"}],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"clicks":"<boolean>"},"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>","url":"<boolean>","country":"<boolean>","city":"<boolean>","region":"<boolean>","program":"<boolean>","os":"<boolean>"}},"options":{"notify":["<integer>","<integer>"]},"callback_url":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/reports/advanced/email-clicks-by-contact");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/advanced/email-clicks-by-contact",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"clicks\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"url\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"clicks\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"url\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/reports/advanced/email-clicks-by-contact", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/advanced/email-clicks-by-contact")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"clicks\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"url\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /reports/advanced/email-clicks-by-url:
    post:
      description: Generates a new email clicks by URL report
      operationId: generateEmailClicksByUrlReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateEmailClicksByUrlReport'
        description: Parameters for the email clicks by URL report
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Generate email clicks by URL report
      tags:
      - Advanced Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/reports/advanced/email-clicks-by-url' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"campaigns":[{"list_id":"<integer>","type":"<string>"},{"list_id":"<integer>","type":"<string>"}],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"clicks":"<boolean>","unique_clicks":"<boolean>","click_rate_per_url":"<boolean>"},"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>","url":"<boolean>","country":"<boolean>","city":"<boolean>","region":"<boolean>","program":"<boolean>","os":"<boolean>"}},"options":{"notify":["<integer>","<integer>"]},"callback_url":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/advanced/email-clicks-by-url");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"clicks\":\"<boolean>\",\"unique_clicks\":\"<boolean>\",\"click_rate_per_url\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"url\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"clicks\":\"<boolean>\",\"unique_clicks\":\"<boolean>\",\"click_rate_per_url\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"url\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/advanced/email-clicks-by-url")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"campaigns":[{"list_id":"<integer>","type":"<string>"},{"list_id":"<integer>","type":"<string>"}],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"clicks":"<boolean>","unique_clicks":"<boolean>","click_rate_per_url":"<boolean>"},"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>","url":"<boolean>","country":"<boolean>","city":"<boolean>","region":"<boolean>","program":"<boolean>","os":"<boolean>"}},"options":{"notify":["<integer>","<integer>"]},"callback_url":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/reports/advanced/email-clicks-by-url");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/advanced/email-clicks-by-url",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"clicks\":\"<boolean>\",\"unique_clicks\":\"<boolean>\",\"click_rate_per_url\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"url\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"clicks\":\"<boolean>\",\"unique_clicks\":\"<boolean>\",\"click_rate_per_url\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"url\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/reports/advanced/email-clicks-by-url", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/advanced/email-clicks-by-url")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"clicks\":\"<boolean>\",\"unique_clicks\":\"<boolean>\",\"click_rate_per_url\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"url\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /reports/advanced/email-events:
    post:
      description: Generates a new email events report
      operationId: generateEmailEventsReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateEmailEventsReport'
        description: Parameters for the email events report
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Generate email events report
      tags:
      - Advanced Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/reports/advanced/email-events' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"campaigns":[{"list_id":"<integer>","type":"<string>"},{"list_id":"<integer>","type":"<string>"}],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"opens":"<boolean>","clicks":"<boolean>","complaints":"<boolean>","unsubscribes":"<boolean>","bounces":"<boolean>","forwards":"<boolean>","forwards_conversion":"<boolean>","fb_likes":"<boolean>","fb_shares":"<boolean>","tw_shares":"<boolean>","social_shares":"<boolean>"},"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>","send_date":"<boolean>","group":"<boolean>","country":"<boolean>","city":"<boolean>","region":"<boolean>","program":"<boolean>","os":"<boolean>"}},"options":{"include_unopens":"<boolean>","notify":["<integer>","<integer>"]},"callback_url":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/advanced/email-events");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"opens\":\"<boolean>\",\"clicks\":\"<boolean>\",\"complaints\":\"<boolean>\",\"unsubscribes\":\"<boolean>\",\"bounces\":\"<boolean>\",\"forwards\":\"<boolean>\",\"forwards_conversion\":\"<boolean>\",\"fb_likes\":\"<boolean>\",\"fb_shares\":\"<boolean>\",\"tw_shares\":\"<boolean>\",\"social_shares\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"group\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"include_unopens\":\"<boolean>\",\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"opens\":\"<boolean>\",\"clicks\":\"<boolean>\",\"complaints\":\"<boolean>\",\"unsubscribes\":\"<boolean>\",\"bounces\":\"<boolean>\",\"forwards\":\"<boolean>\",\"forwards_conversion\":\"<boolean>\",\"fb_likes\":\"<boolean>\",\"fb_shares\":\"<boolean>\",\"tw_shares\":\"<boolean>\",\"social_shares\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"group\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"include_unopens\":\"<boolean>\",\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/advanced/email-events")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"campaigns":[{"list_id":"<integer>","type":"<string>"},{"list_id":"<integer>","type":"<string>"}],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"opens":"<boolean>","clicks":"<boolean>","complaints":"<boolean>","unsubscribes":"<boolean>","bounces":"<boolean>","forwards":"<boolean>","forwards_conversion":"<boolean>","fb_likes":"<boolean>","fb_shares":"<boolean>","tw_shares":"<boolean>","social_shares":"<boolean>"},"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>","send_date":"<boolean>","group":"<boolean>","country":"<boolean>","city":"<boolean>","region":"<boolean>","program":"<boolean>","os":"<boolean>"}},"options":{"include_unopens":"<boolean>","notify":["<integer>","<integer>"]},"callback_url":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/reports/advanced/email-events");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/advanced/email-events",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"opens\":\"<boolean>\",\"clicks\":\"<boolean>\",\"complaints\":\"<boolean>\",\"unsubscribes\":\"<boolean>\",\"bounces\":\"<boolean>\",\"forwards\":\"<boolean>\",\"forwards_conversion\":\"<boolean>\",\"fb_likes\":\"<boolean>\",\"fb_shares\":\"<boolean>\",\"tw_shares\":\"<boolean>\",\"social_shares\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"group\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"include_unopens\":\"<boolean>\",\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"opens\":\"<boolean>\",\"clicks\":\"<boolean>\",\"complaints\":\"<boolean>\",\"unsubscribes\":\"<boolean>\",\"bounces\":\"<boolean>\",\"forwards\":\"<boolean>\",\"forwards_conversion\":\"<boolean>\",\"fb_likes\":\"<boolean>\",\"fb_shares\":\"<boolean>\",\"tw_shares\":\"<boolean>\",\"social_shares\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"group\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"include_unopens\":\"<boolean>\",\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/reports/advanced/email-events", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/advanced/email-events")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"opens\":\"<boolean>\",\"clicks\":\"<boolean>\",\"complaints\":\"<boolean>\",\"unsubscribes\":\"<boolean>\",\"bounces\":\"<boolean>\",\"forwards\":\"<boolean>\",\"forwards_conversion\":\"<boolean>\",\"fb_likes\":\"<boolean>\",\"fb_shares\":\"<boolean>\",\"tw_shares\":\"<boolean>\",\"social_shares\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"group\":\"<boolean>\",\"country\":\"<boolean>\",\"city\":\"<boolean>\",\"region\":\"<boolean>\",\"program\":\"<boolean>\",\"os\":\"<boolean>\"}},\"options\":{\"include_unopens\":\"<boolean>\",\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /reports/advanced/email-unsubscriptions:
    post:
      description: Generates a new email unsubscriptions report
      operationId: generateEmailUnsubscriptionsReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateEmailUnsubscriptionsReport'
        description: Parameters for the email unsubscriptions report
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Generate email unsubscriptions report
      tags:
      - Advanced Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/reports/advanced/email-unsubscriptions' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"campaigns":[{"list_id":"<integer>","type":"<string>"},{"list_id":"<integer>","type":"<string>"}],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"unsubscription_method":"<boolean>","unsubscription_motive":"<boolean>","unsubscription_date":"<boolean>"},"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>","sender":"<boolean>"}},"options":{"notify":["<integer>","<integer>"]},"callback_url":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/advanced/email-unsubscriptions");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"unsubscription_method\":\"<boolean>\",\"unsubscription_motive\":\"<boolean>\",\"unsubscription_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"unsubscription_method\":\"<boolean>\",\"unsubscription_motive\":\"<boolean>\",\"unsubscription_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/advanced/email-unsubscriptions")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"campaigns":[{"list_id":"<integer>","type":"<string>"},{"list_id":"<integer>","type":"<string>"}],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"unsubscription_method":"<boolean>","unsubscription_motive":"<boolean>","unsubscription_date":"<boolean>"},"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>","sender":"<boolean>"}},"options":{"notify":["<integer>","<integer>"]},"callback_url":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/reports/advanced/email-unsubscriptions");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/advanced/email-unsubscriptions",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"unsubscription_method\":\"<boolean>\",\"unsubscription_motive\":\"<boolean>\",\"unsubscription_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"unsubscription_method\":\"<boolean>\",\"unsubscription_motive\":\"<boolean>\",\"unsubscription_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/reports/advanced/email-unsubscriptions", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/advanced/email-unsubscriptions")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"unsubscription_method\":\"<boolean>\",\"unsubscription_motive\":\"<boolean>\",\"unsubscription_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /reports/advanced/form-answers:
    post:
      description: Generates a new form answers report
      operationId: generateFormAnswersReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateFormAnswersReport'
        description: Parameters for the form answers report
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Generate form answers report
      tags:
      - Advanced Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/reports/advanced/form-answers' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"forms":[{"list_id":"<integer>","forms":["<integer>","<integer>"]},{"list_id":"<integer>","forms":["<integer>","<integer>"]}],"callback_url":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/advanced/form-answers");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"forms\":[{\"list_id\":\"<integer>\",\"forms\":[\"<integer>\",\"<integer>\"]},{\"list_id\":\"<integer>\",\"forms\":[\"<integer>\",\"<integer>\"]}],\"callback_url\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"forms\":[{\"list_id\":\"<integer>\",\"forms\":[\"<integer>\",\"<integer>\"]},{\"list_id\":\"<integer>\",\"forms\":[\"<integer>\",\"<integer>\"]}],\"callback_url\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/advanced/form-answers")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"forms":[{"list_id":"<integer>","forms":["<integer>","<integer>"]},{"list_id":"<integer>","forms":["<integer>","<integer>"]}],"callback_url":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/reports/advanced/form-answers");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/advanced/form-answers",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"forms\":[{\"list_id\":\"<integer>\",\"forms\":[\"<integer>\",\"<integer>\"]},{\"list_id\":\"<integer>\",\"forms\":[\"<integer>\",\"<integer>\"]}],\"callback_url\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"forms\":[{\"list_id\":\"<integer>\",\"forms\":[\"<integer>\",\"<integer>\"]},{\"list_id\":\"<integer>\",\"forms\":[\"<integer>\",\"<integer>\"]}],\"callback_url\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/reports/advanced/form-answers", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/advanced/form-answers")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"forms\":[{\"list_id\":\"<integer>\",\"forms\":[\"<integer>\",\"<integer>\"]},{\"list_id\":\"<integer>\",\"forms\":[\"<integer>\",\"<integer>\"]}],\"callback_url\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /reports/advanced/sends:
    post:
      description: Generates a new sends report
      operationId: generateSendsReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateSendsReport'
        description: Parameters for the sends report
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Generate sends report
      tags:
      - Advanced Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/reports/advanced/sends' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"lists":["<integer>","<integer>"],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>","group":"<boolean>","channel":"<boolean>","type":"<boolean>","sender":"<boolean>"}},"options":{"notify":["<integer>","<integer>"]},"callback_url":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/advanced/sends");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"group\":\"<boolean>\",\"channel\":\"<boolean>\",\"type\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"group\":\"<boolean>\",\"channel\":\"<boolean>\",\"type\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/advanced/sends")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"lists":["<integer>","<integer>"],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>","group":"<boolean>","channel":"<boolean>","type":"<boolean>","sender":"<boolean>"}},"options":{"notify":["<integer>","<integer>"]},"callback_url":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/reports/advanced/sends");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/advanced/sends",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"group\":\"<boolean>\",\"channel\":\"<boolean>\",\"type\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"group\":\"<boolean>\",\"channel\":\"<boolean>\",\"type\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/reports/advanced/sends", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/advanced/sends")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"group\":\"<boolean>\",\"channel\":\"<boolean>\",\"type\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /reports/advanced/sms-bounces:
    post:
      description: Generates a new SMS bounces report
      operationId: generateEmailSmsReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateSmsBouncesReport'
        description: Parameters for the SMS bounces report
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Generate SMS bounces report
      tags:
      - Advanced Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/reports/advanced/sms-bounces' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"campaigns":[{"list_id":"<integer>","type":"<string>"},{"list_id":"<integer>","type":"<string>"}],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"delivery_answer":"<boolean>","delivery_date":"<boolean>"},"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>","send_date":"<boolean>","sender":"<boolean>"}},"options":{"notify":["<integer>","<integer>"],"grouping":"by_campaign"},"callback_url":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/advanced/sms-bounces");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"delivery_answer\":\"<boolean>\",\"delivery_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"],\"grouping\":\"by_campaign\"},\"callback_url\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"delivery_answer\":\"<boolean>\",\"delivery_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"],\"grouping\":\"by_campaign\"},\"callback_url\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/advanced/sms-bounces")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"campaigns":[{"list_id":"<integer>","type":"<string>"},{"list_id":"<integer>","type":"<string>"}],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"delivery_answer":"<boolean>","delivery_date":"<boolean>"},"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>","send_date":"<boolean>","sender":"<boolean>"}},"options":{"notify":["<integer>","<integer>"],"grouping":"by_campaign"},"callback_url":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/reports/advanced/sms-bounces");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/advanced/sms-bounces",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"delivery_answer\":\"<boolean>\",\"delivery_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"],\"grouping\":\"by_campaign\"},\"callback_url\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"delivery_answer\":\"<boolean>\",\"delivery_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"],\"grouping\":\"by_campaign\"},\"callback_url\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/reports/advanced/sms-bounces", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/advanced/sms-bounces")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"delivery_answer\":\"<boolean>\",\"delivery_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"],\"grouping\":\"by_campaign\"},\"callback_url\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /reports/advanced/sms-events:
    post:
      description: Generates a new SMS events report
      operationId: generateSmsEventsReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateSmsEventsReport'
        description: Parameters for the SMS events report
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Generate SMS events report
      tags:
      - Advanced Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/reports/advanced/sms-events' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"campaigns":[{"list_id":"<integer>","type":"<string>"},{"list_id":"<integer>","type":"<string>"}],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"delivery_answer":"<boolean>","delivery_date":"<boolean>"},"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>","send_date":"<boolean>","group":"<boolean>","sender":"<boolean>"}},"options":{"notify":["<integer>","<integer>"]},"callback_url":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/advanced/sms-events");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"delivery_answer\":\"<boolean>\",\"delivery_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"group\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"delivery_answer\":\"<boolean>\",\"delivery_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"group\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/advanced/sms-events")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"campaigns":[{"list_id":"<integer>","type":"<string>"},{"list_id":"<integer>","type":"<string>"}],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"delivery_answer":"<boolean>","delivery_date":"<boolean>"},"campaign_fields":{"internal_name":"<boolean>","campaign_hash":"<boolean>","send_date":"<boolean>","group":"<boolean>","sender":"<boolean>"}},"options":{"notify":["<integer>","<integer>"]},"callback_url":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/reports/advanced/sms-events");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/advanced/sms-events",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"delivery_answer\":\"<boolean>\",\"delivery_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"group\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"delivery_answer\":\"<boolean>\",\"delivery_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"group\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/reports/advanced/sms-events", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/advanced/sms-events")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"campaigns\":[{\"list_id\":\"<integer>\",\"type\":\"<string>\"},{\"list_id\":\"<integer>\",\"type\":\"<string>\"}],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"delivery_answer\":\"<boolean>\",\"delivery_date\":\"<boolean>\"},\"campaign_fields\":{\"internal_name\":\"<boolean>\",\"campaign_hash\":\"<boolean>\",\"send_date\":\"<boolean>\",\"group\":\"<boolean>\",\"sender\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /reports/advanced/subscriptions:
    post:
      description: Generates a new subscriptions report
      operationId: generateSubscriptionsReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateSubscriptionsReport'
        description: Parameters for the subscriptions report
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Generate subscriptions report
      tags:
      - Advanced Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/reports/advanced/subscriptions' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"lists":["<integer>","<integer>"],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"subscription_method":"<boolean>","subscription_src":"<boolean>"}},"options":{"notify":["<integer>","<integer>"]},"callback_url":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/advanced/subscriptions");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"subscription_method\":\"<boolean>\",\"subscription_src\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"subscription_method\":\"<boolean>\",\"subscription_src\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/advanced/subscriptions")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"lists":["<integer>","<integer>"],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"subscription_method":"<boolean>","subscription_src":"<boolean>"}},"options":{"notify":["<integer>","<integer>"]},"callback_url":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/reports/advanced/subscriptions");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/advanced/subscriptions",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"subscription_method\":\"<boolean>\",\"subscription_src\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"subscription_method\":\"<boolean>\",\"subscription_src\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/reports/advanced/subscriptions", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/advanced/subscriptions")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"subscription_method\":\"<boolean>\",\"subscription_src\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /reports/advanced/unsubscriptions:
    post:
      description: Generates a new unsubscriptions report
      operationId: generateUnsubscriptionsReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateUnsubscriptionsReport'
        description: Parameters for the unsubscriptions report
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Generate unsubscriptions report
      tags:
      - Advanced Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/reports/advanced/unsubscriptions' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"lists":["<integer>","<integer>"],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"unsubscription_method":"<boolean>","unsubscription_src":"<boolean>","unsubscription_date":"<boolean>"}},"options":{"notify":["<integer>","<integer>"]},"callback_url":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/advanced/unsubscriptions");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"unsubscription_method\":\"<boolean>\",\"unsubscription_src\":\"<boolean>\",\"unsubscription_date\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"unsubscription_method\":\"<boolean>\",\"unsubscription_src\":\"<boolean>\",\"unsubscription_date\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/advanced/unsubscriptions")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"title":"<string>","range":{"start":"<dateTime>","end":"<dateTime>"},"lists":["<integer>","<integer>"],"columns":{"list_base_fields":["<string>","<string>"],"list_extra_fields":[{"list_id":"<integer>","fields":["<string>","<string>"]},{"list_id":"<integer>","fields":["<string>","<string>"]}],"list_stats_fields":{"unsubscription_method":"<boolean>","unsubscription_src":"<boolean>","unsubscription_date":"<boolean>"}},"options":{"notify":["<integer>","<integer>"]},"callback_url":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/reports/advanced/unsubscriptions");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/advanced/unsubscriptions",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"unsubscription_method\":\"<boolean>\",\"unsubscription_src\":\"<boolean>\",\"unsubscription_date\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"unsubscription_method\":\"<boolean>\",\"unsubscription_src\":\"<boolean>\",\"unsubscription_date\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/reports/advanced/unsubscriptions", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/advanced/unsubscriptions")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"title\":\"<string>\",\"range\":{\"start\":\"<dateTime>\",\"end\":\"<dateTime>\"},\"lists\":[\"<integer>\",\"<integer>\"],\"columns\":{\"list_base_fields\":[\"<string>\",\"<string>\"],\"list_extra_fields\":[{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]},{\"list_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}],\"list_stats_fields\":{\"unsubscription_method\":\"<boolean>\",\"unsubscription_src\":\"<boolean>\",\"unsubscription_date\":\"<boolean>\"}},\"options\":{\"notify\":[\"<integer>\",\"<integer>\"]},\"callback_url\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /reports/email/{campaign_hash}:
    get:
      description: Returns email report given the campaign hash
      operationId: getEmailReport
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      - allowEmptyValue: false
        description: True to show date stats
        explode: true
        in: query
        name: date
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - allowEmptyValue: false
        description: True to show weekday stats
        explode: true
        in: query
        name: weekday
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - allowEmptyValue: false
        description: True to show hour stats
        explode: true
        in: query
        name: hour
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - allowEmptyValue: false
        description: True to show location stats
        explode: true
        in: query
        name: location
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - allowEmptyValue: false
        description: True to show Domain stats
        explode: true
        in: query
        name: domain
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - allowEmptyValue: false
        description: True to show Url stats
        explode: true
        in: query
        name: url
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - allowEmptyValue: false
        description: True to show Reader stats
        explode: true
        in: query
        name: reader
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailReport'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: NotFound
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get email report
      tags:
      - Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/reports/email/<string>?date=true&weekday=true&hour=true&location=true&domain=true&url=true&reader=true' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/email/<string>?date=true&weekday=true&hour=true&location=true&domain=true&url=true&reader=true");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/email/<string>?date=true&weekday=true&hour=true&location=true&domain=true&url=true&reader=true")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/reports/email/<string>?date=true&weekday=true&hour=true&location=true&domain=true&url=true&reader=true");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/email/<string>?date=true&weekday=true&hour=true&location=true&domain=true&url=true&reader=true",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/reports/email/<string>?date=true&weekday=true&hour=true&location=true&domain=true&url=true&reader=true", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/email/<string>?date=true&weekday=true&hour=true&location=true&domain=true&url=true&reader=true")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /reports/sms/{campaign_hash}:
    get:
      description: Returns sms report given the campaign hash
      operationId: getSMSReport
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      - allowEmptyValue: false
        description: True to show network stats
        explode: true
        in: query
        name: networks
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneReport'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: NotFound
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get sms report
      tags:
      - Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/reports/sms/<string>?networks=true' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/sms/<string>?networks=true");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/sms/<string>?networks=true")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/reports/sms/<string>?networks=true");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/sms/<string>?networks=true",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/reports/sms/<string>?networks=true", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/sms/<string>?networks=true")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /reports/voice/{campaign_hash}:
    get:
      description: Returns voice report given the campaign hash
      operationId: getVoiceReport
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      - allowEmptyValue: false
        description: True to show network stats
        explode: true
        in: query
        name: networks
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneReport'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: NotFound
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get voice report
      tags:
      - Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/reports/voice/<string>?networks=true' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/voice/<string>?networks=true");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/voice/<string>?networks=true")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/reports/voice/<string>?networks=true");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/voice/<string>?networks=true",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/reports/voice/<string>?networks=true", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/voice/<string>?networks=true")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /reports/web-push/{campaign_hash}:
    get:
      description: Returns webpush report given the campaign hash
      operationId: getWebPushReport
      parameters:
      - description: ID of the Campaign
        explode: false
        in: path
        name: campaign_hash
        required: true
        schema:
          $ref: '#/components/schemas/hash'
        style: simple
      - allowEmptyValue: false
        description: True to show device stats
        explode: true
        in: query
        name: devices
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - allowEmptyValue: false
        description: True to show operating systems stats
        explode: true
        in: query
        name: operating_systems
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - allowEmptyValue: false
        description: True to show browser stats
        explode: true
        in: query
        name: browsers
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - allowEmptyValue: false
        description: True to show url stats
        explode: true
        in: query
        name: url
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebPushReport'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: NotFound
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get webpush report
      tags:
      - Reports
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/reports/web-push/<string>?devices=true&operating_systems=true&browsers=true&url=true' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/reports/web-push/<string>?devices=true&operating_systems=true&browsers=true&url=true");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/reports/web-push/<string>?devices=true&operating_systems=true&browsers=true&url=true")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/reports/web-push/<string>?devices=true&operating_systems=true&browsers=true&url=true");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/reports/web-push/<string>?devices=true&operating_systems=true&browsers=true&url=true",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/reports/web-push/<string>?devices=true&operating_systems=true&browsers=true&url=true", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/reports/web-push/<string>?devices=true&operating_systems=true&browsers=true&url=true")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /lists/{list_id}/segments:
    get:
      description: Returns all segments
      operationId: getAllSegments
      parameters:
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      - allowEmptyValue: false
        description: Type of segment
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - auto
          - saved
          - tag
          type: string
        style: form
      - allowEmptyValue: false
        description: Segment name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all segments
      tags:
      - Segments
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/lists/<integer>/segments?type=<string>&name=<string>&offset=<integer>&limit=10' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/segments?type=<string>&name=<string>&offset=<integer>&limit=10");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/segments?type=<string>&name=<string>&offset=<integer>&limit=10")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/lists/<integer>/segments?type=<string>&name=<string>&offset=<integer>&limit=10");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/segments?type=<string>&name=<string>&offset=<integer>&limit=10",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/lists/<integer>/segments?type=<string>&name=<string>&offset=<integer>&limit=10", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/segments?type=<string>&name=<string>&offset=<integer>&limit=10")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /lists/{list_id}/segments/{segment_id}:
    delete:
      description: Remove segment information given its ID
      operationId: deleteSegment
      parameters:
      - description: ID of the Segment
        explode: false
        in: path
        name: segment_id
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the List
        explode: false
        in: path
        name: list_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSegmentsConflict'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Remove segment
      tags:
      - Segments
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/lists/<integer>/segments/<string>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/lists/<integer>/segments/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/lists/<integer>/segments/<string>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/lists/<integer>/segments/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/lists/<integer>/segments/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/lists/<integer>/segments/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/lists/<integer>/segments/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /senders/cellphone:
    get:
      description: Returns all cellphone senders
      operationId: getAllCellphoneSenders
      parameters:
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Status filter
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - active
          - moderation
          - rejected
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CellphoneSenderCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all cellphone senders
      tags:
      - Senders
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/senders/cellphone?offset=<integer>&limit=10&status=<string>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/senders/cellphone?offset=<integer>&limit=10&status=<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/senders/cellphone?offset=<integer>&limit=10&status=<string>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/senders/cellphone?offset=<integer>&limit=10&status=<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/senders/cellphone?offset=<integer>&limit=10&status=<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/senders/cellphone?offset=<integer>&limit=10&status=<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/senders/cellphone?offset=<integer>&limit=10&status=<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Creates a cellphone sender
      operationId: createCellphoneSender
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CellphoneSenderPost'
        description: Parameters for the sender
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CellphoneSender'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create cellphone sender
      tags:
      - Senders
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/senders/cellphone' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"type":"<string>","cellphone":"<string>","file":"<byte>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/senders/cellphone");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"type\":\"<string>\",\"cellphone\":\"<string>\",\"file\":\"<byte>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"type\":\"<string>\",\"cellphone\":\"<string>\",\"file\":\"<byte>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/senders/cellphone")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"type":"<string>","cellphone":"<string>","file":"<byte>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/senders/cellphone");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/senders/cellphone",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"type\":\"<string>\",\"cellphone\":\"<string>\",\"file\":\"<byte>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"type\":\"<string>\",\"cellphone\":\"<string>\",\"file\":\"<byte>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/senders/cellphone", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/senders/cellphone")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"type\":\"<string>\",\"cellphone\":\"<string>\",\"file\":\"<byte>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /senders/cellphone/{sender_id}:
    delete:
      description: Remove sender information given its ID
      operationId: deleteCellphoneSender
      parameters:
      - description: ID of the Sender
        explode: false
        in: path
        name: sender_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Remove cellphone sender
      tags:
      - Senders
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/senders/cellphone/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/senders/cellphone/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/senders/cellphone/<integer>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/senders/cellphone/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/senders/cellphone/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/senders/cellphone/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/senders/cellphone/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /senders/email:
    get:
      description: Returns all email senders
      operationId: getAllEmailSenders
      parameters:
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Status filter
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - active
          - moderation
          - rejected
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailSenderCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all email senders
      tags:
      - Senders
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/senders/email?offset=<integer>&limit=10&status=<string>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/senders/email?offset=<integer>&limit=10&status=<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/senders/email?offset=<integer>&limit=10&status=<string>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/senders/email?offset=<integer>&limit=10&status=<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/senders/email?offset=<integer>&limit=10&status=<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/senders/email?offset=<integer>&limit=10&status=<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/senders/email?offset=<integer>&limit=10&status=<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Creates an email sender
      operationId: createEmailSender
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailSenderPost'
        description: Parameters for the sender
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailSender'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create email sender
      tags:
      - Senders
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/senders/email' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"name":"<string>","email":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/senders/email");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"name\":\"<string>\",\"email\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"<string>\",\"email\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/senders/email")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"name":"<string>","email":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/senders/email");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/senders/email",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"name\":\"<string>\",\"email\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"name\":\"<string>\",\"email\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/senders/email", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/senders/email")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"name\":\"<string>\",\"email\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /senders/email/{sender_id}:
    delete:
      description: Remove sender information given its ID
      operationId: deleteEmailSender
      parameters:
      - description: ID of the Sender
        explode: false
        in: path
        name: sender_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Remove email sender
      tags:
      - Senders
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/senders/email/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/senders/email/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/senders/email/<integer>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/senders/email/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/senders/email/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/senders/email/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/senders/email/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    put:
      description: Updates an email sender
      operationId: putEmailSender
      parameters:
      - description: ID of the Sender
        explode: false
        in: path
        name: sender_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailSenderPutRequest'
        description: Parameters for the contact
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailSender'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update email sender
      tags:
      - Senders
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PUT 'api.egoiapp.com/senders/email/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"name":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/senders/email/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"name\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/senders/email/<integer>")
              .method("PUT", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"name":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PUT", "api.egoiapp.com/senders/email/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/senders/email/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS =>"{\"name\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"name\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PUT", "/senders/email/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/senders/email/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Put.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"name\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /senders/phone:
    get:
      description: Returns all phone senders
      operationId: getAllPhoneSenders
      parameters:
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Status filter
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - active
          - moderation
          - rejected
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneSenderCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all phone senders
      tags:
      - Senders
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/senders/phone?offset=<integer>&limit=10&status=<string>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/senders/phone?offset=<integer>&limit=10&status=<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/senders/phone?offset=<integer>&limit=10&status=<string>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/senders/phone?offset=<integer>&limit=10&status=<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/senders/phone?offset=<integer>&limit=10&status=<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/senders/phone?offset=<integer>&limit=10&status=<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/senders/phone?offset=<integer>&limit=10&status=<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Creates a phone sender
      operationId: createPhoneSender
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneSenderPost'
        description: Parameters for the sender
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneSender'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create phone sender
      tags:
      - Senders
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/senders/phone' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"phone":"<string>","file":"<byte>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/senders/phone");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"phone\":\"<string>\",\"file\":\"<byte>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"phone\":\"<string>\",\"file\":\"<byte>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/senders/phone")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"phone":"<string>","file":"<byte>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/senders/phone");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/senders/phone",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"phone\":\"<string>\",\"file\":\"<byte>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"phone\":\"<string>\",\"file\":\"<byte>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/senders/phone", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/senders/phone")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"phone\":\"<string>\",\"file\":\"<byte>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /senders/phone/{sender_id}:
    delete:
      description: Remove sender information given its ID
      operationId: deletePhoneSender
      parameters:
      - description: ID of the Sender
        explode: false
        in: path
        name: sender_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Remove phone sender
      tags:
      - Senders
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/senders/phone/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/senders/phone/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/senders/phone/<integer>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/senders/phone/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/senders/phone/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/senders/phone/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/senders/phone/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /suppression-list:
    get:
      description: Returns the suppression list
      operationId: getAllSuppressionList
      parameters:
      - description: Suppression type
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - email
          - email_domain
          - email_user
          - cellphone
          - phone
          type: string
        style: form
      - description: Suppression method
        explode: true
        in: query
        name: method
        required: false
        schema:
          enum:
          - unsubscribe
          - bounce
          - manual
          - other
          - forgotten
          type: string
        style: form
      - allowEmptyValue: false
        description: Reference attribute to value suppression list
        explode: true
        in: query
        name: value
        required: false
        schema:
          type: string
        style: form
      - description: Reference attribute to campaign id
        explode: true
        in: query
        name: campaign_hash
        required: false
        schema:
          $ref: '#/components/schemas/hash'
        style: form
      - allowEmptyValue: false
        description: Created initial date
        explode: true
        in: query
        name: created_min
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Created finish
        explode: true
        in: query
        name: created_max
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Type of order
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - allowEmptyValue: false
        description: Reference attribute to order the suppression list
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          default: id
          enum:
          - id
          - value
          - created
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuppressionListItems'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get the suppression list
      tags:
      - Suppression List
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/suppression-list?type=<string>&method=<string>&value=<string>&campaign_hash=<string>&created_min=<dateTime>&created_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=id' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/suppression-list?type=<string>&method=<string>&value=<string>&campaign_hash=<string>&created_min=<dateTime>&created_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=id");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/suppression-list?type=<string>&method=<string>&value=<string>&campaign_hash=<string>&created_min=<dateTime>&created_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=id")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/suppression-list?type=<string>&method=<string>&value=<string>&campaign_hash=<string>&created_min=<dateTime>&created_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=id");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/suppression-list?type=<string>&method=<string>&value=<string>&campaign_hash=<string>&created_min=<dateTime>&created_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=id",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/suppression-list?type=<string>&method=<string>&value=<string>&campaign_hash=<string>&created_min=<dateTime>&created_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=id", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/suppression-list?type=<string>&method=<string>&value=<string>&campaign_hash=<string>&created_min=<dateTime>&created_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=id")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Adds a collection of values to the suppression list
      operationId: createSuppressionList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSuppressionListRequest'
        description: Parameters for the request
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Add to suppression list
      tags:
      - Suppression List
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/suppression-list' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"type":"<string>","value":["<string>","<string>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/suppression-list");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"type\":\"<string>\",\"value\":[\"<string>\",\"<string>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"type\":\"<string>\",\"value\":[\"<string>\",\"<string>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/suppression-list")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"type":"<string>","value":["<string>","<string>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/suppression-list");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/suppression-list",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"type\":\"<string>\",\"value\":[\"<string>\",\"<string>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"type\":\"<string>\",\"value\":[\"<string>\",\"<string>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/suppression-list", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/suppression-list")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"type\":\"<string>\",\"value\":[\"<string>\",\"<string>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /suppression-list/{suppression_id}:
    delete:
      description: Deletes a suppression list value given its ID if it's creation
        method was ´manual´
      operationId: deleteSuppressionList
      parameters:
      - description: ID of Suppression List
        explode: false
        in: path
        name: suppression_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSuppressionListConflictsErrors'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Delete from suppression list
      tags:
      - Suppression List
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/suppression-list/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/suppression-list/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/suppression-list/<integer>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/suppression-list/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/suppression-list/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/suppression-list/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/suppression-list/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /tags:
    get:
      description: Returns all tags
      operationId: getAllTags
      parameters:
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Type of order
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - allowEmptyValue: false
        description: Reference attribute to order tags
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          default: tag_id
          enum:
          - tag_id
          - name
          - color
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all tags
      tags:
      - Tags
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/tags?offset=<integer>&limit=10&order=desc&order_by=tag_id' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/tags?offset=<integer>&limit=10&order=desc&order_by=tag_id");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/tags?offset=<integer>&limit=10&order=desc&order_by=tag_id")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/tags?offset=<integer>&limit=10&order=desc&order_by=tag_id");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/tags?offset=<integer>&limit=10&order=desc&order_by=tag_id",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/tags?offset=<integer>&limit=10&order=desc&order_by=tag_id", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/tags?offset=<integer>&limit=10&order=desc&order_by=tag_id")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Create a new tag
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
        description: Parameters for the Tag
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new tag
      tags:
      - Tags
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/tags' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"name":"<string>","color":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/tags");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"name\":\"<string>\",\"color\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"<string>\",\"color\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/tags")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"name":"<string>","color":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/tags");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/tags",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"name\":\"<string>\",\"color\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"name\":\"<string>\",\"color\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/tags", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/tags")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"name\":\"<string>\",\"color\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /tags/{tag_id}:
    delete:
      description: Remove tag information given its ID
      operationId: deleteTag
      parameters:
      - description: ID of the Tag
        explode: false
        in: path
        name: tag_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Remove tag
      tags:
      - Tags
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/tags/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/tags/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/tags/<integer>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/tags/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/tags/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/tags/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/tags/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    put:
      description: Update a tag
      operationId: updateTag
      parameters:
      - description: ID of the Tag
        explode: false
        in: path
        name: tag_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
        description: Parameters for the tag
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Update a specific tag
      tags:
      - Tags
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PUT 'api.egoiapp.com/tags/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"name":"<string>","color":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/tags/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"name\":\"<string>\",\"color\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"<string>\",\"color\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/tags/<integer>")
              .method("PUT", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"name":"<string>","color":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PUT", "api.egoiapp.com/tags/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/tags/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS =>"{\"name\":\"<string>\",\"color\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"name\":\"<string>\",\"color\":\"<string>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("PUT", "/tags/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/tags/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Put.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"name\":\"<string>\",\"color\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /trackengage/domains:
    get:
      description: Returns all domains
      operationId: getAllDomains
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all domains
      tags:
      - TrackEngage
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/trackengage/domains' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/trackengage/domains");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/trackengage/domains")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/trackengage/domains");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/trackengage/domains",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/trackengage/domains", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/trackengage/domains")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /trackengage/goals:
    get:
      description: Returns all goals
      operationId: getAllGoals
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all goals
      tags:
      - TrackEngage
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/trackengage/goals' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/trackengage/goals");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/trackengage/goals")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/trackengage/goals");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/trackengage/goals",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/trackengage/goals", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/trackengage/goals")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /users:
    get:
      description: Returns all users
      operationId: getAllUsers
      parameters:
      - allowEmptyValue: false
        description: Reference attribute to username user
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      - allowEmptyValue: false
        description: Status filter
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - active
          - inactive
          type: string
        style: form
      - allowEmptyValue: false
        description: Created initial date
        explode: true
        in: query
        name: created_min
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Created finish
        explode: true
        in: query
        name: created_max
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Updated initial
        explode: true
        in: query
        name: updated_min
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Updated finish
        explode: true
        in: query
        name: updated_max
        required: false
        schema:
          $ref: '#/components/schemas/date_time'
        style: form
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Type of order
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - allowEmptyValue: false
        description: Reference attribute to order users
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          default: user_id
          enum:
          - user_id
          - username
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all users
      tags:
      - Users
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/users?username=<string>&status=<string>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=user_id' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/users?username=<string>&status=<string>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=user_id");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/users?username=<string>&status=<string>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=user_id")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/users?username=<string>&status=<string>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=user_id");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/users?username=<string>&status=<string>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=user_id",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/users?username=<string>&status=<string>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=user_id", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/users?username=<string>&status=<string>&created_min=<dateTime>&created_max=<dateTime>&updated_min=<dateTime>&updated_max=<dateTime>&offset=<integer>&limit=10&order=desc&order_by=user_id")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /users/{user_id}:
    delete:
      description: Remove user information given its ID
      operationId: deleteUser
      parameters:
      - description: ID of the User
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Remove user
      tags:
      - Users
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/users/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/users/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/users/<integer>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/users/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/users/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/users/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/users/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /utilities/countries:
    get:
      description: Returns all countries
      operationId: getAllCountries
      parameters:
      - allowEmptyValue: false
        description: Phone number without country code to get all countries which
          can use that phone number
        explode: true
        in: query
        name: phone
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryCollection'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all countries
      tags:
      - Utilities
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/utilities/countries?phone=<string>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/utilities/countries?phone=<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/utilities/countries?phone=<string>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/utilities/countries?phone=<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/utilities/countries?phone=<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/utilities/countries?phone=<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/utilities/countries?phone=<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /webpush/sites:
    get:
      description: Returns all wepush's sites
      operationId: getAllWebPushSites
      parameters:
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: false
        description: Type of order
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - allowEmptyValue: false
        description: Reference attribute to order sites
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          default: list_id
          enum:
          - list_id
          - created
          - updated
          type: string
        style: form
      - allowEmptyValue: false
        description: Select sites referenced to a list
        explode: true
        in: query
        name: list_id
        required: false
        schema:
          $ref: '#/components/schemas/id'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagCollection_1'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all webpush sites
      tags:
      - Webpush
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/webpush/sites?offset=<integer>&limit=10&order=desc&order_by=list_id&list_id=<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/webpush/sites?offset=<integer>&limit=10&order=desc&order_by=list_id&list_id=<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/webpush/sites?offset=<integer>&limit=10&order=desc&order_by=list_id&list_id=<integer>")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/webpush/sites?offset=<integer>&limit=10&order=desc&order_by=list_id&list_id=<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/webpush/sites?offset=<integer>&limit=10&order=desc&order_by=list_id&list_id=<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/webpush/sites?offset=<integer>&limit=10&order=desc&order_by=list_id&list_id=<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/webpush/sites?offset=<integer>&limit=10&order=desc&order_by=list_id&list_id=<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Create a new webpush site
      operationId: createWebpushSite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebPushSite'
        description: Parameters for the webpush site
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebPushSite'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWebpushSiteConflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
      security:
      - Apikey: []
      summary: Creates a webpush site
      tags:
      - Webpush
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/webpush/sites' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"site":"<string>","list_id":"<integer>","name":"<string>","site_id":"<integer>"}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/webpush/sites");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"site\":\"<string>\",\"list_id\":\"<integer>\",\"name\":\"<string>\",\"site_id\":\"<integer>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"site\":\"<string>\",\"list_id\":\"<integer>\",\"name\":\"<string>\",\"site_id\":\"<integer>\"}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/webpush/sites")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"site":"<string>","list_id":"<integer>","name":"<string>","site_id":"<integer>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/webpush/sites");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/webpush/sites",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"site\":\"<string>\",\"list_id\":\"<integer>\",\"name\":\"<string>\",\"site_id\":\"<integer>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"site\":\"<string>\",\"list_id\":\"<integer>\",\"name\":\"<string>\",\"site_id\":\"<integer>\"}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/webpush/sites", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/webpush/sites")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"site\":\"<string>\",\"list_id\":\"<integer>\",\"name\":\"<string>\",\"site_id\":\"<integer>\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /webhooks:
    get:
      description: Returns all webhooks
      operationId: getAllWebhooks
      parameters:
      - allowEmptyValue: false
        description: Element offset (starting at zero for the first element)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - allowEmptyValue: false
        description: Number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollection_1'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Get all webhooks
      tags:
      - Web Hooks
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'api.egoiapp.com/webhooks?offset=<integer>&limit=10' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/webhooks?offset=<integer>&limit=10");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("api.egoiapp.com/webhooks?offset=<integer>&limit=10")
              .method("GET", null)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "api.egoiapp.com/webhooks?offset=<integer>&limit=10");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/webhooks?offset=<integer>&limit=10",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("GET", "/webhooks?offset=<integer>&limit=10", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/webhooks?offset=<integer>&limit=10")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Create a new webhook
      operationId: createWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
        description: Parameters for the webhook
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCampaignsConflict'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Create new webhook
      tags:
      - Web Hooks
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'api.egoiapp.com/webhooks' \
          --header 'Apikey: <YOUR_APIKEY>' \
          --header 'Content-Type: application/json' \
          --data-raw '{"list_id":"<integer>","url":"<string>","actions":["<string>","<string>"],"webhook_id":"<integer>","fields":["<string>","<string>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/webhooks");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"list_id\":\"<integer>\",\"url\":\"<string>\",\"actions\":[\"<string>\",\"<string>\"],\"webhook_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"list_id\":\"<integer>\",\"url\":\"<string>\",\"actions\":[\"<string>\",\"<string>\"],\"webhook_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/webhooks")
              .method("POST", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"list_id":"<integer>","url":"<string>","actions":["<string>","<string>"],"webhook_id":"<integer>","fields":["<string>","<string>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "api.egoiapp.com/webhooks");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/webhooks",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"list_id\":\"<integer>\",\"url\":\"<string>\",\"actions\":[\"<string>\",\"<string>\"],\"webhook_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = "{\"list_id\":\"<integer>\",\"url\":\"<string>\",\"actions\":[\"<string>\",\"<string>\"],\"webhook_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}"
          headers = {
              'Apikey': '<YOUR_APIKEY>',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/webhooks", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/webhooks")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"
          request["Content-Type"] = "application/json"
          request.body = "{\"list_id\":\"<integer>\",\"url\":\"<string>\",\"actions\":[\"<string>\",\"<string>\"],\"webhook_id\":\"<integer>\",\"fields\":[\"<string>\",\"<string>\"]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /webhooks/{webhook_id}:
    delete:
      description: Remove webhook information given its ID
      operationId: deleteWebhook
      parameters:
      - description: ID of the Webhook
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          $ref: '#/components/schemas/queryId'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeout'
          description: Request Timeout
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
          description: Service Unavailable
      security:
      - Apikey: []
      summary: Remove webhook
      tags:
      - Web Hooks
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'api.egoiapp.com/webhooks/<integer>' \
          --header 'Apikey: <YOUR_APIKEY>'
      - lang: C#
        source: |-
          var client = new RestClient("api.egoiapp.com/webhooks/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Apikey", "<YOUR_APIKEY>");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("api.egoiapp.com/webhooks/<integer>")
              .method("DELETE", body)
              .addHeader("Apikey", "<YOUR_APIKEY>")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "api.egoiapp.com/webhooks/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Apikey", "<YOUR_APIKEY>");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "api.egoiapp.com/webhooks/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "Apikey: <YOUR_APIKEY>"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("api.egoiapp.com", timeout = 30)
          payload = ''
          headers = {
              'Apikey': '<YOUR_APIKEY>'
          }
          conn.request("DELETE", "/webhooks/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("api.egoiapp.com/webhooks/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["Apikey"] = "<YOUR_APIKEY>"

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
components:
  parameters:
    automation_id:
      description: ID of the Automation
      explode: false
      in: path
      name: automation_id
      required: true
      schema:
        $ref: '#/components/schemas/queryId'
      style: simple
    campaign_hash:
      description: ID of the Campaign
      explode: false
      in: path
      name: campaign_hash
      required: true
      schema:
        $ref: '#/components/schemas/hash'
      style: simple
    group_id:
      description: ID of the Campaign Group
      explode: false
      in: path
      name: group_id
      required: true
      schema:
        $ref: '#/components/schemas/id'
      style: simple
    contact_id:
      description: ID of the Contact
      explode: false
      in: path
      name: contact_id
      required: true
      schema:
        $ref: '#/components/schemas/contact_query_id'
      style: simple
    show_removed:
      allowEmptyValue: false
      description: Show removed contacts
      explode: true
      in: query
      name: show_removed
      required: false
      schema:
        $ref: '#/components/schemas/show_removed'
      style: form
    cart_id:
      description: ID of the Cart
      explode: false
      in: path
      name: cart_id
      required: true
      schema:
        type: string
      style: simple
    catalog_id:
      description: ID of the Catalog
      explode: false
      in: path
      name: catalog_id
      required: true
      schema:
        $ref: '#/components/schemas/queryId'
      style: simple
    order_id:
      description: ID of the Order
      explode: false
      in: path
      name: order_id
      required: true
      schema:
        type: string
      style: simple
    domain:
      description: Domain
      explode: false
      in: path
      name: domain
      required: true
      schema:
        type: string
      style: simple
    product_identifier:
      description: ID of the Product
      explode: false
      in: path
      name: product_identifier
      required: true
      schema:
        pattern: "[a-zA-Z0-9\\_\\-.]"
        type: string
      style: simple
    field_id:
      description: ID of the Field
      explode: false
      in: path
      name: field_id
      required: true
      schema:
        $ref: '#/components/schemas/queryId'
      style: simple
    option_id:
      description: ID of the field option
      explode: false
      in: path
      name: option_id
      required: true
      schema:
        $ref: '#/components/schemas/queryId'
      style: simple
    form_id:
      description: ID of the Form
      explode: false
      in: path
      name: form_id
      required: true
      schema:
        $ref: '#/components/schemas/id'
      style: simple
    list_id:
      description: ID of the List
      explode: false
      in: path
      name: list_id
      required: true
      schema:
        $ref: '#/components/schemas/queryId'
      style: simple
    operation_id:
      allowEmptyValue: false
      description: Operation id
      explode: true
      in: query
      name: operation_id
      required: false
      schema:
        $ref: '#/components/schemas/id'
      style: form
    advanced_report_id:
      description: ID of the advanced report
      explode: false
      in: path
      name: advanced_report_id
      required: true
      schema:
        $ref: '#/components/schemas/queryId'
      style: simple
    segment_id:
      description: ID of the Segment
      explode: false
      in: path
      name: segment_id
      required: true
      schema:
        type: string
      style: simple
    sender_id:
      description: ID of the Sender
      explode: false
      in: path
      name: sender_id
      required: true
      schema:
        $ref: '#/components/schemas/queryId'
      style: simple
    status:
      allowEmptyValue: false
      description: Status filter
      explode: true
      in: query
      name: status
      required: false
      schema:
        enum:
        - active
        - moderation
        - rejected
        type: string
      style: form
    suppression_id:
      description: ID of Suppression List
      explode: false
      in: path
      name: suppression_id
      required: true
      schema:
        $ref: '#/components/schemas/queryId'
      style: simple
    tag_id:
      description: ID of the Tag
      explode: false
      in: path
      name: tag_id
      required: true
      schema:
        $ref: '#/components/schemas/id'
      style: simple
    user_id:
      description: ID of the User
      explode: false
      in: path
      name: user_id
      required: true
      schema:
        $ref: '#/components/schemas/queryId'
      style: simple
    webhook_id:
      description: ID of the Webhook
      explode: false
      in: path
      name: webhook_id
      required: true
      schema:
        $ref: '#/components/schemas/queryId'
      style: simple
    created_min:
      allowEmptyValue: false
      description: Created initial date
      explode: true
      in: query
      name: created_min
      required: false
      schema:
        $ref: '#/components/schemas/date_time'
      style: form
    created_max:
      allowEmptyValue: false
      description: Created finish
      explode: true
      in: query
      name: created_max
      required: false
      schema:
        $ref: '#/components/schemas/date_time'
      style: form
    updated_min:
      allowEmptyValue: false
      description: Updated initial
      explode: true
      in: query
      name: updated_min
      required: false
      schema:
        $ref: '#/components/schemas/date_time'
      style: form
    updated_max:
      allowEmptyValue: false
      description: Updated finish
      explode: true
      in: query
      name: updated_max
      required: false
      schema:
        $ref: '#/components/schemas/date_time'
      style: form
    start_date_min:
      allowEmptyValue: false
      description: Start date initial
      explode: true
      in: query
      name: start_date_min
      required: false
      schema:
        $ref: '#/components/schemas/date_time'
      style: form
    start_date_max:
      allowEmptyValue: false
      description: Start date finish
      explode: true
      in: query
      name: start_date_max
      required: false
      schema:
        $ref: '#/components/schemas/date_time'
      style: form
    end_date_min:
      allowEmptyValue: false
      description: End Date initial
      explode: true
      in: query
      name: end_date_min
      required: false
      schema:
        $ref: '#/components/schemas/date_time'
      style: form
    end_date_max:
      allowEmptyValue: false
      description: End Date finish
      explode: true
      in: query
      name: end_date_max
      required: false
      schema:
        $ref: '#/components/schemas/date_time'
      style: form
    schedule_date_min:
      allowEmptyValue: false
      description: Schedule Date initial
      explode: true
      in: query
      name: schedule_date_min
      required: false
      schema:
        $ref: '#/components/schemas/date_time'
      style: form
    schedule_date_max:
      allowEmptyValue: false
      description: Schedule Date finish
      explode: true
      in: query
      name: schedule_date_max
      required: false
      schema:
        $ref: '#/components/schemas/date_time'
      style: form
    limit:
      allowEmptyValue: false
      description: Number of items to return
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 10
        maximum: 100
        minimum: 1
        type: integer
      style: form
    offset:
      allowEmptyValue: false
      description: Element offset (starting at zero for the first element)
      explode: true
      in: query
      name: offset
      required: false
      schema:
        minimum: 0
        type: integer
      style: form
    order:
      allowEmptyValue: false
      description: Type of order
      explode: true
      in: query
      name: order
      required: false
      schema:
        default: desc
        enum:
        - asc
        - desc
        type: string
      style: form
  schemas:
    Automation:
      allOf:
      - $ref: '#/components/schemas/Automation_allOf'
      description: Automation schema
      title: Automation
      type: object
    AutomationPost:
      allOf:
      - $ref: '#/components/schemas/AutomationPost_allOf'
      description: Automation schema
      title: AutomationPost
      type: object
    now:
      description: Send the campaign now
      properties:
        now:
          description: Send the campaign now
          enum:
          - now
          type: string
      title: now
      type: object
    HashcodeCampaign:
      description: Hashcode campaign schema
      example:
        campaign_hash: campaign_hash
      properties:
        campaign_hash:
          pattern: "[a-zA-Z0-9_-]*"
          readOnly: true
          title: Hash
          type: string
      title: Hashcode Campaign
      type: object
    Campaign:
      description: Campaign schema
      example:
        end_date: ""
        thumbnail: //bo29.e-goi.com/recursos/resource_folder/listas/name_image.jpg
        list_id: 1
        created: ""
        channel: email
        title: subject of campaign
        schedule_date:
          date: ""
          enabled: true
        created_by: 1
        internal_name: your internal name
        campaign_hash: campaign_hash
        group_id: 1
        updated: ""
        status: sent
        start_date: ""
      properties:
        campaign_hash:
          pattern: "[a-zA-Z0-9_-]*"
          readOnly: true
          title: Hash
          type: string
        status:
          description: Status of the campaign
          enum:
          - draft
          - canceled
          - queued
          - paused
          - sending
          - sent
          example: sent
          type: string
        thumbnail:
          description: Thumbnail of the campaign
          example: //bo29.e-goi.com/recursos/resource_folder/listas/name_image.jpg
          type: string
        channel:
          description: Channel of the campaign
          enum:
          - email
          - push
          - sms
          - smart_sms
          - voice
          - web_push
          example: email
          type: string
        internal_name:
          description: Internal name of the campaign
          example: your internal name
          type: string
        list_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        title:
          description: Subject of the campaign
          example: subject of campaign
          type: string
        created_by:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        group_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        created:
          allOf:
          - $ref: '#/components/schemas/date_time'
        updated:
          allOf:
          - $ref: '#/components/schemas/date_time'
        start_date:
          allOf:
          - $ref: '#/components/schemas/date_time'
        end_date:
          allOf:
          - $ref: '#/components/schemas/date_time'
        schedule_date:
          $ref: '#/components/schemas/Campaign_schedule_date'
      title: Campaign
      type: object
    AbstractCampaignSendRequest:
      description: Abstract campaign request schema
      properties:
        segments:
          $ref: '#/components/schemas/AbstractCampaignSendRequest_segments'
        notify:
          description: Array of IDs of the users to notify
          items:
            type: integer
          type: array
      required:
      - segments
      title: Send Data
      type: object
    SendNone:
      description: Sends the campaign to the whole list
      discriminator:
        propertyName: type
      properties:
        type:
          description: Use this segment type to send to the whole list
          enum:
          - none
          type: string
      required:
      - type
      title: SendNone
      type: object
    SendSegment:
      description: Segments where the campaign will be sent
      discriminator:
        propertyName: type
      properties:
        type:
          description: Use this segment type to send to specific segments
          enum:
          - segment
          type: string
        data:
          description: Array of segment IDs to send the campaign
          items:
            type: string
          type: array
      required:
      - data
      - type
      title: SendSegment
      type: object
    SendContact:
      description: Contact to whom the campaign will be sent
      discriminator:
        propertyName: type
      properties:
        type:
          description: Use this segment type to send to a specific contact
          enum:
          - contact
          type: string
        data:
          description: Contact to send the campaign
          type: string
      required:
      - data
      - type
      title: SendContact
      type: object
    OSegmentsActionSend:
      discriminator:
        mapping:
          none: '#/components/schemas/SendNone'
          contact: '#/components/schemas/SendContact'
          segment: '#/components/schemas/SendSegment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/SendNone'
      - $ref: '#/components/schemas/SendContact'
      - $ref: '#/components/schemas/SendSegment'
      title: Campaign Segments
      type: object
    OSegmentsWithoutContactActionSend:
      discriminator:
        mapping:
          none: '#/components/schemas/SendNone'
          segment: '#/components/schemas/SendSegment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/SendNone'
      - $ref: '#/components/schemas/SendSegment'
      title: Campaign Segments
      type: object
    SegmentsActionSend:
      description: Object of contact limit
      properties:
        segments:
          $ref: '#/components/schemas/OSegmentsActionSend'
      title: Segments Object
      type: object
    SegmentsWithoutContactActionSend:
      description: Object of contact limit
      properties:
        segments:
          $ref: '#/components/schemas/OSegmentsWithoutContactActionSend'
      title: Segments Object
      type: object
    NotifyUserIdArrayActionSend:
      description: Users that will be notified
      properties:
        notify:
          description: Array of IDs of the users to notify
          items:
            type: integer
          type: array
      title: Notify Users
      type: object
    LimitHourActionSend:
      description: Selection of hour interval
      properties:
        limit_hour:
          $ref: '#/components/schemas/LimitHourActionSend_limit_hour'
      title: Hour limit
      type: object
    LimitSpeedActionSend:
      description: Sending campaign speed
      properties:
        limit_speed:
          description: Speed limit to send the campaign
          maximum: 10
          minimum: 1
          type: integer
      title: Speed limit
      type: object
    LimitContactsPercentActionSend:
      description: Object of contact limit
      discriminator:
        propertyName: type
      properties:
        type:
          description: Type of limit
          enum:
          - percent
          type: string
        value:
          description: Percent value
          maximum: 100
          minimum: 10
          type: integer
      title: Limit Contacts by percent Object
      type: object
    LimitContactsValueActionSend:
      description: Object of contact limit
      discriminator:
        propertyName: type
      properties:
        type:
          description: Type of limit
          enum:
          - value
          type: string
        value:
          description: Absolute value
          minimum: 10
          type: integer
      title: Limit Contacts by absolute value Object
      type: object
    LimitContactsActionSend:
      description: Object of contact limit
      properties:
        limit_contacts:
          $ref: '#/components/schemas/OLimitContactsActionSend'
      title: Limit Contacts Object
      type: object
    OLimitContactsActionSend:
      description: Object of contact limit
      discriminator:
        mapping:
          percent: '#/components/schemas/LimitContactsPercentActionSend'
          value: '#/components/schemas/LimitContactsValueActionSend'
        propertyName: type
      example:
        type: percent
        value: 30
      oneOf:
      - $ref: '#/components/schemas/LimitContactsPercentActionSend'
      - $ref: '#/components/schemas/LimitContactsValueActionSend'
      title: Limit Contacts Object
      type: object
    DeleteCampaignsConflict:
      allOf:
      - $ref: '#/components/schemas/campaign_sent_last_30_days'
      - $ref: '#/components/schemas/BaseConflict'
      description: Error schema for delete campaigns conflicts
      title: DeleteCampaignsConflict
      type: object
    campaign_sent_last_30_days:
      description: Error schema for conflict when the campaign was sent in the last
        30 days
      properties:
        errors:
          $ref: '#/components/schemas/campaign_sent_last_30_days_errors'
      title: campaign_sent_last_30_days
      type: object
    EmailCampaignCreate:
      description: Email campaign schema
      example:
        header_footer:
          header_links:
            unsubscribe: false
            edit: false
            forward: false
            view_web: false
            twitter_share: false
            social_share: false
            facebook_share: false
          id: 1
          footer_links:
            unsubscribe: false
            edit: false
            forward: false
            view_web: false
            twitter_share: false
            social_share: false
            facebook_share: false
        internal_name: Campaign internal name
        list_id: 1
        reply_to: 1
        subject: Campaign subject
        content: null
        sender_id: 1
      properties:
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        internal_name:
          description: Campaign internal name
          example: Campaign internal name
          type: string
        subject:
          description: "Campaign subject. If no value is sent, defaults to 'internal_name'\
            \ property value"
          example: Campaign subject
          type: string
        content:
          $ref: '#/components/schemas/CampaignEmailContent'
        sender_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        reply_to:
          example: 1
          minimum: 1
          title: ID
          type: integer
        header_footer:
          $ref: '#/components/schemas/HeaderFooter'
      required:
      - content
      - internal_name
      - list_id
      - sender_id
      title: Email Campaign
      type: object
    EmailRssCampaignCreate:
      description: Email rss campaign schema
      example:
        header_footer:
          header_links:
            unsubscribe: false
            edit: false
            forward: false
            view_web: false
            twitter_share: false
            social_share: false
            facebook_share: false
          id: 1
          footer_links:
            unsubscribe: false
            edit: false
            forward: false
            view_web: false
            twitter_share: false
            social_share: false
            facebook_share: false
        internal_name: Campaign internal name
        list_id: 1
        reply_to: 1
        subject: Campaign subject
        content: null
        sender_id: 1
      properties:
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        internal_name:
          description: Campaign internal name
          example: Campaign internal name
          type: string
        subject:
          description: "Campaign subject. If no value is sent, defaults to 'internal_name'\
            \ property value"
          example: Campaign subject
          type: string
        content:
          $ref: '#/components/schemas/CampaignEmailRssContent'
        sender_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        reply_to:
          example: 1
          minimum: 1
          title: ID
          type: integer
        header_footer:
          $ref: '#/components/schemas/HeaderFooter'
      required:
      - content
      - internal_name
      - list_id
      - sender_id
      title: Email Rss Campaign
      type: object
    CampaignEmailBaseContent:
      properties:
        plain_text:
          description: Plain text for the campaign
          type: string
        snippet:
          description: Snippet text for the campaign
          type: string
      title: Base Content
      type: object
    CampaignEmailContentHtml:
      allOf:
      - $ref: '#/components/schemas/CampaignEmailContentHtml_allOf'
      - $ref: '#/components/schemas/CampaignEmailBaseContent'
      required:
      - body
      - type
      title: Campaign Email Html
      type: object
    CampaignEmailRssContent:
      discriminator:
        mapping:
          html: '#/components/schemas/CampaignEmailRssContentHtml'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/CampaignEmailRssContentHtml'
      title: Campaign Content
      type: object
    CampaignEmailRssContentHtml:
      allOf:
      - $ref: '#/components/schemas/CampaignEmailRssContentHtml_allOf'
      - $ref: '#/components/schemas/CampaignEmailBaseContent'
      required:
      - body
      - type
      title: Campaign Email Html
      type: object
    CampaignEmailContentTemplate:
      allOf:
      - $ref: '#/components/schemas/CampaignEmailContentTemplate_allOf'
      - $ref: '#/components/schemas/CampaignEmailBaseContent'
      required:
      - template_id
      - type
      title: Campaign Email Template
      type: object
    CampaignEmailContentWebPage:
      allOf:
      - $ref: '#/components/schemas/CampaignEmailContentWebPage_allOf'
      - $ref: '#/components/schemas/CampaignEmailBaseContent'
      required:
      - type
      - url
      title: Campaign Email Web Page
      type: object
    CampaignEmailContentFile:
      allOf:
      - $ref: '#/components/schemas/CampaignEmailContentFile_allOf'
      - $ref: '#/components/schemas/CampaignEmailBaseContent'
      required:
      - file
      - type
      title: Campaign Email File
      type: object
    CampaignEmailContent:
      discriminator:
        mapping:
          html: '#/components/schemas/CampaignEmailContentHtml'
          template: '#/components/schemas/CampaignEmailContentTemplate'
          web_page: '#/components/schemas/CampaignEmailContentWebPage'
          file: '#/components/schemas/CampaignEmailContentFile'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/CampaignEmailContentHtml'
      - $ref: '#/components/schemas/CampaignEmailContentTemplate'
      - $ref: '#/components/schemas/CampaignEmailContentWebPage'
      - $ref: '#/components/schemas/CampaignEmailContentFile'
      title: Campaign Content
      type: object
    EmailCampaignPatch:
      description: Email campaign schema
      example:
        header_footer:
          header_links:
            unsubscribe: false
            edit: false
            forward: false
            view_web: false
            twitter_share: false
            social_share: false
            facebook_share: false
          id: 1
          footer_links:
            unsubscribe: false
            edit: false
            forward: false
            view_web: false
            twitter_share: false
            social_share: false
            facebook_share: false
        internal_name: Campaign internal name
        reply_to: 1
        subject: Campaign subject
        content: null
        sender_id: 1
      properties:
        internal_name:
          description: Campaign internal name
          example: Campaign internal name
          type: string
        subject:
          description: "Campaign subject. If no value is sent, defaults to 'internal_name'\
            \ property value"
          example: Campaign subject
          type: string
        content:
          $ref: '#/components/schemas/CampaignEmailContentHtmlPatch'
        sender_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        reply_to:
          example: 1
          minimum: 1
          title: ID
          type: integer
        header_footer:
          $ref: '#/components/schemas/HeaderFooter'
      title: EmailCampaignPatch
      type: object
    CampaignEmailContentHtmlPatch:
      allOf:
      - $ref: '#/components/schemas/CampaignEmailContentHtmlPatch_allOf'
      - $ref: '#/components/schemas/CampaignEmailBaseContent'
      title: Campaign Email Html
      type: object
    HeaderFooter:
      example:
        header_links:
          unsubscribe: false
          edit: false
          forward: false
          view_web: false
          twitter_share: false
          social_share: false
          facebook_share: false
        id: 1
        footer_links:
          unsubscribe: false
          edit: false
          forward: false
          view_web: false
          twitter_share: false
          social_share: false
          facebook_share: false
      properties:
        id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        header_links:
          $ref: '#/components/schemas/HeaderFooter_header_links'
        footer_links:
          $ref: '#/components/schemas/HeaderFooter_footer_links'
      title: Campaign header and footer
      type: object
    CampaignEmailSendRequest:
      description: Campaign email send request schema
      oneOf:
      - $ref: '#/components/schemas/CampaignEmailSendNowRequest'
      - $ref: '#/components/schemas/CampaignEmailScheduleRequest'
      title: Send Email
      type: object
    CampaignEmailScheduleRequest:
      allOf:
      - $ref: '#/components/schemas/CampaignEmailScheduleRequest_allOf'
      - $ref: '#/components/schemas/AbstractSendEmail'
      description: Campaign email schedule request schema
      required:
      - list_id
      title: Schedule Email
      type: object
    CampaignEmailSendNowRequest:
      allOf:
      - $ref: '#/components/schemas/AbstractSendEmail'
      - $ref: '#/components/schemas/LimitHourActionSend'
      description: Campaign email send now request schema
      required:
      - list_id
      title: Send Email
      type: object
    AbstractSendEmail:
      description: Campaign email abstract schema
      properties:
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        segments:
          $ref: '#/components/schemas/EmailSendSegment'
        notify:
          description: Array of IDs of the users to notify
          items:
            type: integer
          type: array
        destination_field:
          description: |-
            Destination field of this campaign, which must be an email field (email or extra field id).
                                    If not sent, defaults to the general email field
          type: string
        unique_contacts_only:
          default: false
          description: True to send the campaign only to unique contacts
          type: boolean
      required:
      - list_id
      - segments
      title: Abstract Send Email
      type: object
    SendEmailContact:
      description: Email contact to whom the campaign will be sent
      discriminator:
        propertyName: type
      properties:
        type:
          description: Use this segment type to send to a specific contact
          enum:
          - contact
          type: string
        data:
          description: Contact to send the campaign
          format: email
          type: string
      required:
      - data
      - type
      title: SendEmailContact
      type: object
    EmailSendSegment:
      description: Send segment schema for email
      discriminator:
        mapping:
          none: '#/components/schemas/SendNone'
          segment: '#/components/schemas/SendSegment'
          contact: '#/components/schemas/SendEmailContact'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/SendNone'
      - $ref: '#/components/schemas/SendSegment'
      - $ref: '#/components/schemas/SendEmailContact'
      title: EmailSendSegment
      type: object
    PushCampaignPostRequest:
      description: Push campaign post request schema
      example:
        notification_options:
          icon: icon
        title: title
        app_id: app_id
        actions:
          link: link
          type: url
          title: title
          cancel_label: cancel_label
        content: null
        geo_options:
          duration: 0
          latitude: -151
          range: 0
          longitude: 36
      properties:
        app_id:
          pattern: "[a-zA-Z0-9_-]*"
          title: Push App Id
          type: string
        title:
          description: Push campaign subject
          type: string
        content:
          $ref: '#/components/schemas/CampaignPushContent'
        actions:
          $ref: '#/components/schemas/PushCampaignPostRequest_actions'
        geo_options:
          $ref: '#/components/schemas/PushCampaignPostRequest_geo_options'
        notification_options:
          $ref: '#/components/schemas/PushCampaignPostRequest_notification_options'
      required:
      - app_id
      - content
      - title
      title: PushCampaignPostRequest
      type: object
    PushCampaignPatchRequest:
      description: Push campaign patch request schema
      example:
        notification_options:
          icon: icon
        campaign_hash: campaign_hash
        title: title
        actions:
          link: link
          type: url
          title: title
          cancel_label: cancel_label
        content:
          message: Campaign message
        geo_options:
          latitude: -151
          range: 0
          longitude: 36
      properties:
        campaign_hash:
          pattern: "[a-zA-Z0-9_-]*"
          readOnly: true
          title: Hash
          type: string
        title:
          description: Push campaign subject
          type: string
        content:
          $ref: '#/components/schemas/PushCampaignPatchRequest_content'
        actions:
          $ref: '#/components/schemas/PushCampaignPostRequest_actions'
        geo_options:
          $ref: '#/components/schemas/PushCampaignPatchRequest_geo_options'
        notification_options:
          $ref: '#/components/schemas/PushCampaignPostRequest_notification_options'
      title: PushCampaignPatchRequest
      type: object
    PushNotificationSoundSchemaDefault:
      discriminator:
        propertyName: type
      properties:
        type:
          description: Cellphone notification sound
          enum:
          - default
          type: string
      title: PushNotificationSoundSchemaDefault
      type: object
    PushNotificationSoundSchemaNone:
      discriminator:
        propertyName: type
      properties:
        type:
          description: No notification sound
          enum:
          - none
          type: string
      title: PushNotificationSoundSchemaNone
      type: object
    PushNotificationSoundSchemaUrl:
      discriminator:
        propertyName: type
      properties:
        type:
          description: Custom notification sound
          enum:
          - custom
          type: string
        url:
          description: Notification sound url
          type: string
      title: PushNotificationSoundSchemaUrl
      type: object
    PushNotificationSoundSchema:
      discriminator:
        mapping:
          default: '#/components/schemas/PushNotificationSoundSchemaDefault'
          none: '#/components/schemas/PushNotificationSoundSchemaNone'
          custom: '#/components/schemas/PushNotificationSoundSchemaUrl'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/PushNotificationSoundSchemaDefault'
      - $ref: '#/components/schemas/PushNotificationSoundSchemaNone'
      - $ref: '#/components/schemas/PushNotificationSoundSchemaUrl'
      title: Push Notification Sound
      type: object
    CampaignPushContentText:
      discriminator:
        propertyName: type
      properties:
        type:
          enum:
          - text
          type: string
        message:
          description: Push campaign message
          example: Campaign message
          type: string
      required:
      - message
      - type
      title: CampaignPushContentText
      type: object
    CampaignPushContentTemplate:
      discriminator:
        propertyName: type
      properties:
        type:
          enum:
          - template
          type: string
        template_id:
          description: ID of the template for this campaign
          type: integer
      required:
      - template_id
      - type
      title: CampaignPushContentTemplate
      type: object
    CampaignPushContent:
      discriminator:
        mapping:
          text: '#/components/schemas/CampaignPushContentText'
          template: '#/components/schemas/CampaignPushContentTemplate'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/CampaignPushContentText'
      - $ref: '#/components/schemas/CampaignPushContentTemplate'
      title: Campaign Content
      type: object
    CampaignPushSendRequest:
      description: Campaign push send request schema
      oneOf:
      - $ref: '#/components/schemas/SendPush'
      - $ref: '#/components/schemas/CampaignPushScheduleRequest'
      title: Send Push
      type: object
    CampaignPushScheduleRequest:
      allOf:
      - $ref: '#/components/schemas/CampaignEmailScheduleRequest_allOf'
      - $ref: '#/components/schemas/SendPush'
      title: Schedule Push
      type: object
    SendPush:
      allOf:
      - $ref: '#/components/schemas/SendPush_allOf'
      - $ref: '#/components/schemas/SegmentsWithoutContactActionSend'
      - $ref: '#/components/schemas/NotifyUserIdArrayActionSend'
      required:
      - app_id
      - segments
      title: Send Push
      type: object
    SmartSmsCampaign:
      example:
        internal_name: Internal Name
        list_id: 1
        options:
          max_messages: 5
          encoding: gsm
        page_content: null
        cname_id: 1
        sender_id: 1
        campaign_content:
          message: message
      properties:
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        internal_name:
          description: Smart SMS campaign internal name
          example: Internal Name
          type: string
        campaign_content:
          $ref: '#/components/schemas/SmartSmsCampaign_campaign_content'
        page_content:
          $ref: '#/components/schemas/CampaignSmartSmsPageContent'
        sender_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        cname_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        options:
          $ref: '#/components/schemas/CampaignSmartSmsOptions'
      required:
      - campaign_content
      - internal_name
      - list_id
      - page_content
      title: Smart Sms Campaign
      type: object
    SmartSmsCampaignPatchRequest:
      example:
        internal_name: Internal Title
        options:
          max_messages: 5
          encoding: gsm
        page_content:
          page_url: page_url
          page_internal_name: page_internal_name
          page_html: page_html
        cname_id: 1
        sender_id: 1
        campaign_content:
          message: message
      properties:
        internal_name:
          description: SMS campaign internal name
          example: Internal Title
          type: string
        campaign_content:
          $ref: '#/components/schemas/SmartSmsCampaignPatchRequest_campaign_content'
        page_content:
          $ref: '#/components/schemas/SmartSmsCampaignPatchRequest_page_content'
        sender_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        cname_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        options:
          $ref: '#/components/schemas/CampaignSmsOptions'
      title: Smart Sms Campaign
      type: object
    CampaignSmartSmsPageContent:
      discriminator:
        mapping:
          redirect: '#/components/schemas/CampaignSmartSmsRedirect'
          import: '#/components/schemas/CampaignSmartSmsImport'
          html: '#/components/schemas/CampaignSmartSmsHtml'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/CampaignSmartSmsRedirect'
      - $ref: '#/components/schemas/CampaignSmartSmsImport'
      - $ref: '#/components/schemas/CampaignSmartSmsHtml'
      title: Campaign page content
      type: object
    CampaignSmartSmsRedirect:
      properties:
        type:
          enum:
          - redirect
          type: string
        page_url:
          description: Smart SMS page URL
          type: string
      required:
      - page_url
      - type
      title: Campaign smart SMS redirect
      type: object
    CampaignSmartSmsImport:
      properties:
        type:
          enum:
          - redirect
          type: string
        page_url:
          description: Smart SMS page URL
          type: string
        page_internal_name:
          description: Smart SMS page name
          type: string
      required:
      - page_url
      - type
      title: Campaign smart SMS import
      type: object
    CampaignSmartSmsHtml:
      properties:
        type:
          enum:
          - html
          type: string
        page_html:
          description: Smart SMS page HTML
          type: string
        page_internal_name:
          description: Smart SMS page name
          type: string
      required:
      - page_html
      - type
      title: Campaign smart SMS HTML
      type: object
    CampaignSmartSmsOptions:
      example:
        max_messages: 5
        encoding: gsm
      properties:
        encoding:
          enum:
          - gsm
          - unicode
          example: gsm
          type: string
        max_messages:
          example: 5
          maximum: 9
          minimum: 1
          type: integer
      title: Campaign Options
      type: object
    CampaignSmartSmsSendRequest:
      description: Campaign smart sms send request schema
      oneOf:
      - $ref: '#/components/schemas/SendSmartSms'
      - $ref: '#/components/schemas/CampaignSmartSmsScheduleRequest'
      title: Send Smart SMS
      type: object
    CampaignSmartSmsScheduleRequest:
      allOf:
      - $ref: '#/components/schemas/CampaignEmailScheduleRequest_allOf'
      - $ref: '#/components/schemas/SendSmartSms'
      title: Schedule Smart SMS
      type: object
    SendSmartSms:
      allOf:
      - $ref: '#/components/schemas/SendSmartSms_allOf'
      - $ref: '#/components/schemas/SendSmartSms_allOf_1'
      - $ref: '#/components/schemas/SendSmartSms_allOf_2'
      - $ref: '#/components/schemas/LimitHourActionSend'
      - $ref: '#/components/schemas/NotifyUserIdArrayActionSend'
      required:
      - destination_field
      - list_id
      - segments
      title: Send Smart SMS
      type: object
    SmartSmsSegmentsActionSend:
      discriminator:
        mapping:
          none: '#/components/schemas/SendNone'
          contact: '#/components/schemas/SendContactCellphone'
          segment: '#/components/schemas/SendSegment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/SendNone'
      - $ref: '#/components/schemas/SendContactCellphone'
      - $ref: '#/components/schemas/SendSegment'
      title: Campaign Segments
      type: object
    SmsCampaign:
      example:
        internal_name: Internal Title
        list_id: 1
        options:
          max_messages: 5
          encoding: gsm
        content: null
        sender_id: 1
      properties:
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        internal_name:
          description: SMS campaign internal name
          example: Internal Title
          type: string
        content:
          $ref: '#/components/schemas/CampaignSmsContent'
        sender_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        options:
          $ref: '#/components/schemas/CampaignSmsOptions'
      required:
      - content
      - internal_name
      - list_id
      title: Sms Campaign
      type: object
    SmsCampaignPatchRequest:
      example:
        internal_name: Internal Title
        options:
          max_messages: 5
          encoding: gsm
        content:
          message: Campaign message
        sender_id: 1
      properties:
        internal_name:
          description: SMS campaign internal name
          example: Internal Title
          type: string
        content:
          $ref: '#/components/schemas/SmsCampaignPatchRequest_content'
        sender_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        options:
          $ref: '#/components/schemas/CampaignSmsOptions'
      title: Sms Campaign
      type: object
    CampaignSmsContentText:
      properties:
        type:
          enum:
          - text
          type: string
        message:
          description: SMS campaign message
          example: Campaign message
          type: string
      required:
      - message
      - type
      title: Campaign text
      type: object
    CampaignSmsContentTemplate:
      properties:
        type:
          enum:
          - template
          type: string
        template_id:
          description: ID of the template for this campaign
          type: integer
      required:
      - template_id
      - type
      title: Campaign template
      type: object
    CampaignSmsContent:
      discriminator:
        mapping:
          text: '#/components/schemas/CampaignSmsContentText'
          template: '#/components/schemas/CampaignSmsContentTemplate'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/CampaignSmsContentText'
      - $ref: '#/components/schemas/CampaignSmsContentTemplate'
      title: Campaign Content
      type: object
    CampaignSmsOptions:
      example:
        max_messages: 5
        encoding: gsm
      properties:
        encoding:
          enum:
          - gsm
          - unicode
          example: gsm
          type: string
        max_messages:
          example: 5
          maximum: 9
          minimum: 1
          type: integer
      title: Campaign Options
      type: object
    CampaignSmsSendRequest:
      description: Campaign sms send request schema
      oneOf:
      - $ref: '#/components/schemas/SendSms'
      - $ref: '#/components/schemas/CampaignSmsScheduleRequest'
      title: Send SMS
      type: object
    CampaignSmsScheduleRequest:
      allOf:
      - $ref: '#/components/schemas/CampaignEmailScheduleRequest_allOf'
      - $ref: '#/components/schemas/SendSms'
      title: Schedule SMS
      type: object
    SendSms:
      allOf:
      - $ref: '#/components/schemas/SendSmartSms_allOf'
      - $ref: '#/components/schemas/SendSms_allOf'
      - $ref: '#/components/schemas/SendSms_allOf_1'
      - $ref: '#/components/schemas/NotifyUserIdArrayActionSend'
      required:
      - destination_field
      - list_id
      - segments
      title: Send SMS
      type: object
    SmsSegmentsActionSend:
      discriminator:
        mapping:
          none: '#/components/schemas/SendNone'
          contact: '#/components/schemas/SendContactCellphone'
          segment: '#/components/schemas/SendSegment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/SendNone'
      - $ref: '#/components/schemas/SendContactCellphone'
      - $ref: '#/components/schemas/SendSegment'
      title: Campaign Segments
      type: object
    SendContactCellphone:
      description: Cellphone to whom the campaign will be sent
      discriminator:
        propertyName: type
      properties:
        type:
          description: Use this segment type to send to a specific contact
          enum:
          - contact
          type: string
        data:
          description: |-
            Contact cellphone.  A string containing a phone/cellphone number (country code is required);
                                    e. g. '351-300404336'
          example: 351-300404336
          pattern: "^[1-9]{1,4}\\-[0-9]{3,14}$"
          type: string
      required:
      - data
      - type
      title: Contact Cellphone
      type: object
    VoiceCampaign:
      allOf:
      - $ref: '#/components/schemas/VoiceCampaign_allOf'
      description: Voice campaign schema
      required:
      - content
      - internal_name
      - list_id
      - sender_id
      title: Voice Campaign
      type: object
    ContentVoice:
      description: Content schema
      discriminator:
        mapping:
          none: '#/components/schemas/ContentVoiceAudio'
          segment: '#/components/schemas/ContentVoiceTemplate'
        propertyName: type
      example:
        type: template_id
        template_id: 1
      oneOf:
      - $ref: '#/components/schemas/ContentVoiceAudio'
      - $ref: '#/components/schemas/ContentVoiceTemplate'
      title: Content
      type: object
    ContentVoiceAudio:
      description: Audio schema
      properties:
        type:
          enum:
          - audio
          example: audio
          type: string
        audio:
          description: Voice campaign audio
          type: string
      type: object
    ContentVoiceTemplate:
      description: Template_id schema
      properties:
        type:
          enum:
          - template_id
          example: template_id
          type: string
        template_id:
          description: Voice campaign template_id
          type: string
      type: object
    VoicePatchCampaign:
      allOf:
      - $ref: '#/components/schemas/VoicePatchCampaign_allOf'
      description: Voice campaign schema
      title: Voice Campaign
      type: object
    ContentVoicePatch:
      description: Content schema
      properties:
        audio:
          description: Voice campaign audio
          type: string
      title: Content
      type: object
    CampaignVoiceSendRequest:
      description: Campaign voice send request schema
      oneOf:
      - $ref: '#/components/schemas/AbstractSendVoice'
      - $ref: '#/components/schemas/CampaignVoiceScheduleRequest'
      title: Send Voice
      type: object
    CampaignVoiceScheduleRequest:
      allOf:
      - $ref: '#/components/schemas/CampaignEmailScheduleRequest_allOf'
      - $ref: '#/components/schemas/AbstractSendVoice'
      description: Campaign voice schedule request schema
      title: Schedule Voice
      type: object
    AbstractSendVoice:
      allOf:
      - $ref: '#/components/schemas/SendSmartSms_allOf'
      - $ref: '#/components/schemas/AbstractSendVoice_allOf'
      - $ref: '#/components/schemas/AbstractSendVoice_allOf_1'
      - $ref: '#/components/schemas/SegmentsActionSend'
      - $ref: '#/components/schemas/NotifyUserIdArrayActionSend'
      - $ref: '#/components/schemas/LimitContactsActionSend'
      - $ref: '#/components/schemas/LimitHourActionSend'
      - $ref: '#/components/schemas/LimitSpeedActionSend'
      description: Campaign voice abstract schema
      required:
      - destination_field
      - list_id
      - segments
      title: Send Voice
      type: object
    WebPushCampaign:
      example:
        internal_name: internal_name
        site_id: 1
        actions:
        - link: link
          title: title
        - link: link
          title: title
        content: null
      properties:
        site_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        internal_name:
          description: Webpush campaign internal title
          type: string
        content:
          $ref: '#/components/schemas/MessageWebPushPost'
        actions:
          items:
            $ref: '#/components/schemas/WebpushActions_inner'
          title: Webpush actions
          type: array
      required:
      - content
      - internal_name
      - site_id
      title: Webpush Campaign
      type: object
    WebPushRssCampaign:
      example:
        internal_name: internal_name
        site_id: 1
        content:
          feed: https://localhost/feed
      properties:
        site_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        internal_name:
          description: Webpush campaign internal title
          type: string
        content:
          $ref: '#/components/schemas/MessageWebPushRss'
      required:
      - content
      - internal_name
      - site_id
      title: Webpush Rss Campaign
      type: object
    WebPushPatchCampaign:
      example:
        internal_name: internal_name
        actions:
        - link: link
          title: title
        - link: link
          title: title
        content:
          link: link
          icon: icon
          title: title
          message: Campaign message
      properties:
        internal_name:
          description: Webpush campaign internal title
          type: string
        content:
          $ref: '#/components/schemas/MessageWebPush'
        actions:
          items:
            $ref: '#/components/schemas/WebpushActions_inner'
          title: Webpush actions
          type: array
      title: Webpush Campaign
      type: object
    MessageWebPush:
      example:
        link: link
        icon: icon
        title: title
        message: Campaign message
      properties:
        title:
          description: Webpush campaign title
          type: string
        message:
          description: Campaign message
          example: Campaign message
          type: string
        link:
          description: Webpush link
          type: string
        icon:
          description: Webpush campaign icon
          type: string
      title: Campaign Content
      type: object
    MessageWebPushRss:
      example:
        feed: https://localhost/feed
      properties:
        feed:
          description: Feed Rss Url
          example: https://localhost/feed
          type: string
      title: Campaign Content
      type: object
    MessageWebPushPost:
      allOf:
      - $ref: '#/components/schemas/MessageWebPush'
      required:
      - link
      - message
      - title
      title: Campaign Content
      type: object
    WebpushActions:
      items:
        $ref: '#/components/schemas/WebpushActions_inner'
      title: Webpush actions
      type: array
    CampaignWebPushSendRequest:
      description: Campaign webpush send request schema
      oneOf:
      - $ref: '#/components/schemas/SendWebPush'
      - $ref: '#/components/schemas/CampaignWebPushScheduleRequest'
      title: Send Webpush
      type: object
    CampaignWebPushScheduleRequest:
      allOf:
      - $ref: '#/components/schemas/CampaignEmailScheduleRequest_allOf'
      - $ref: '#/components/schemas/SendWebPush'
      title: Schedule Webpush
      type: object
    SendWebPush:
      allOf:
      - $ref: '#/components/schemas/SendWebPush_allOf'
      - $ref: '#/components/schemas/SegmentsWithoutContactActionSend'
      - $ref: '#/components/schemas/NotifyUserIdArrayActionSend'
      required:
      - segments
      - site_id
      title: Send Webpush
      type: object
    CampaignGroupPost:
      allOf:
      - $ref: '#/components/schemas/CampaignGroupPost_allOf'
      description: Campaign Group schema
      required:
      - group_id
      - name
      title: Campaign Group
      type: object
    CampaignGroup:
      allOf:
      - $ref: '#/components/schemas/CampaignGroup_allOf'
      description: Campaign Group schema
      required:
      - group_id
      - name
      title: Campaign Group
      type: object
    AbstractCampaignTemplate:
      description: Abstract campaign template schema
      properties:
        template_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        template_hash:
          pattern: "[a-zA-Z0-9_-]*"
          readOnly: true
          title: Hash
          type: string
        internal_name:
          description: Campaign internal name
          example: Campaign internal name
          type: string
        created:
          allOf:
          - $ref: '#/components/schemas/date_time'
          readOnly: true
        updated:
          allOf:
          - $ref: '#/components/schemas/date_time'
          readOnly: true
      title: Abstract Campaign Template
      type: object
    EmailCampaignTemplate:
      allOf:
      - $ref: '#/components/schemas/EmailCampaignTemplate_allOf'
      - $ref: '#/components/schemas/AbstractCampaignTemplate'
      description: Email campaign template schema
      title: Email Campaign Template
      type: object
    HeaderFooterTemplate:
      description: Header and footer templates for email campaigns
      properties:
        template_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        internal_name:
          description: Internal name of the template
          example: Example template
          type: string
        custom:
          description: True if this is a template created by some user
          example: true
          readOnly: true
          type: boolean
      title: HeaderFooterTemplate
      type: object
    PhoneCampaignTemplate:
      allOf:
      - $ref: '#/components/schemas/PhoneCampaignTemplate_allOf'
      - $ref: '#/components/schemas/AbstractCampaignTemplate'
      description: Phone campaign template schema
      title: Phone Campaign Template
      type: object
    SmsCampaignTemplate:
      allOf:
      - $ref: '#/components/schemas/SmsCampaignTemplate_allOf'
      - $ref: '#/components/schemas/PhoneCampaignTemplate'
      description: Sms campaign template schema
      title: Sms Campaign Template
      type: object
    VoiceCampaignTemplate:
      allOf:
      - $ref: '#/components/schemas/VoiceCampaignTemplate_allOf'
      - $ref: '#/components/schemas/PhoneCampaignTemplate'
      description: Voice campaign template schema
      title: Voice Campaign Template
      type: object
    ConnectedSitesDomain:
      description: Domain schema
      example:
        list_id: "1"
        domain: e-goi.com
      properties:
        domain:
          description: Domain
          example: e-goi.com
          type: string
        list_id:
          description: List id
          example: "1"
          type: string
      title: Domain
      type: object
    ConnectedSitesDomainDetail:
      description: Domain detail schema
      example:
        features:
        - whatsapp:
            items:
            - internal_name: Form Internal Name
              form_id: 1
            - internal_name: Form Internal Name
              form_id: 1
            enabled: true
          on_site_message:
            items:
            - internal_name: Form Internal Name
              form_id: 1
            - internal_name: Form Internal Name
              form_id: 1
            enabled: true
          popup_forms:
            items:
            - internal_name: Form Internal Name
              form_id: 1
            - internal_name: Form Internal Name
              form_id: 1
            enabled: true
          track_and_engage:
            enabled: true
          embed_forms:
            items:
            - form_hash: 2Ve45e1bKZ
              internal_name: Form Internal Name
              form_id: 1
            - form_hash: 2Ve45e1bKZ
              internal_name: Form Internal Name
              form_id: 1
            enabled: true
          web_push:
            items:
            - internal_name: Web push Internal Name
              site_id: 1
              app_code: 7b89dfsb9a6ab6fbsfbasbd6f6
            - internal_name: Web push Internal Name
              site_id: 1
              app_code: 7b89dfsb9a6ab6fbsfbasbd6f6
            enabled: true
        - whatsapp:
            items:
            - internal_name: Form Internal Name
              form_id: 1
            - internal_name: Form Internal Name
              form_id: 1
            enabled: true
          on_site_message:
            items:
            - internal_name: Form Internal Name
              form_id: 1
            - internal_name: Form Internal Name
              form_id: 1
            enabled: true
          popup_forms:
            items:
            - internal_name: Form Internal Name
              form_id: 1
            - internal_name: Form Internal Name
              form_id: 1
            enabled: true
          track_and_engage:
            enabled: true
          embed_forms:
            items:
            - form_hash: 2Ve45e1bKZ
              internal_name: Form Internal Name
              form_id: 1
            - form_hash: 2Ve45e1bKZ
              internal_name: Form Internal Name
              form_id: 1
            enabled: true
          web_push:
            items:
            - internal_name: Web push Internal Name
              site_id: 1
              app_code: 7b89dfsb9a6ab6fbsfbasbd6f6
            - internal_name: Web push Internal Name
              site_id: 1
              app_code: 7b89dfsb9a6ab6fbsfbasbd6f6
            enabled: true
        code: <script type='text/javascript'>var x=y;</script>
        list_id: "1"
        domain: e-goi.com
      properties:
        domain:
          description: Domain
          example: e-goi.com
          type: string
        list_id:
          description: List id
          example: "1"
          type: string
        code:
          description: Connected Sites Tracking Code
          example: <script type='text/javascript'>var x=y;</script>
          type: string
        features:
          description: Available features
          items:
            $ref: '#/components/schemas/ConnectedSitesProducts'
          type: array
      title: Domain
      type: object
    ConnectedSitesProducts:
      description: Connected Sites Products
      example:
        whatsapp:
          items:
          - internal_name: Form Internal Name
            form_id: 1
          - internal_name: Form Internal Name
            form_id: 1
          enabled: true
        on_site_message:
          items:
          - internal_name: Form Internal Name
            form_id: 1
          - internal_name: Form Internal Name
            form_id: 1
          enabled: true
        popup_forms:
          items:
          - internal_name: Form Internal Name
            form_id: 1
          - internal_name: Form Internal Name
            form_id: 1
          enabled: true
        track_and_engage:
          enabled: true
        embed_forms:
          items:
          - form_hash: 2Ve45e1bKZ
            internal_name: Form Internal Name
            form_id: 1
          - form_hash: 2Ve45e1bKZ
            internal_name: Form Internal Name
            form_id: 1
          enabled: true
        web_push:
          items:
          - internal_name: Web push Internal Name
            site_id: 1
            app_code: 7b89dfsb9a6ab6fbsfbasbd6f6
          - internal_name: Web push Internal Name
            site_id: 1
            app_code: 7b89dfsb9a6ab6fbsfbasbd6f6
          enabled: true
      properties:
        track_and_engage:
          $ref: '#/components/schemas/ConnectedSitesGeneralProductTEDetailGlobal'
        on_site_message:
          $ref: '#/components/schemas/ConnectedSitesGeneralProductFormDetailGlobal'
        popup_forms:
          $ref: '#/components/schemas/ConnectedSitesGeneralProductFormDetailGlobal'
        whatsapp:
          $ref: '#/components/schemas/ConnectedSitesGeneralProductFormDetailGlobal'
        web_push:
          $ref: '#/components/schemas/ConnectedSitesGeneralProductAppDetailGlobal'
        embed_forms:
          $ref: '#/components/schemas/ConnectedSitesEmbedForm'
      title: Domain
      type: object
    ConnectedSitesGeneralProductTEDetailGlobal:
      description: Connected Sites General Track and Engage Product Detail
      example:
        enabled: true
      properties:
        enabled:
          description: Enabled
          type: boolean
      title: Connected Sites General Track and Engage Product Detail
      type: object
    ConnectedSitesGeneralProductFormDetailGlobal:
      description: Connected Sites General Form Product Detail
      example:
        items:
        - internal_name: Form Internal Name
          form_id: 1
        - internal_name: Form Internal Name
          form_id: 1
        enabled: true
      properties:
        enabled:
          description: Enabled
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/ConnectedSitesGeneralProductFormDetail'
          type: array
      title: Connected Sites General Form Product Detail
      type: object
    ConnectedSitesEmbedForm:
      description: Connected Sites Embed Form Product Detail
      example:
        items:
        - form_hash: 2Ve45e1bKZ
          internal_name: Form Internal Name
          form_id: 1
        - form_hash: 2Ve45e1bKZ
          internal_name: Form Internal Name
          form_id: 1
        enabled: true
      properties:
        enabled:
          description: Enabled
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/ConnectedSitesProductEmbedFormDetail'
          type: array
      title: Connected Sites Embed Form Product Detail
      type: object
    ConnectedSitesGeneralProductAppDetailGlobal:
      description: Connected Sites General App Product Detail
      example:
        items:
        - internal_name: Web push Internal Name
          site_id: 1
          app_code: 7b89dfsb9a6ab6fbsfbasbd6f6
        - internal_name: Web push Internal Name
          site_id: 1
          app_code: 7b89dfsb9a6ab6fbsfbasbd6f6
        enabled: true
      properties:
        enabled:
          description: Enabled
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/ConnectedSitesGeneralProductAppDetail'
          type: array
      title: Connected Sites General App Product Detail
      type: object
    ConnectedSitesGeneralProductFormDetail:
      description: Connected Sites General Product Detail
      example:
        internal_name: Form Internal Name
        form_id: 1
      properties:
        internal_name:
          description: Internal Name
          example: Form Internal Name
          type: string
        form_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
      title: Connected Sites General Form Product Detail
      type: object
    ConnectedSitesProductEmbedFormDetail:
      description: Connected Sites Embed Form Product Detail
      example:
        form_hash: 2Ve45e1bKZ
        internal_name: Form Internal Name
        form_id: 1
      properties:
        internal_name:
          description: Internal Name
          example: Form Internal Name
          type: string
        form_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        form_hash:
          description: Form Hash
          example: 2Ve45e1bKZ
          type: string
      title: Connected Sites Embed Form Product Detail
      type: object
    ConnectedSitesGeneralProductAppDetail:
      description: Connected Sites General App Product Detail
      example:
        internal_name: Web push Internal Name
        site_id: 1
        app_code: 7b89dfsb9a6ab6fbsfbasbd6f6
      properties:
        internal_name:
          description: Internal Name
          example: Web push Internal Name
          type: string
        site_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        app_code:
          description: App code
          example: 7b89dfsb9a6ab6fbsfbasbd6f6
          readOnly: true
          type: string
      title: Connected Sites General App Product Detail
      type: object
    contact_id:
      example: 8f3a27ef26
      pattern: "[a-fA-F\\d]{10}"
      readOnly: true
      title: Contact ID
      type: string
    contact_query_id:
      pattern: "[a-fA-F\\d]{10}"
      title: Contact ID
      type: string
    contact_body_id:
      example: 8f3a27ef26
      pattern: "[a-fA-F\\d]{10}"
      title: Contact ID
      type: string
    show_removed:
      default: false
      example: true
      title: Show removed contacts
      type: boolean
    ComplexContact:
      allOf:
      - $ref: '#/components/schemas/ComplexContact_allOf'
      - $ref: '#/components/schemas/Contact'
      description: Complex contact schema
      title: ComplexContact
      type: object
    Contact:
      allOf:
      - $ref: '#/components/schemas/contactBaseExtra'
      - $ref: '#/components/schemas/contactTags'
      description: Contact schema
      title: Contact
      type: object
    ContactBaseFieldsSchema:
      description: Contact base
      properties:
        base:
          $ref: '#/components/schemas/ContactBaseFieldsSchema_base'
      title: Contact
      type: object
    ContactBaseFieldsPostSchema:
      description: Contact base
      properties:
        base:
          $ref: '#/components/schemas/ContactBaseFieldsPostSchema_base'
      title: Contact
      type: object
    ContactBaseFieldsWithIdSchema:
      description: Contact base with contact_id
      properties:
        base:
          $ref: '#/components/schemas/ContactBaseFieldsWithIdSchema_base'
      title: Contact
      type: object
    ContactBaseWithStatusNoRemovedFieldsSchema:
      description: Contact base
      properties:
        base:
          $ref: '#/components/schemas/ContactBaseWithStatusNoRemovedFieldsSchema_base'
      title: Contact
      type: object
    ContactBaseWithStatusFieldsSchema:
      description: Contact base
      properties:
        base:
          $ref: '#/components/schemas/ContactBaseWithStatusFieldsSchema_base'
      title: Contact
      type: object
    ContactBaseWithStatusFieldsNoTokensSchema:
      description: Contact base
      properties:
        base:
          $ref: '#/components/schemas/ContactBaseWithStatusFieldsNoTokensSchema_base'
      title: Contact
      type: object
    ContactInsideBasePost:
      properties:
        contact_id:
          example: 8f3a27ef26
          pattern: "[a-fA-F\\d]{10}"
          readOnly: true
          title: Contact ID
          type: string
        status:
          default: active
          description: Status of the contact
          enum:
          - active
          - inactive
          - removed
          - unconfirmed
          type: string
        first_name:
          description: First name of the contact
          example: John
          type: string
        last_name:
          description: Last name of the contact
          example: Doe
          type: string
        birth_date:
          description: Birth date of the contact
          example: 1975-01-10
          format: date
          type: string
        language:
          $ref: '#/components/schemas/language'
        email:
          description: Email of the contact
          example: example@e-goi.com
          type: string
        cellphone:
          description: Cellphone of the contact
          example: 351-300404336
          type: string
        phone:
          description: Phone of the contact
          example: 351-300404336
          type: string
        push_token_android:
          description: Android push token of the contact
          items:
            $ref: '#/components/schemas/ContactBaseWithStatusNoRemovedFieldsSchema_base_push_token_android_inner'
          type: array
        push_token_ios:
          description: IOS push token of the contact
          items:
            $ref: '#/components/schemas/ContactBaseWithStatusNoRemovedFieldsSchema_base_push_token_ios_inner'
          type: array
      type: object
    ContactInsideBase:
      properties:
        contact_id:
          example: 8f3a27ef26
          pattern: "[a-fA-F\\d]{10}"
          readOnly: true
          title: Contact ID
          type: string
        status:
          default: active
          description: Status of the contact
          enum:
          - active
          - inactive
          - removed
          - unconfirmed
          type: string
        consent:
          default: consent
          description: Contact consent
          enum:
          - any
          - consent
          - contract
          - legitimate_interest
          - none
          - protect_vital_interests
          - public_interests
          - required_by_law
          - withdrawn
          readOnly: true
          type: string
        consent_date:
          description: Date and hour of the contact consent
          format: date-time
          readOnly: true
          type: string
        subscription_method:
          description: Contact subscription method
          enum:
          - manual
          - form
          - imported
          - referral
          - api
          readOnly: true
          type: string
        subscription_date:
          description: Date and hour of the contact subscription
          format: date-time
          readOnly: true
          type: string
        subscription_form:
          description: Contact subscription form
          minimum: 0
          readOnly: true
          type: integer
        unsubscription_method:
          description: Contact unsubscription method
          enum:
          - manual
          - form
          - unsubscribe_link
          - bounce
          - api
          - ""
          readOnly: true
          type: string
        unsubscription_reason:
          description: Contact unsubscription reason
          enum:
          - not_interested
          - lack_of_time
          - email_address_change
          - spam
          - other
          - ""
          readOnly: true
          type: string
        unsubscription_observation:
          description: Contact unsubscription observation
          example: ""
          readOnly: true
          type: string
        unsubscription_date:
          description: Contact unsubscription date
          format: date-time
          readOnly: true
          type: string
        change_date:
          description: Last modification date of the contact
          format: date
          readOnly: true
          type: string
        first_name:
          description: First name of the contact
          example: John
          type: string
        last_name:
          description: Last name of the contact
          example: Doe
          type: string
        birth_date:
          description: Birth date of the contact
          example: 1975-01-10
          format: date
          type: string
        language:
          $ref: '#/components/schemas/language'
        email:
          description: Email of the contact
          example: example@e-goi.com
          type: string
        email_status:
          default: active
          description: Email channel status
          enum:
          - active
          - inactive
          readOnly: true
          type: string
        cellphone:
          description: Cellphone of the contact
          example: 351-300404336
          type: string
        cellphone_status:
          default: active
          description: Cellphone channel status
          enum:
          - active
          - inactive
          readOnly: true
          type: string
        phone:
          description: Phone of the contact
          example: 351-300404336
          type: string
        phone_status:
          default: active
          description: Phone channel status
          enum:
          - active
          - inactive
          readOnly: true
          type: string
        push_token_android:
          description: Android push token of the contact
          items:
            $ref: '#/components/schemas/ContactBaseWithStatusNoRemovedFieldsSchema_base_push_token_android_inner'
          type: array
        push_token_ios:
          description: IOS push token of the contact
          items:
            $ref: '#/components/schemas/ContactBaseWithStatusNoRemovedFieldsSchema_base_push_token_ios_inner'
          type: array
      type: object
    ContactInsideBaseWithId:
      properties:
        contact_id:
          example: 8f3a27ef26
          pattern: "[a-fA-F\\d]{10}"
          type: string
        status:
          default: active
          description: Status of the contact
          enum:
          - active
          - inactive
          - removed
          - unconfirmed
          type: string
        consent:
          default: consent
          description: Contact consent
          enum:
          - any
          - consent
          - contract
          - legitimate_interest
          - none
          - protect_vital_interests
          - public_interests
          - required_by_law
          - withdrawn
          readOnly: true
          type: string
        consent_date:
          description: Date and hour of the contact consent
          format: date-time
          readOnly: true
          type: string
        subscription_method:
          description: Contact subscription method
          enum:
          - manual
          - form
          - imported
          - referral
          - api
          readOnly: true
          type: string
        subscription_date:
          description: Date and hour of the contact subscription
          format: date-time
          readOnly: true
          type: string
        subscription_form:
          description: Contact subscription form
          minimum: 0
          readOnly: true
          type: integer
        unsubscription_method:
          description: Contact unsubscription method
          enum:
          - manual
          - form
          - unsubscribe_link
          - bounce
          - api
          - ""
          readOnly: true
          type: string
        unsubscription_reason:
          description: Contact unsubscription reason
          enum:
          - not_interested
          - lack_of_time
          - email_address_change
          - spam
          - other
          - ""
          readOnly: true
          type: string
        unsubscription_observation:
          description: Contact unsubscription observation
          example: ""
          readOnly: true
          type: string
        unsubscription_date:
          description: Contact unsubscription date
          format: date-time
          readOnly: true
          type: string
        change_date:
          description: Last modification date of the contact
          format: date
          readOnly: true
          type: string
        first_name:
          description: First name of the contact
          example: John
          type: string
        last_name:
          description: Last name of the contact
          example: Doe
          type: string
        birth_date:
          description: Birth date of the contact
          example: 1975-01-10
          format: date
          type: string
        language:
          $ref: '#/components/schemas/language'
        email:
          description: Email of the contact
          example: example@e-goi.com
          type: string
        email_status:
          default: active
          description: Email channel status
          enum:
          - active
          - inactive
          readOnly: true
          type: string
        cellphone:
          description: Cellphone of the contact
          example: 351-300404336
          type: string
        cellphone_status:
          default: active
          description: Cellphone channel status
          enum:
          - active
          - inactive
          readOnly: true
          type: string
        phone:
          description: Phone of the contact
          example: 351-300404336
          type: string
        phone_status:
          default: active
          description: Phone channel status
          enum:
          - active
          - inactive
          readOnly: true
          type: string
        push_token_android:
          description: Android push token of the contact
          items:
            $ref: '#/components/schemas/ContactBaseWithStatusNoRemovedFieldsSchema_base_push_token_android_inner'
          type: array
        push_token_ios:
          description: IOS push token of the contact
          items:
            $ref: '#/components/schemas/ContactBaseWithStatusNoRemovedFieldsSchema_base_push_token_ios_inner'
          type: array
      type: object
    ContactExtraFieldsSchema:
      description: Contact Extra schema
      properties:
        extra:
          description: Array of the contact's extra fields
          items:
            $ref: '#/components/schemas/ContactExtraFields'
          type: array
      title: Contact
      type: object
    contactStatusFieldsSchema:
      description: Contact status schema
      properties:
        email_status:
          description: Email channel status
          enum:
          - active
          - inactive
          type: string
        cellphone_status:
          description: Cellphone channel status
          enum:
          - active
          - inactive
          type: string
        phone_status:
          description: Phone channel status
          enum:
          - active
          - inactive
          type: string
      title: Contact
      type: object
    contactBaseExtra:
      allOf:
      - $ref: '#/components/schemas/ContactBaseFieldsSchema'
      - $ref: '#/components/schemas/ContactExtraFieldsSchema'
      description: Contact Base and Extra schema
      title: Contact
      type: object
    contactBaseExtraPost:
      allOf:
      - $ref: '#/components/schemas/ContactBaseFieldsPostSchema'
      - $ref: '#/components/schemas/ContactExtraFieldsSchema'
      description: Contact Base and Extra schema
      title: Contact
      type: object
    contactBaseExtraFull:
      allOf:
      - $ref: '#/components/schemas/ContactBaseFieldsWithIdSchema'
      - $ref: '#/components/schemas/ContactExtraFieldsSchema'
      description: Contact Base and Extra schema with contact_id
      title: Contact
      type: object
    contactBaseStatusExtra:
      allOf:
      - $ref: '#/components/schemas/ContactBaseWithStatusFieldsSchema'
      - $ref: '#/components/schemas/ContactExtraFieldsSchema'
      description: Contact schema
      title: Contact
      type: object
    contactBaseStatusExtraNoRemoved:
      allOf:
      - $ref: '#/components/schemas/ContactBaseWithStatusNoRemovedFieldsSchema'
      - $ref: '#/components/schemas/ContactExtraFieldsSchema'
      description: Contact schema
      title: Contact
      type: object
    contactTags:
      properties:
        tags:
          description: Array of tags for this contact
          example:
          - 1
          - 2
          items:
            type: integer
          readOnly: true
          type: array
      type: object
    ContactExtraFields:
      oneOf:
      - $ref: '#/components/schemas/ContactExtraFieldDate'
      - $ref: '#/components/schemas/ContactExtraFieldText'
      - $ref: '#/components/schemas/ContactExtraFieldCellphone'
      - $ref: '#/components/schemas/ContactExtraFieldPhone'
      - $ref: '#/components/schemas/ContactExtraFieldNumber'
      - $ref: '#/components/schemas/ContactExtraFieldEmail'
      - $ref: '#/components/schemas/ContactExtraFieldOptions'
      type: object
    ContactExtraFieldDate:
      properties:
        field_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        format:
          description: Extra field format
          enum:
          - date
          readOnly: true
          type: string
        value:
          description: Extra field value
          example: 2019-01-01
          format: date
          type: string
      title: ContactExtraFieldDate
      type: object
    ContactExtraFieldText:
      properties:
        field_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        format:
          description: Extra field format
          enum:
          - text
          readOnly: true
          type: string
        value:
          description: Extra field value
          type: string
      title: ContactExtraFieldText
      type: object
    ContactExtraFieldCellphone:
      properties:
        field_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        format:
          description: Extra field format
          enum:
          - cellphone
          readOnly: true
          type: string
        value:
          description: Extra field value
          type: string
        status:
          description: Extra field status
          enum:
          - active
          - inactive
          type: string
      title: ContactExtraFieldCellphone
      type: object
    ContactExtraFieldPhone:
      properties:
        field_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        format:
          description: Extra field format
          enum:
          - phone
          readOnly: true
          type: string
        value:
          description: Extra field value
          type: string
        status:
          description: Extra field status
          enum:
          - active
          - inactive
          type: string
      title: ContactExtraFieldPhone
      type: object
    ContactExtraFieldNumber:
      properties:
        field_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        format:
          description: Extra field format
          enum:
          - number
          readOnly: true
          type: string
        value:
          description: Extra field value
          example: "100"
          type: string
      title: ContactExtraFieldNumber
      type: object
    ContactExtraFieldEmail:
      properties:
        field_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        format:
          description: Extra field format
          enum:
          - email
          readOnly: true
          type: string
        value:
          description: Extra field value
          type: string
        status:
          description: Extra field status
          enum:
          - active
          - inactive
          type: string
      title: ContactExtraFieldEmail
      type: object
    ContactExtraFieldOptions:
      properties:
        field_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        format:
          description: Extra field format
          enum:
          - options
          readOnly: true
          type: string
        value:
          description: Extra field value
          example:
          - 1
          - 2
          items:
            type: integer
          type: array
      title: ContactExtraFieldOptions
      type: object
    unsubscriptionObject:
      properties:
        unsubscription_method:
          description: Unsubcription Method
          enum:
          - manual
          - form
          - unsubscribe_link
          - bounce
          - api
          type: string
        unsubscription_reason:
          description: Unsubcription Reason
          enum:
          - not_interested
          - lack_of_time
          - email_address_change
          - spam
          - other
          type: string
        unsubscription_observation:
          description: Unsubcription Observation
          type: string
      title: unsubscription Object
      type: object
    CreateContactResponse:
      description: Create contact response schema
      example:
        contact_id: 8f3a27ef26
      properties:
        contact_id:
          example: 8f3a27ef26
          pattern: "[a-fA-F\\d]{10}"
          readOnly: true
          title: Contact ID
          type: string
      title: CreateContactResponse
      type: object
    ActivateContactsRequest:
      description: Activate contacts request schema
      discriminator:
        mapping:
          all: '#/components/schemas/ActivateContactsAll'
          contacts: '#/components/schemas/ActivateContactsMany'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/ActivateContactsAll'
      - $ref: '#/components/schemas/ActivateContactsMany'
      required:
      - type
      title: Activate Contacts Request
      type: object
    ActivateContactsAll:
      properties:
        type:
          description: Activates the contacts in the whole list (excluding removed
            contacts)
          enum:
          - all
          type: string
      title: Activate Contacts All
      type: object
    ActivateContactsMany:
      properties:
        type:
          description: Activates the provided contacts (excluding removed contacts)
          enum:
          - contacts
          type: string
        contacts:
          description: Array of contact IDs to activate
          items:
            $ref: '#/components/schemas/contact_body_id'
          minItems: 1
          type: array
          uniqueItems: true
      title: Activate Contacts Many
      type: object
    AttachTagRequest:
      description: Attach tag to contact request schema
      example:
        tag_id: 1
      oneOf:
      - $ref: '#/components/schemas/Attach_by_Contacts'
      - $ref: '#/components/schemas/Attach_by_Segment'
      properties:
        tag_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
      required:
      - tag_id
      title: Attach Tag Request
      type: object
    AttachTagResponse:
      description: Attach tag to contact response schema
      example:
        tag_id: 1
        success:
        - 8f3a27ef26
        - 7a5b21ca17
        error:
          invalid_contact:
          - aa3b21ef1a
          has_tag_id:
          - 69cca8a466
          - 084862c319
      properties:
        tag_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        success:
          description: Array of contacts where the tag was successfully attached
          items:
            $ref: '#/components/schemas/contact_id'
          type: array
        error:
          description: Array of contacts where the tag was not successfully attached
          items:
            $ref: '#/components/schemas/contact_id'
          type: array
      title: Attach Tag Response
      type: object
    DeactivateContactsRequest:
      description: Deactivate contacts request schema
      discriminator:
        mapping:
          all: '#/components/schemas/DeactivateContactsAll'
          contacts: '#/components/schemas/DeactivateContactsMany'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/DeactivateContactsAll'
      - $ref: '#/components/schemas/DeactivateContactsMany'
      required:
      - type
      title: Deactivate Contacts Request
      type: object
    DeactivateContactsAll:
      properties:
        type:
          description: Deactivates the contacts in the whole list (excluding removed
            contacts)
          enum:
          - all
          type: string
      title: Deactivate Contacts All
      type: object
    DeactivateContactsMany:
      properties:
        type:
          description: Deactivates the provided contacts (excluding removed contacts)
          enum:
          - contacts
          type: string
        contacts:
          description: Array of contact IDs to activate
          items:
            $ref: '#/components/schemas/contact_body_id'
          minItems: 1
          type: array
          uniqueItems: true
      title: Deactivate Contacts Many
      type: object
    DetachTagRequest:
      description: Detach tag to contact request schema
      example:
        tag_id: 1
      oneOf:
      - $ref: '#/components/schemas/Detach_by_Contacts'
      - $ref: '#/components/schemas/Detach_by_Segment'
      properties:
        tag_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
      required:
      - tag_id
      title: Detach Tag Request
      type: object
    ContactExportRequest:
      description: Contact export request schema
      example:
        callback_url: https://openapi-generator.tech
        format: csv
        fields:
        - fields
        - fields
        segments:
        - segments
        - segments
      properties:
        format:
          description: File extension to export contacts
          enum:
          - csv
          - xml
          type: string
        callback_url:
          description: Url to receive the webhook
          format: uri
          type: string
        segments:
          description: |-
            Array of segment IDs to filter contacts to export. ***Note:*** segments of type ***auto*** and
                                    ***tag*** are not yet supported but they are expected to be supported soon!
          items:
            type: string
          type: array
        fields:
          description: Array of field IDs to be displayed in the exported file
          items:
            type: string
          type: array
      required:
      - format
      title: ContactExportRequest
      type: object
    ExportContactsWebhookData:
      description: Accepted response schema
      example:
        file: https://openapi-generator.tech
      properties:
        file:
          format: uri
          type: string
      title: ExportContactsWebhookData
      type: object
    ContactForgetRequest:
      description: Contact forget request schema
      example:
        contacts:
        - 8f3a27ef26
        - 8f3a27ef26
      properties:
        contacts:
          description: "Array of contact IDs to forget (Max: 1000)"
          items:
            $ref: '#/components/schemas/contact_body_id'
          minItems: 1
          type: array
          uniqueItems: true
      required:
      - contacts
      title: ContactForgetRequest
      type: object
    ImportBulkFileRequest:
      description: Contact import request schema
      oneOf:
      - $ref: '#/components/schemas/ImportBulkRequest'
      - $ref: '#/components/schemas/ImportBulkFileRequestSchema'
      title: Contact import Bulk
      type: object
    ImportBulkFileRequestSchema:
      description: Contact import bulk request schema
      properties:
        mode:
          description: Add new contacts only ('add') or add and replace existing ones
            ('update')
          enum:
          - add
          - update
          type: string
        compare_field:
          description: Field ID which will be mapped for comparison to prevent duplicates)
          example: email
          type: string
        file:
          $ref: '#/components/schemas/ImportBulkFileRequestSchema_file'
        force_empty:
          default: false
          description: If 'true' accepts empty values and erases those fields
          type: boolean
        notify:
          description: Array of IDs of the users to notify
          items:
            type: integer
          type: array
        callback_url:
          description: Url to receive the report
          type: string
      required:
      - compare_field
      - file
      - mode
      title: File
      type: object
    ImportBulkRequest:
      description: Contact import bulk request schema
      properties:
        mode:
          description: Add new contacts only ('add') or add and replace existing ones
            ('update')
          enum:
          - add
          - update
          type: string
        compare_field:
          description: Field ID which will be mapped for comparison to prevent duplicates)
          example: email
          type: string
        contacts:
          description: Array of contacts to import
          items:
            $ref: '#/components/schemas/ContactBulk'
          type: array
        force_empty:
          default: false
          description: If 'true' accepts empty values and erases those fields
          type: boolean
        notify:
          description: Array of IDs of the users to notify
          items:
            type: integer
          type: array
        callback_url:
          description: Url to receive the report
          type: string
      required:
      - compare_field
      - contacts
      - mode
      title: Bulk Object
      type: object
    ContactBulk:
      allOf:
      - $ref: '#/components/schemas/contactBaseExtraBulk'
      - $ref: '#/components/schemas/contactTagsBulk'
      description: Contact schema
      title: ContactBulk
      type: object
    ContactBulkFile:
      allOf:
      - $ref: '#/components/schemas/ContactBulkFile_allOf'
      - $ref: '#/components/schemas/ContactBulkFile_allOf_1'
      - $ref: '#/components/schemas/ContactBulkFile_allOf_2'
      - $ref: '#/components/schemas/ContactBulkFile_allOf_3'
      description: Contact File schema
      title: ContactBulkFile
      type: object
    contactFieldMappingFileBulkSchema:
      properties:
        field_id:
          pattern: "[a-zA-Z0-9_-]*"
          title: FieldId
          type: string
        column_name:
          description: The column name as defined in your file
          type: string
      required:
      - column_name
      - field_id
      title: contactFieldMappingFileBulkSchema
      type: object
    ContactBaseFieldsBulkSchema:
      description: Contact base
      properties:
        base:
          $ref: '#/components/schemas/ContactBaseFieldsBulkSchema_base'
      title: Contact
      type: object
    ContactBaseWithStatusFieldsBulkSchema:
      description: Contact base
      properties:
        base:
          $ref: '#/components/schemas/ContactBaseWithStatusFieldsSchema_base'
      title: Contact
      type: object
    ContactInsideBaseBulk:
      properties:
        contact_id:
          example: 8f3a27ef26
          pattern: "[a-fA-F\\d]{10}"
          readOnly: true
          title: Contact ID
          type: string
        status:
          default: active
          description: Status of the contact
          enum:
          - active
          - inactive
          - removed
          - unconfirmed
          type: string
        consent:
          default: consent
          description: Contact consent
          enum:
          - any
          - consent
          - contract
          - legitimate_interest
          - none
          - protect_vital_interests
          - public_interests
          - required_by_law
          - withdrawn
          readOnly: true
          type: string
        consent_date:
          description: Date and hour of the contact consent
          format: date-time
          readOnly: true
          type: string
        subscription_method:
          description: Contact subscription method
          enum:
          - manual
          - form
          - imported
          - referral
          - api
          readOnly: true
          type: string
        subscription_date:
          description: Date and hour of the contact subscription
          format: date-time
          readOnly: true
          type: string
        subscription_form:
          description: Contact subscription form
          minimum: 0
          readOnly: true
          type: integer
        unsubscription_method:
          description: Contact unsubscription method
          enum:
          - manual
          - form
          - unsubscribe_link
          - bounce
          - api
          - ""
          readOnly: true
          type: string
        unsubscription_reason:
          description: Contact unsubscription reason
          enum:
          - not_interested
          - lack_of_time
          - email_address_change
          - spam
          - other
          - ""
          readOnly: true
          type: string
        unsubscription_observation:
          description: Contact unsubscription observation
          example: ""
          readOnly: true
          type: string
        unsubscription_date:
          description: Contact unsubscription date
          format: date-time
          readOnly: true
          type: string
        change_date:
          description: Last modification date of the contact
          format: date
          readOnly: true
          type: string
        first_name:
          description: First name of the contact
          example: John
          type: string
        last_name:
          description: Last name of the contact
          example: Doe
          type: string
        birth_date:
          description: Birth date of the contact
          example: 1975-01-10
          format: date
          type: string
        language:
          $ref: '#/components/schemas/language'
        email:
          description: Email of the contact
          example: example@e-goi.com
          type: string
        email_status:
          default: active
          description: Email channel status
          enum:
          - active
          - inactive
          readOnly: true
          type: string
        cellphone:
          description: Cellphone of the contact
          example: 351-300404336
          type: string
        cellphone_status:
          default: active
          description: Cellphone channel status
          enum:
          - active
          - inactive
          readOnly: true
          type: string
        phone:
          description: Phone of the contact
          example: 351-300404336
          type: string
        phone_status:
          default: active
          description: Phone channel status
          enum:
          - active
          - inactive
          readOnly: true
          type: string
        push_token_android:
          description: Android push token of the contact
          items:
            $ref: '#/components/schemas/ContactBaseWithStatusNoRemovedFieldsSchema_base_push_token_android_inner'
          type: array
        push_token_ios:
          description: IOS push token of the contact
          items:
            $ref: '#/components/schemas/ContactBaseWithStatusNoRemovedFieldsSchema_base_push_token_ios_inner'
          type: array
      type: object
    ContactExtraFieldsBulkSchema:
      description: Contact Extra schema
      properties:
        extra:
          description: Array of the contact's extra fields
          items:
            $ref: '#/components/schemas/ContactExtraFieldsBulk'
          type: array
      title: Contact
      type: object
    contactStatusFieldsBulkSchema:
      description: Contact status schema
      properties:
        email_status:
          description: Email channel status
          enum:
          - active
          - inactive
          type: string
        cellphone_status:
          description: Cellphone channel status
          enum:
          - active
          - inactive
          type: string
        phone_status:
          description: Phone channel status
          enum:
          - active
          - inactive
          type: string
      title: Contact
      type: object
    contactBaseExtraBulk:
      allOf:
      - $ref: '#/components/schemas/ContactBaseFieldsBulkSchema'
      - $ref: '#/components/schemas/ContactExtraFieldsBulkSchema'
      description: Contact Base and Extra schema
      title: Contact
      type: object
    contactBaseStatusExtraBulk:
      allOf:
      - $ref: '#/components/schemas/ContactBaseWithStatusFieldsBulkSchema'
      - $ref: '#/components/schemas/ContactExtraFieldsBulkSchema'
      description: Contact schema
      title: Contact
      type: object
    contactTagsBulk:
      properties:
        tags:
          description: Array of tags for this contact
          example:
          - 1
          - 2
          items:
            type: integer
          readOnly: true
          type: array
      type: object
    ContactExtraFieldsBulk:
      oneOf:
      - $ref: '#/components/schemas/ContactExtraFieldDate'
      - $ref: '#/components/schemas/ContactExtraFieldText'
      - $ref: '#/components/schemas/ContactExtraFieldCellphoneBulk'
      - $ref: '#/components/schemas/ContactExtraFieldPhoneBulk'
      - $ref: '#/components/schemas/ContactExtraFieldNumber'
      - $ref: '#/components/schemas/ContactExtraFieldEmailBulk'
      - $ref: '#/components/schemas/ContactExtraFieldOptions'
      type: object
    ContactExtraFieldCellphoneBulk:
      properties:
        field_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        format:
          description: Extra field format
          enum:
          - cellphone
          readOnly: true
          type: string
        value:
          description: Extra field value
          type: string
      title: ContactExtraFieldCellphone
      type: object
    ContactExtraFieldPhoneBulk:
      properties:
        field_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        format:
          description: Extra field format
          enum:
          - phone
          readOnly: true
          type: string
        value:
          description: Extra field value
          type: string
      title: ContactExtraFieldPhone
      type: object
    ContactExtraFieldEmailBulk:
      properties:
        field_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        format:
          description: Extra field format
          enum:
          - email
          readOnly: true
          type: string
        value:
          description: Extra field value
          type: string
        status:
          description: Extra field status
          enum:
          - active
          - inactive
          type: string
      title: ContactExtraFieldEmail
      type: object
    RemoveRequest:
      description: Remove contact request schema
      example:
        data:
        - null
        - null
      properties:
        data:
          items:
            $ref: '#/components/schemas/RequestItemsUnsubscribe'
          type: array
      title: Remove Request
      type: object
    RemoveResponse:
      description: Remove contact response schema
      example:
        success:
        - 8f3a27ef26
        - 8f3a27ef26
        errors:
          invalid_data_type:
          - 44fc463242
          contact_not_in_list:
          - a47a947e2b
          invalid_unsubscription_reason:
          - cbb0077994
          - be9715c108
          - 649a15f483
          contact_already_removed:
          - a41a247e21
          invalid_unsubscription_method:
          - 732711d708
          - ba5b2b14aa
      properties:
        success:
          items:
            $ref: '#/components/schemas/contact_id'
          type: array
        errors:
          $ref: '#/components/schemas/RemoveResponse_errors'
      title: Remove Response
      type: object
    RequestItemsUnsubscribe:
      allOf:
      - $ref: '#/components/schemas/RequestItemsUnsubscribe_allOf'
      - $ref: '#/components/schemas/unsubscriptionObject'
      type: object
    StartAutomationRequest:
      description: Start automation to the provided contacts
      example:
        automation_id: 1
        action_id: 1
        contacts:
        - 8f3a27ef26
        - aa3b21ef1a
        - 7a5b21ca17
      properties:
        automation_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        action_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        contacts:
          description: Array of contact IDs to start automation
          items:
            $ref: '#/components/schemas/contact_body_id'
          type: array
      required:
      - action_id
      - automation_id
      - contacts
      title: Start Automation
      type: object
    StartAutomationResponse:
      description: Start automation to the provided contacts
      example:
        automation_id: 1
        action_id: 1
        success:
        - 8f3a27ef26
        - 7a5b21ca17
        error:
          already_in_queue:
          - aa3b21ef1a
      properties:
        automation_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        action_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        success:
          description: Array of contacts where the automation was successfully started
          items:
            $ref: '#/components/schemas/contact_id'
          type: array
        error:
          description: Array of contacts where the automation was not successfully
            started
          items:
            $ref: '#/components/schemas/contact_id'
          type: array
      title: Start Automation
      type: object
    UpdateContactsRequest:
      allOf:
      - $ref: '#/components/schemas/ContactsActionUpdateContactsSchema'
      - $ref: '#/components/schemas/ContactBaseWithStatusFieldsNoTokensSchema'
      - $ref: '#/components/schemas/ContactExtraFieldsSchema'
      description: Updates contacts request schema
      title: Updates contacts Request
      type: object
    ContactsActionUpdateContactsSchema:
      description: Updates contacts request schema
      oneOf:
      - $ref: '#/components/schemas/Update_by_Contact'
      - $ref: '#/components/schemas/Update_by_Segment'
      - $ref: '#/components/schemas/Update_for_All'
      title: Updates contacts Request
      type: object
    ContactActivity:
      description: Contact activity schema
      oneOf:
      - $ref: '#/components/schemas/ContactActivityClick'
      - $ref: '#/components/schemas/ContactOtherActivity'
      title: Contact Activity
      type: object
    ContactOtherActivity:
      description: Other contact activity schema
      properties:
        date:
          description: The date and time
          format: date-time
          title: date_time
          type: string
        action_name:
          description: Action name
          enum:
          - email_open
          - forward
          - conversion
          - email_send
          - sms_send
          - voice_send
          - mms_send
          - sms_report
          - voice_report
          - invitation_send
          - invitation_open
          - mms_open
          - unsubscribe
          - email_soft_bounce
          - email_hard_bounce
          - subscription
          - resubscription
          - unsubscribe_reason
          - facebook_like
          - social_share
          - unsubscribe_manual
          - double_optin
          - double_optin_resend
          - email_spam_complaint
          - email_field_disable
          - cellphone_field_disable
          - phone_field_disable
          - unsubscribe_api
          - email_field_enable
          - cellphone_field_enable
          - phone_field_enable
          - edit_subscription
          - double_optedit
          - automation_event
          - push_send
          - push_open
          - push_received
          - push_error
          - push_canceled
          - reply_to_email
          - web_push_send
          - web_push_delivered
          - web_push_open
          - web_push_bounce
          - web_push_subscription
          - web_push_unsubscription
          - add_push_contact
          - remove_push_contact
          - forget_subscription
          - change_consent
          - push_unsubscription
          type: string
      title: Other Activities
      type: object
    ContactActivityAbstractActionsWithData:
      description: Contact activity schema
      properties:
        date:
          description: The date and time
          format: date-time
          title: date_time
          type: string
        action_name:
          description: Action name
          enum:
          - email_click
          - push_click
          - web_push_click
          type: string
      title: Contact Activity
      type: object
    ContactActivityClick:
      allOf:
      - $ref: '#/components/schemas/ContactActivityClick_allOf'
      - $ref: '#/components/schemas/ContactActivityAbstractActionsWithData'
      description: Contact click activity schema
      title: Click Activities
      type: object
    PostContactsConflict:
      allOf:
      - $ref: '#/components/schemas/unique_field_in_use'
      - $ref: '#/components/schemas/BaseConflict'
      description: Error schema for post lists conflicts
      title: PostContactsConflict
      type: object
    unique_field_in_use:
      description: Error schema for conflict when a provided field is already in use
      properties:
        errors:
          $ref: '#/components/schemas/unique_field_in_use_errors'
      title: unique_field_in_use
      type: object
    ContactSearchResponse:
      description: Returned contacts
      example:
        list_id: 1
        contact_id: 8f3a27ef26
      properties:
        contact_id:
          example: 8f3a27ef26
          pattern: "[a-fA-F\\d]{10}"
          readOnly: true
          title: Contact ID
          type: string
        list_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
      title: Contact Search Response
      type: object
    CName:
      description: CName schema
      example:
        cname_id: 1
        value: mkt.example.com
        status: verified
      properties:
        cname_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        value:
          description: CName value
          example: mkt.example.com
          type: string
        status:
          description: CName status
          enum:
          - verified
          - unverified
          - recent
          - invalid
          - private
          readOnly: true
          type: string
      title: CName
      type: object
    CNamePost:
      description: CName schema
      example:
        value: mkt.example.com
      properties:
        value:
          description: CName value
          example: mkt.example.com
          type: string
      title: CName
      type: object
    PostCNameConflict:
      allOf:
      - $ref: '#/components/schemas/cname_exists'
      - $ref: '#/components/schemas/BaseConflict'
      description: Error schema for post lists conflicts
      title: PostCNameConflict
      type: object
    cname_exists:
      description: Error schema for conflict when the provided cname already exists
      properties:
        errors:
          $ref: '#/components/schemas/cname_exists_errors'
      title: cname_exists
      type: object
    Cart:
      description: Cart schema
      example:
        cart_id: cart1
        cart_total: 1
        contact: null
        products:
        - null
        - null
      properties:
        cart_id:
          description: Cart ID is any non-empty unique string
          example: cart1
          type: string
        cart_total:
          description: Ecommerce cart total
          example: 1
          format: double
          type: number
        contact:
          $ref: '#/components/schemas/Contact_1'
        products:
          description: List of products
          items:
            $ref: '#/components/schemas/Product'
          type: array
      title: Cart
      type: object
    CartPatchRequest:
      description: Cart patch request schema
      properties:
        cart_total:
          description: Ecommerce cart total
          example: 1
          format: double
          type: number
        contact:
          $ref: '#/components/schemas/Contact_2'
        products:
          description: List of products
          items:
            $ref: '#/components/schemas/Product'
          type: array
      title: CartPatchRequest
      type: object
    CreateCartResponse:
      description: Create cart response schema
      properties:
        cart_id:
          example: 8f3a27ef26
          pattern: "[a-fA-F\\d]{10}"
          readOnly: true
          title: Cart ID
          type: string
      title: CreateCartResponse
      type: object
    cart_id:
      example: 8f3a27ef26
      pattern: "[a-fA-F\\d]{10}"
      readOnly: true
      title: Cart ID
      type: string
    Catalog:
      description: Catalog schema
      example:
        catalog_id: 1
        created: ""
        language: en
        currency: eur
        title: Catalog title
        updated: ""
      properties:
        catalog_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        title:
          description: Title of the catalog
          example: Catalog title
          type: string
        language:
          description: Language of the catalog
          example: en
          type: string
        currency:
          description: Currency of the catalog
          example: eur
          type: string
        created:
          allOf:
          - $ref: '#/components/schemas/date_time'
          readOnly: true
        updated:
          allOf:
          - $ref: '#/components/schemas/date_time'
          readOnly: true
      title: Catalog
      type: object
    CatalogPost:
      description: Catalog schema
      properties:
        title:
          description: Title of the catalog
          example: Catalog title
          type: string
        language:
          description: Language of the catalog
          example: en
          type: string
        currency:
          description: Currency of the catalog
          example: eur
          type: string
      title: Catalog
      type: object
    CatalogPostRequest:
      allOf:
      - $ref: '#/components/schemas/CatalogPost'
      description: Catalog post request schema
      required:
      - currency
      - language
      - title
      title: CatalogPostRequest
      type: object
    CreateOrder:
      description: Create data
      example:
        cart_id: cart1
        contact: null
        order_total: 1
        order_id: "100"
        products:
        - null
        - null
      properties:
        order_total:
          description: Ecommerce cart total
          example: 1
          format: double
          type: number
        order_id:
          description: Order ID is any non-empty unique string
          example: "100"
          type: string
        cart_id:
          description: Cart ID that originated this order
          example: cart1
          type: string
        contact:
          $ref: '#/components/schemas/Contact_1'
        products:
          description: List of products
          items:
            $ref: '#/components/schemas/Product'
          type: array
      required:
      - order_id
      title: CreateOrder
      type: object
    Order:
      description: Order schema
      properties:
        order_id:
          description: Ecommerce order id
          example: "100"
          type: string
        cart_total:
          description: Ecommerce cart total
          example: 1
          format: double
          type: number
        cart_id:
          description: Cart ID is any non-empty unique string
          example: "100"
          type: string
        contact:
          $ref: '#/components/schemas/Contact_2'
        products:
          description: List of products
          items:
            $ref: '#/components/schemas/Product'
          type: array
      title: Order
      type: object
    OrderPatchRequest:
      description: Order patch request schema
      properties:
        cart_total:
          description: Ecommerce cart total
          example: 1
          format: double
          type: number
        cart_id:
          description: Cart ID is any non-empty unique string
          example: "100"
          type: string
        contact:
          $ref: '#/components/schemas/Contact_2'
        products:
          description: List of products
          items:
            $ref: '#/components/schemas/Product'
          type: array
      title: OrderPatchRequest
      type: object
    ImportOrdersBulk:
      description: Orders import bulk request schema
      items:
        $ref: '#/components/schemas/ImportOrdersBulkBulkRequest'
      title: ImportOrdersBulk
      type: array
    ImportOrdersBulkBulkRequest:
      description: Order data
      example:
        date: ""
        revenue: 100
        contact_id: customer@e-goi.com
        order_id: "100"
        items:
        - quantity: 2
          price: 100
          name: Product 1
          id: "100"
          category: "10"
        - quantity: 2
          price: 100
          name: Product 1
          id: "100"
          category: "10"
        store_url: https://www.e-goi.com
      properties:
        order_id:
          description: Ecommerce order id
          example: "100"
          type: string
        contact_id:
          description: Contact ID is any non-empty unique string identifying the user
            (such as an email address or e-goi uid)
          example: customer@e-goi.com
          type: string
        revenue:
          description: Ecommerce order revenue
          example: 100
          minimum: 0
          type: number
        store_url:
          description: Ecommerce store url
          example: https://www.e-goi.com
          type: string
        date:
          allOf:
          - $ref: '#/components/schemas/date_time'
          description: "Ecommerce order date (For technical reasons, all orders synchronized\
            \ will have the date of synchronization.)"
        items:
          description: Array of ordered products
          items:
            $ref: '#/components/schemas/ImportOrdersBulkBulkRequestItems'
          type: array
      required:
      - date
      - items
      - order_id
      - revenue
      - store_url
      title: ImportOrdersBulkBulkRequest
      type: object
    SingleOrderObject:
      description: Single Order data
      properties:
        order_id:
          description: Ecommerce order id
          example: "100"
          type: string
        revenue:
          description: Ecommerce order revenue
          example: 100
          minimum: 0
          type: number
        store_url:
          description: Ecommerce store url
          example: https://www.e-goi.com
          type: string
        items:
          description: Array of ordered products
          items:
            $ref: '#/components/schemas/ImportOrdersBulkBulkRequestItems'
          type: array
      required:
      - date
      - items
      - order_id
      - revenue
      - store_url
      title: SingleOrderObject
      type: object
    SingleCartObject:
      description: Single Cart data
      properties:
        revenue:
          description: Ecommerce cart revenue
          example: 100
          minimum: 0
          type: number
        store_url:
          description: Ecommerce store url
          example: https://www.e-goi.com
          type: string
        items:
          description: Array of cart's products
          items:
            $ref: '#/components/schemas/ImportOrdersBulkBulkRequestItems'
          type: array
      required:
      - date
      - items
      - revenue
      - store_url
      title: SingleCartObject
      type: object
    ImportOrdersBulkBulkRequestItems:
      description: Ecommerce Order Items
      example:
        quantity: 2
        price: 100
        name: Product 1
        id: "100"
        category: "10"
      properties:
        id:
          description: Ecommerce order item id
          example: "100"
          type: string
        name:
          description: Ecommerce order item name
          example: Product 1
          type: string
        category:
          description: Ecommerce order item category id (comma separated if more than
            one)
          example: "10"
          type: string
        price:
          description: Ecommerce order item price
          example: 100
          minimum: 0
          type: number
        quantity:
          description: Ecommerce order item quantity
          example: 2
          minimum: 0
          type: integer
      required:
      - id
      - name
      title: Contact
      type: object
    CreateOrderResponse:
      description: Create Order Response
      properties:
        order_id:
          description: Ecommerce order id
          example: "100"
          type: string
      title: CreateOrderResponse
      type: object
    BasicProduct:
      description: Basic Product schema
      properties:
        product_identifier:
          description: The ID of the product in your store
          pattern: "[a-zA-Z0-9\\_\\-.]"
          type: string
        catalog_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        name:
          description: Name of the product
          example: Product name
          type: string
        description:
          description: Description of the product
          example: Product description
          type: string
        sku:
          description: Stock Keeping Unit
          type: string
        upc:
          description: Universal Product Code
          type: string
        ean:
          description: European Article Numbering
          type: string
        gtin:
          description: Global Trade Item Number
          type: string
        mpn:
          description: Manufacturer Part Number
          type: string
        link:
          description: Link for the product
          type: string
        image_link:
          description: Link for the product image
          type: string
        price:
          default: 0
          description: Price of the product
          example: 10
          format: double
          type: number
        sale_price:
          default: 0
          description: Sale price of the product
          example: 10
          format: double
          type: number
        brand:
          description: Brand of the product
          type: string
      title: BasicProduct
      type: object
    Product:
      allOf:
      - $ref: '#/components/schemas/Product_allOf'
      - $ref: '#/components/schemas/BasicProduct'
      description: Product schema
      title: Product
      type: object
    ProductPostRequest:
      allOf:
      - $ref: '#/components/schemas/Product'
      description: Product post request schema
      required:
      - name
      - product_identifier
      title: ProductPostRequest
      type: object
    ProductPatchRequest:
      description: Product patch request schema
      example:
        gtin: gtin
        image_link: image_link
        link: link
        description: Product description
        upc: upc
        mpn: mpn
        sale_price: 10
        related_products:
          external_product_id:
          - external_product_id
          - external_product_id
        custom_attributes:
        - alias: sale_price_5
          value: "15.45"
        - alias: sale_price_5
          value: "15.45"
        ean: ean
        price: 10
        name: Product name
        categories:
        - Clothing>Women>Blue Jeans
        - Clothing>Women>Blue Jeans
        sku: sku
        brand: brand
      properties:
        name:
          description: Name of the product
          example: Product name
          type: string
        description:
          description: Description of the product
          example: Product description
          type: string
        sku:
          description: Stock Keeping Unit
          type: string
        upc:
          description: Universal Product Code
          type: string
        ean:
          description: European Article Numbering
          type: string
        gtin:
          description: Global Trade Item Number
          type: string
        mpn:
          description: Manufacturer Part Number
          type: string
        link:
          description: Link for the product
          type: string
        image_link:
          description: Link for the product image
          type: string
        price:
          default: 0
          description: Price of the product
          example: 10
          format: double
          type: number
        sale_price:
          default: 0
          description: Sale price of the product
          example: 10
          format: double
          type: number
        brand:
          description: Brand of the product
          type: string
        categories:
          description: |-
            Array of product categories, using the character '>' as delimiter for the breadcrumb
                                    syntax
          items:
            example: Clothing>Women>Blue Jeans
            type: string
          type: array
        related_products:
          $ref: '#/components/schemas/ProductPatchRequest_related_products'
        custom_attributes:
          description: Custom attributes
          items:
            $ref: '#/components/schemas/ProductCustomAttributes'
          type: array
      title: ProductPatchRequest
      type: object
    ProductBulkRequest:
      description: Product bulk request schema
      example:
        mode: update
        products:
        - null
        - null
      properties:
        products:
          description: Collection of products to import. Products having an incorrect
            format will be ignored
          items:
            $ref: '#/components/schemas/Product'
          type: array
        mode:
          default: update
          description: |-
            How the import will be processed:
             *                      'rewrite' - catalog content will be erased and then the imported products will be added
             *                      'add' - adds imported products to the catalog without replacing any content. Duplicates will
                                    not be added
             *                      'update' - adds imported products to the catalog and updates any duplicates found
          enum:
          - rewrite
          - add
          - update
          type: string
      required:
      - products
      title: ProductBulkRequest
      type: object
    ProductCustomAttributes:
      description: Product Custom Attributes
      example:
        alias: sale_price_5
        value: "15.45"
      properties:
        alias:
          description: Custom attribute key (lower case without spaces)
          example: sale_price_5
          type: string
        value:
          description: Custom attribute value
          example: "15.45"
          type: string
      title: Product Custom Attributes
      type: object
    PostProductsConflict:
      allOf:
      - $ref: '#/components/schemas/product_already_exists'
      - $ref: '#/components/schemas/BaseConflict'
      description: Error schema for post products conflicts
      title: PostProductsConflict
      type: object
    product_already_exists:
      description: Error schema for conflict when the provided product already exists
        in the catalog
      properties:
        errors:
          $ref: '#/components/schemas/product_already_exists_errors'
      title: product_already_exists
      type: object
    Field:
      description: Field schema
      example:
        field_id: field_id
        unique: true
        name: name
        format: date
      properties:
        field_id:
          description: Field ID
          readOnly: true
          type: string
        name:
          description: Name of the field
          type: string
        format:
          description: Field format
          enum:
          - date
          - text
          - cellphone
          - phone
          - number
          - email
          - options
          type: string
        unique:
          description: "True if the field is unique, false otherwise"
          type: boolean
      readOnly: true
      required:
      - format
      - name
      title: Field
      type: object
    ComplexField:
      allOf:
      - $ref: '#/components/schemas/ComplexField_allOf'
      - $ref: '#/components/schemas/Field'
      description: Complex field schema
      title: ComplexField
      type: object
    PatchRequestField:
      description: Patch request field schema
      example:
        unique: true
        name: Field name
      properties:
        name:
          description: Name of the field
          example: Field name
          type: string
        unique:
          description: "True if the field is unique, false otherwise"
          type: boolean
      readOnly: true
      title: PatchRequestField
      type: object
    PatchRequestBaseField:
      description: Patch request base field schema
      example:
        unique: true
      properties:
        unique:
          description: "True if the field is unique, false otherwise"
          type: boolean
      readOnly: true
      title: PatchRequestBaseField
      type: object
    DeleteFieldsConflict:
      allOf:
      - $ref: '#/components/schemas/field_in_use'
      - $ref: '#/components/schemas/BaseConflict'
      description: Error schema for delete fields conflicts
      title: DeleteFieldsConflict
      type: object
    field_in_use:
      description: Error schema for conflict when a field is in use
      properties:
        errors:
          $ref: '#/components/schemas/field_in_use_errors'
      title: field_in_use
      type: object
    FieldOption:
      description: Field option schema
      example:
        br: Brazilian portuguese example
        de: German example
        pt: Portuguese example
        en: English example
        option_id: 1
        fr: French example
        hu: Hungarian example
        es: Spanish example
      properties:
        option_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        en:
          description: English option value
          example: English example
          type: string
        pt:
          description: Portuguese option value
          example: Portuguese example
          type: string
        br:
          description: Brazilian portuguese option value
          example: Brazilian portuguese example
          type: string
        es:
          description: Spanish option value
          example: Spanish example
          type: string
        de:
          description: German option value
          example: German example
          type: string
        hu:
          description: Hungarian option value
          example: Hungarian example
          type: string
        fr:
          description: French option value
          example: French example
          type: string
      title: FieldOption
      type: object
    FieldOptionPost:
      description: Field option schema
      example:
        br: Brazilian portuguese example
        de: German example
        pt: Portuguese example
        en: English example
        fr: French example
        hu: Hungarian example
        es: Spanish example
      properties:
        en:
          description: English option value
          example: English example
          type: string
        pt:
          description: Portuguese option value
          example: Portuguese example
          type: string
        br:
          description: Brazilian portuguese option value
          example: Brazilian portuguese example
          type: string
        es:
          description: Spanish option value
          example: Spanish example
          type: string
        de:
          description: German option value
          example: German example
          type: string
        hu:
          description: Hungarian option value
          example: Hungarian example
          type: string
        fr:
          description: French option value
          example: French example
          type: string
      title: FieldOption
      type: object
    Form:
      description: Form schema
      properties:
        form_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        internal_title:
          default: $request.body#/title
          description: Internal title of the form
          example: Form title
          type: string
        title:
          description: Title of the form
          example: Form title
          type: string
        language:
          $ref: '#/components/schemas/language'
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        default:
          description: "True if this is the default form in the list, false otherwise"
          example: false
          type: boolean
        owner:
          example: 1
          minimum: 1
          title: ID
          type: integer
        status:
          description: Status of the form
          enum:
          - active
          - unpublished
          - cloned
          - deleted
          example: active
          readOnly: true
          type: string
        created:
          description: The date and time
          format: date-time
          title: date_time
          type: string
        updated:
          description: The date and time
          format: date-time
          title: date_time
          type: string
      required:
      - title
      title: Form
      type: object
    List:
      description: List schema
      example:
        internal_name: Internal name
        list_id: 1
        group_id: 0
        created: ""
        public_name: Public name
        updated: ""
        status: active
      properties:
        list_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        internal_name:
          description: Internal name of the list
          example: Internal name
          type: string
        public_name:
          description: Public name of the list
          example: Public name
          type: string
        status:
          description: Status of the list
          enum:
          - active
          - blocked
          example: active
          readOnly: true
          type: string
        group_id:
          description: ID of the list group
          readOnly: true
          type: integer
        created:
          allOf:
          - $ref: '#/components/schemas/date_time'
          readOnly: true
        updated:
          allOf:
          - $ref: '#/components/schemas/date_time'
          readOnly: true
      required:
      - language
      - public_name
      title: List
      type: object
    ComplexList:
      allOf:
      - $ref: '#/components/schemas/ComplexList_allOf'
      - $ref: '#/components/schemas/List'
      description: Complex list schema
      title: ComplexList
      type: object
    PostRequestList:
      description: Post request lists schema
      example:
        internal_name: Internal name
        public_name: Public name
      properties:
        internal_name:
          description: Internal name of the list
          example: Internal name
          type: string
        public_name:
          description: Public name of the list. Defaults to internal name if not set
          example: Public name
          type: string
      required:
      - internal_name
      title: PostRequestList
      type: object
    PatchRequestList:
      description: Patch request lists schema
      example:
        internal_name: Internal name
        group_id: 1
        public_name: Public name
      properties:
        internal_name:
          description: Internal name of the list
          example: Internal name
          type: string
        public_name:
          description: Public name of the list
          example: Public name
          type: string
        group_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
      title: PatchRequestList
      type: object
    PostListsConflict:
      allOf:
      - $ref: '#/components/schemas/list_limit_reached'
      - $ref: '#/components/schemas/BaseConflict'
      description: Error schema for post lists conflicts
      title: PostListsConflict
      type: object
    DeleteListsConflict:
      allOf:
      - $ref: '#/components/schemas/BaseConflict'
      description: Error schema for delete lists conflicts
      oneOf:
      - $ref: '#/components/schemas/has_queued_operations'
      - $ref: '#/components/schemas/has_automations'
      - $ref: '#/components/schemas/has_push_app'
      - $ref: '#/components/schemas/has_web_push_site'
      - $ref: '#/components/schemas/has_campaigns_last_thirty_days'
      title: DeleteListsConflict
      type: object
    DeleteListsConflictsErrors:
      oneOf:
      - $ref: '#/components/schemas/has_queued_operations'
      - $ref: '#/components/schemas/has_automations'
      - $ref: '#/components/schemas/has_push_app'
      - $ref: '#/components/schemas/has_web_push_site'
      - $ref: '#/components/schemas/has_campaigns_last_thirty_days'
      title: DeleteListsConflictsErrors
      type: object
    list_limit_reached:
      description: Error schema for conflict when the account reaches the maximum
        number of lists allowed in its plan
      properties:
        errors:
          $ref: '#/components/schemas/list_limit_reached_errors'
      title: list_limit_reached
      type: object
    has_queued_operations:
      description: Error schema for conflict when a list has queued operations
      properties:
        errors:
          $ref: '#/components/schemas/has_queued_operations_errors'
      title: has_queued_operations
      type: object
    has_automations:
      description: Error schema for conflict when a list has automations
      properties:
        errors:
          $ref: '#/components/schemas/has_automations_errors'
      title: has_automations
      type: object
    has_push_app:
      description: Error schema for conflict when a list has push apps
      properties:
        errors:
          $ref: '#/components/schemas/has_push_app_errors'
      title: has_push_app
      type: object
    has_web_push_site:
      description: Error schema for conflict when a list has webpush sites
      properties:
        errors:
          $ref: '#/components/schemas/has_web_push_site_errors'
      title: has_web_push_site
      type: object
    has_campaigns_last_thirty_days:
      description: Error schema for conflict when a list has campaigns sent in the
        last thirty days
      properties:
        errors:
          $ref: '#/components/schemas/has_campaigns_last_thirty_days_errors'
      title: has_campaigns_last_thirty_days
      type: object
    EnableTeConflict:
      allOf:
      - $ref: '#/components/schemas/EnableTeConflictsErrors'
      - $ref: '#/components/schemas/BaseConflict'
      description: Error schema for lists conflicts
      title: EnableTeConflict
      type: object
    EnableTeConflictsErrors:
      allOf:
      - $ref: '#/components/schemas/domain_already_defined'
      - $ref: '#/components/schemas/domain_list_required'
      title: EnableTeConflictsErrors
    domain_already_defined:
      description: Error schema for conflict when a domain was already active
      properties:
        errors:
          $ref: '#/components/schemas/domain_already_defined_errors'
      title: domain_already_defined
      type: object
    domain_list_required:
      description: Error schema for conflict when a domain needs a list
      properties:
        errors:
          $ref: '#/components/schemas/domain_list_required_errors'
      title: domain_list_required
      type: object
    EnableTransactionalConflict:
      allOf:
      - $ref: '#/components/schemas/EnableTransactionalConflictsErrors'
      - $ref: '#/components/schemas/BaseConflict'
      description: Error schema for lists of transactional conflicts
      title: EnableTransactionalConflict
      type: object
    EnableTransactionalConflictsErrors:
      oneOf:
      - $ref: '#/components/schemas/client_already_enabled'
      - $ref: '#/components/schemas/client_is_being_enabled'
      title: EnableTransactionalConflictsErrors
    client_already_enabled:
      description: Error schema for conflict when a client is already enabled
      properties:
        errors:
          $ref: '#/components/schemas/client_already_enabled_errors'
      title: client_already_enabled
      type: object
    client_is_being_enabled:
      description: Error schema for conflict when a when a client is in the process
        of being enabled
      properties:
        errors:
          $ref: '#/components/schemas/client_is_being_enabled_errors'
      title: client_is_being_enabled
      type: object
    GeneralInfo:
      allOf:
      - $ref: '#/components/schemas/GeneralInfo_allOf'
      description: General info schema
      example:
        general_info:
          name: Name Test
          website: www.yoursite.com
          cellphone: 351-910000000
          client_id: "123456"
          company_size: 2
          business_sector:
            business_sector_id: 123
            name: Name of the business sector
      title: General Info
      type: object
    BillingInfo:
      allOf:
      - $ref: '#/components/schemas/BillingInfo_allOf'
      description: Billing Info schema
      example:
        billing_info:
          type: company
          company_legal_name: your company legal name
          vat_number: 1234546
          country:
            country_code: PT
          city: Porto
          state: SP
          address1: Porto
          address2: Matosinhos
          zip_code: 1234-123
          invoice_comments: your invoice comments
      title: Billing Info
      type: object
    PlanInfo:
      description: Plan Info schema
      example:
        plan_info:
          type: starter
      properties:
        plan_info:
          $ref: '#/components/schemas/PlanInfo_plan_info'
      title: Plan Info
      type: object
    BalanceInfo:
      description: Balance Info schema
      example:
        balance_info:
          balance: "123.45"
          currency: EUR
      properties:
        balance_info:
          $ref: '#/components/schemas/BalanceInfo_balance_info'
      title: Balance Info
      type: object
    ModuleInfo:
      description: Module Info schema
      example:
        module_info:
          te:
            enabled: true
      properties:
        module_info:
          $ref: '#/components/schemas/ModuleInfo_module_info'
      title: Module Info
      type: object
    MyAccount:
      allOf:
      - $ref: '#/components/schemas/GeneralInfo'
      - $ref: '#/components/schemas/BillingInfo'
      - $ref: '#/components/schemas/PlanInfo'
      - $ref: '#/components/schemas/BalanceInfo'
      - $ref: '#/components/schemas/ModuleInfo'
      description: My Account schema
      title: My Account
      type: object
    TeResponse:
      allOf:
      - $ref: '#/components/schemas/TeResponse_allOf'
      description: TeResponse schema
      example:
        result: true
        response: success
      title: TeResponse
      type: object
    Operation:
      description: Operation schema
      example:
        created: ""
        operation_id: 1
        type: import_contacts
        operation_data:
          internal_name: internal_name
          campaign_hash: campaign_hash
        created_by: 1
        status: queued
        start_date: ""
      properties:
        operation_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        operation_data:
          $ref: '#/components/schemas/Operation_operation_data'
        type:
          description: Type of operation
          enum:
          - import_contacts
          - update_contacts
          - export_contacts
          - export_reports
          - advanced_report
          - email
          - sms
          - smart_sms
          - voice
          - push
          - webpush
          - ads
          - social
          - segment_generation
          - mass_operation
          - unify
          type: string
        status:
          description: State of the operation
          enum:
          - queued
          - processing
          - executing
          - paused
          type: string
        created_by:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        created:
          allOf:
          - $ref: '#/components/schemas/date_time'
        start_date:
          allOf:
          - $ref: '#/components/schemas/date_time'
      title: Operation
      type: object
    OperationActionRequest:
      description: Operation action request schema
      example:
        operations:
        - 1
        - 1
      properties:
        operations:
          description: Array of operation IDs
          items:
            $ref: '#/components/schemas/queryId'
          type: array
      required:
      - operations
      title: OperationActionRequest
      type: object
    OperationActionResponse:
      description: Operation action response schema
      example:
        success:
        - 1
        - 2
        error:
          invalid_operation_action: []
          operation_not_found: []
      properties:
        success:
          description: Array of operation IDs referencing successful operations
          items:
            $ref: '#/components/schemas/id'
          type: array
        error:
          $ref: '#/components/schemas/OperationActionResponse_error'
      title: OperationActionResponse
      type: object
    Ping:
      description: Ping schema
      example:
        result: pong
      properties:
        result:
          example: pong
          type: string
      title: Ping
      type: object
    AppStructure:
      description: Structure of an E-goi app.
      example:
        two_steps_config: two_steps_config
        development: true
        created: created
        name: name
        description: description
        list:
          internal_name: internal_name
          id: 0
        app_id: app_id
        updated: updated
      properties:
        app_id:
          description: The ID of the app.
          type: string
        list:
          $ref: '#/components/schemas/AppStructure_list'
        name:
          description: The name of the app.
          type: string
        description:
          description: The description of the app.
          type: string
        two_steps_config:
          description: The column of the list used to map the token.
          type: string
        development:
          description: Is app a development app.
          type: boolean
        created:
          description: When the app was created.
          type: string
        updated:
          description: The last time the app was updated.
          type: string
      title: App Structure
      type: object
    PushEvent:
      description: Push event schema
      example:
        os: os
        message_hash: message_hash
        device_id: 0
        contact: contact
        event: event
      properties:
        os:
          description: The OS of the device.
          type: string
        contact:
          description: The UID of the contact.
          type: string
        message_hash:
          description: The hash of the campaign related to the notification.
          type: string
        event:
          description: "The event to register (open, canceled)."
          type: string
        device_id:
          description: The E-goi's ID of the device.
          type: integer
      required:
      - contact
      - device_id
      - event
      - message_hash
      - os
      title: Push Event
      type: object
    PushResponse:
      description: The stucture of the responses.
      example:
        success: true
      properties:
        success:
          description: The success status of the request.
          type: boolean
      title: Push Response
      type: object
    PushToken:
      description: Push token schema
      example:
        two_steps_data:
          field: field
          value: value
        os: os
        token: token
      properties:
        os:
          description: The OS of the device.
          type: string
        token:
          description: The Firebase token.
          type: string
        two_steps_data:
          $ref: '#/components/schemas/PushToken_two_steps_data'
      required:
      - os
      - token
      title: Push Token
      type: object
    EmailReport:
      allOf:
      - $ref: '#/components/schemas/EmailReport_allOf'
      - $ref: '#/components/schemas/EmailReportOverall'
      - $ref: '#/components/schemas/EmailReportByDate'
      - $ref: '#/components/schemas/EmailReportByWeekday'
      - $ref: '#/components/schemas/EmailReportByHour'
      - $ref: '#/components/schemas/EmailReportByLocation'
      - $ref: '#/components/schemas/EmailReportByDomain'
      - $ref: '#/components/schemas/EmailReportByUrl'
      - $ref: '#/components/schemas/EmailReportByReader'
      description: Email report schema
      title: Email Report
      type: object
    EmailReportByReader:
      description: Email stats grouped by Reader
      properties:
        reader:
          description: Email stats grouped by Reader
          items:
            $ref: '#/components/schemas/EmailReportByReader_reader_inner'
          type: array
      title: By Reader
      type: object
    EmailReportByUrl:
      description: Email stats grouped by Url
      properties:
        url:
          description: Email stats grouped by Domain
          items:
            $ref: '#/components/schemas/EmailReportByUrl_url_inner'
          type: array
      title: By Url
      type: object
    EmailReportByEcommerce:
      description: Email stats grouped by Ecommerce
      properties:
        ecommerce:
          $ref: '#/components/schemas/EmailReportByEcommerce_ecommerce'
      title: By Ecommerce
      type: object
    EmailReportByDomain:
      description: Email stats grouped by Domain
      properties:
        domain:
          description: Email stats grouped by Domain
          items:
            $ref: '#/components/schemas/EmailReportByDomain_domain_inner'
          type: array
      title: By Domain
      type: object
    EmailReportByLocation:
      description: Email stats grouped by Location
      properties:
        location:
          description: Email stats grouped by Location
          items:
            $ref: '#/components/schemas/EmailReportByLocation_location_inner'
          type: array
      title: By Location
      type: object
    EmailReportByHour:
      description: Email stats grouped by Hour
      properties:
        hour:
          description: Email stats grouped by hour
          items:
            $ref: '#/components/schemas/EmailReportByHour_hour_inner'
          type: array
      title: By Hour
      type: object
    EmailReportByWeekday:
      description: Email stats grouped by Weekday
      properties:
        weekday:
          description: Email stats grouped by date
          items:
            $ref: '#/components/schemas/EmailReportByWeekday_weekday_inner'
          type: array
      title: By Weekday
      type: object
    EmailReportByDate:
      description: Email stats grouped by date
      properties:
        date:
          description: Email stats grouped by date
          items:
            $ref: '#/components/schemas/EmailReportByDate_date_inner'
          type: array
      title: By Date
      type: object
    EmailReportOverall:
      description: Overall stats schema
      properties:
        overall:
          $ref: '#/components/schemas/EmailReportOverall_overall'
      title: Overall
      type: object
    PhoneReport:
      allOf:
      - $ref: '#/components/schemas/EmailReport_allOf'
      - $ref: '#/components/schemas/PhoneReport_allOf'
      - $ref: '#/components/schemas/Overall'
      description: Phone report schema
      title: PhoneReport
      type: object
    PushVersions:
      description: Push report versions schema
      properties:
        versions:
          description: Array of stats for each operating system version
          items:
            $ref: '#/components/schemas/PushVersions_versions_inner'
          type: array
      title: PushVersions
      type: object
    PushReport:
      allOf:
      - $ref: '#/components/schemas/EmailReport_allOf'
      - $ref: '#/components/schemas/PushReport_allOf'
      - $ref: '#/components/schemas/Overall'
      description: Push report schema
      title: Push Report
      type: object
    Overall:
      description: Overall stats schema
      properties:
        overall:
          $ref: '#/components/schemas/Overall_overall'
      title: Overall
      type: object
    AdvancedReport:
      description: Advanced report schema
      example:
        file: file
        created: ""
        title: Report title
        hash: hash
        advanced_report_id: 1
        status: queued
      properties:
        advanced_report_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        title:
          description: Advanced report title
          example: Report title
          type: string
        hash:
          description: Advanced report hash
          type: string
        file:
          description: Advanced report file
          type: string
        status:
          description: Advanced report status
          enum:
          - queued
          - running
          - finished
          - stopped
          - canceled
          - paused
          - error
          type: string
        created:
          allOf:
          - $ref: '#/components/schemas/date_time'
      title: AdvancedReport
      type: object
    AdvancedReportRange:
      description: Time range of the report
      example:
        start: ""
        end: ""
      properties:
        start:
          allOf:
          - $ref: '#/components/schemas/date_time'
        end:
          allOf:
          - $ref: '#/components/schemas/date_time'
      required:
      - end
      - start
      title: AdvancedReportRange
      type: object
    AdvancedReportCampaigns:
      description: Campaigns of the report
      items:
        $ref: '#/components/schemas/AdvancedReportCampaignsObject'
      title: AdvancedReportCampaigns
      type: array
    AdvancedReportCampaignsObject:
      discriminator:
        mapping:
          all: '#/components/schemas/ReportCampaignsAll'
          last: '#/components/schemas/ReportCampaignsLast'
          specific: '#/components/schemas/ReportCampaignsSpecific'
          group: '#/components/schemas/ReportCampaignsGroup'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/ReportCampaignsAll'
      - $ref: '#/components/schemas/ReportCampaignsLast'
      - $ref: '#/components/schemas/ReportCampaignsSpecific'
      - $ref: '#/components/schemas/ReportCampaignsGroup'
      title: AdvancedReportCampaignsObject
      type: object
    ReportCampaignsAll:
      properties:
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        type:
          enum:
          - all
          type: string
      required:
      - list_id
      - type
      title: ReportCampaignsAll
      type: object
    ReportCampaignsLast:
      properties:
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        type:
          enum:
          - last
          type: string
      required:
      - list_id
      - type
      title: ReportCampaignsLast
      type: object
    ReportCampaignsSpecific:
      properties:
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        type:
          enum:
          - specific
          type: string
        data:
          description: Array of campaign hashes
          items:
            type: string
          type: array
      required:
      - data
      - list_id
      - type
      title: ReportCampaignsSpecific
      type: object
    ReportCampaignsGroup:
      properties:
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        type:
          enum:
          - group
          type: string
        data:
          description: Array of campaign groups
          items:
            $ref: '#/components/schemas/queryId'
          type: array
      required:
      - data
      - list_id
      - type
      title: ReportCampaignsGroup
      type: object
    GenerateEmailBouncesReport:
      description: Generate email bounces report schema
      example:
        callback_url: callback_url
        campaigns:
        - null
        - null
        columns:
          list_stats_fields:
            bounce_type: true
            bounce_detail: true
            bounce_date: true
          campaign_fields:
            internal_name: true
            campaign_hash: true
          list_extra_fields:
          - list_id: 1
            fields:
            - fields
            - fields
          - list_id: 1
            fields:
            - fields
            - fields
          list_base_fields:
          - list_base_fields
          - list_base_fields
        options:
          include_unopens: true
          grouping: by_campaign
          notify:
          - 1
          - 1
        range:
          start: ""
          end: ""
        title: Report title
      properties:
        title:
          description: Advanced report title
          example: Report title
          type: string
        range:
          $ref: '#/components/schemas/AdvancedReportRange'
        campaigns:
          description: Campaigns of the report
          items:
            $ref: '#/components/schemas/AdvancedReportCampaignsObject'
          title: AdvancedReportCampaigns
          type: array
        columns:
          $ref: '#/components/schemas/AdvancedReportEmailBouncesColumns'
        options:
          $ref: '#/components/schemas/AdvancedReportEmailBouncesOptions'
        callback_url:
          description: URL which will receive the information of the report
          type: string
      required:
      - campaigns
      - columns
      - options
      - range
      - title
      title: GenerateEmailBouncesReport
      type: object
    AdvancedReportEmailBouncesColumns:
      description: Columns of the report
      example:
        list_stats_fields:
          bounce_type: true
          bounce_detail: true
          bounce_date: true
        campaign_fields:
          internal_name: true
          campaign_hash: true
        list_extra_fields:
        - list_id: 1
          fields:
          - fields
          - fields
        - list_id: 1
          fields:
          - fields
          - fields
        list_base_fields:
        - list_base_fields
        - list_base_fields
      properties:
        list_base_fields:
          description: Array of base fields
          items:
            type: string
          type: array
        list_extra_fields:
          items:
            $ref: '#/components/schemas/AdvancedReportListExtraFields_inner'
          required:
          - fields
          - list_id
          title: AdvancedReportListExtraFields
          type: array
        list_stats_fields:
          $ref: '#/components/schemas/EmailBouncesListStatsFields'
        campaign_fields:
          $ref: '#/components/schemas/EmailBouncesCampaignFields'
      required:
      - campaign_fields
      - list_base_fields
      - list_extra_fields
      - list_stats_fields
      title: AdvancedReportEmailBouncesColumns
      type: object
    EmailBouncesListStatsFields:
      description: List stats fields to include in the report
      example:
        bounce_type: true
        bounce_detail: true
        bounce_date: true
      properties:
        bounce_date:
          description: "True to include bounce date, false otherwise"
          type: boolean
        bounce_type:
          description: "True to include bounce type, false otherwise"
          type: boolean
        bounce_detail:
          description: "True to include bounce detail, false otherwise"
          type: boolean
      required:
      - bounce_date
      - bounce_detail
      - bounce_type
      title: EmailBouncesListStatsFields
      type: object
    EmailBouncesCampaignFields:
      description: Campaign fields to include in the report
      example:
        internal_name: true
        campaign_hash: true
      properties:
        internal_name:
          description: "True to include the internal name of the campaign, false otherwise"
          type: boolean
        campaign_hash:
          description: "True to include the hash of the campaign, false otherwise"
          type: boolean
      required:
      - campaign_hash
      - internal_name
      title: EmailBouncesCampaignFields
      type: object
    AdvancedReportEmailBouncesOptions:
      description: Columns of the report
      example:
        include_unopens: true
        grouping: by_campaign
        notify:
        - 1
        - 1
      properties:
        include_unopens:
          description: "True to include info for not opened campaigns, false otherwise"
          type: boolean
        notify:
          description: Array of user IDs to notify
          items:
            $ref: '#/components/schemas/queryId'
          type: array
        grouping:
          default: by_campaign
          description: Field to group data
          enum:
          - by_contact
          - by_campaign
          type: string
      required:
      - include_unopens
      title: AdvancedReportEmailBouncesOptions
      type: object
    GenerateEmailClicksByContactReport:
      description: Generate email clicks by contact report schema
      example:
        callback_url: callback_url
        campaigns:
        - null
        - null
        columns:
          list_stats_fields:
            clicks: true
          campaign_fields:
            country: true
            internal_name: true
            os: true
            campaign_hash: true
            city: true
            program: true
            region: true
            url: true
          list_extra_fields:
          - list_id: 1
            fields:
            - fields
            - fields
          - list_id: 1
            fields:
            - fields
            - fields
          list_base_fields:
          - list_base_fields
          - list_base_fields
        options:
          notify:
          - 1
          - 1
        range:
          start: ""
          end: ""
        title: Report title
      properties:
        title:
          description: Advanced report title
          example: Report title
          type: string
        range:
          $ref: '#/components/schemas/AdvancedReportRange'
        campaigns:
          description: Campaigns of the report
          items:
            $ref: '#/components/schemas/AdvancedReportCampaignsObject'
          title: AdvancedReportCampaigns
          type: array
        columns:
          $ref: '#/components/schemas/AdvancedReportEmailClicksByContactColumns'
        options:
          $ref: '#/components/schemas/AdvancedReportEmailClicksByContactOptions'
        callback_url:
          description: URL which will receive the information of the report
          type: string
      required:
      - campaigns
      - columns
      - options
      - range
      - title
      title: GenerateEmailClicksByContactReport
      type: object
    AdvancedReportEmailClicksByContactColumns:
      description: Columns of the report
      example:
        list_stats_fields:
          clicks: true
        campaign_fields:
          country: true
          internal_name: true
          os: true
          campaign_hash: true
          city: true
          program: true
          region: true
          url: true
        list_extra_fields:
        - list_id: 1
          fields:
          - fields
          - fields
        - list_id: 1
          fields:
          - fields
          - fields
        list_base_fields:
        - list_base_fields
        - list_base_fields
      properties:
        list_base_fields:
          description: Array of base fields
          items:
            type: string
          type: array
        list_extra_fields:
          items:
            $ref: '#/components/schemas/AdvancedReportListExtraFields_inner'
          required:
          - fields
          - list_id
          title: AdvancedReportListExtraFields
          type: array
        list_stats_fields:
          $ref: '#/components/schemas/EmailClicksByContactListStatsFields'
        campaign_fields:
          $ref: '#/components/schemas/EmailClicksByContactCampaignFields'
      required:
      - campaign_fields
      - list_base_fields
      - list_extra_fields
      - list_stats_fields
      title: AdvancedReportEmailClicksByContactColumns
      type: object
    EmailClicksByContactListStatsFields:
      description: List stats fields to include in the report
      example:
        clicks: true
      properties:
        clicks:
          description: "True to include clicks, false otherwise"
          type: boolean
      required:
      - clicks
      title: EmailClicksByContactListStatsFields
      type: object
    EmailClicksByContactCampaignFields:
      description: Campaign fields to include in the report
      example:
        country: true
        internal_name: true
        os: true
        campaign_hash: true
        city: true
        program: true
        region: true
        url: true
      properties:
        internal_name:
          description: "True to include the internal name of the campaign, false otherwise"
          type: boolean
        campaign_hash:
          description: "True to include the hash of the campaign, false otherwise"
          type: boolean
        url:
          description: "True to include the URL of the campaign, false otherwise"
          type: boolean
        city:
          description: "True to include city information, false otherwise"
          type: boolean
        country:
          description: "True to include country information, false otherwise"
          type: boolean
        region:
          description: "True to include region information, false otherwise"
          type: boolean
        program:
          description: "True to include device program information, false otherwise"
          type: boolean
        os:
          description: "True to include operating system information, false otherwise"
          type: boolean
      required:
      - campaign_hash
      - city
      - country
      - internal_name
      - os
      - program
      - region
      - url
      title: EmailClicksByContactCampaignFields
      type: object
    AdvancedReportEmailClicksByContactOptions:
      description: Columns of the report
      example:
        notify:
        - 1
        - 1
      properties:
        notify:
          description: Array of user IDs to notify
          items:
            $ref: '#/components/schemas/queryId'
          type: array
      title: AdvancedReportEmailClicksByContactOptions
      type: object
    GenerateEmailClicksByUrlReport:
      description: Generate email clicks by URL report schema
      example:
        callback_url: callback_url
        campaigns:
        - null
        - null
        columns:
          list_stats_fields:
            click_rate_per_url: true
            unique_clicks: true
            clicks: true
          campaign_fields:
            country: true
            internal_name: true
            os: true
            campaign_hash: true
            city: true
            program: true
            region: true
            url: true
          list_extra_fields:
          - list_id: 1
            fields:
            - fields
            - fields
          - list_id: 1
            fields:
            - fields
            - fields
          list_base_fields:
          - list_base_fields
          - list_base_fields
        options:
          notify:
          - 1
          - 1
        range:
          start: ""
          end: ""
        title: Report title
      properties:
        title:
          description: Advanced report title
          example: Report title
          type: string
        range:
          $ref: '#/components/schemas/AdvancedReportRange'
        campaigns:
          description: Campaigns of the report
          items:
            $ref: '#/components/schemas/AdvancedReportCampaignsObject'
          title: AdvancedReportCampaigns
          type: array
        columns:
          $ref: '#/components/schemas/AdvancedReportEmailClicksByUrlColumns'
        options:
          $ref: '#/components/schemas/AdvancedReportEmailClicksByUrlOptions'
        callback_url:
          description: URL which will receive the information of the report
          type: string
      required:
      - campaigns
      - columns
      - options
      - range
      - title
      title: GenerateEmailClicksByUrlReport
      type: object
    AdvancedReportEmailClicksByUrlColumns:
      description: Columns of the report
      example:
        list_stats_fields:
          click_rate_per_url: true
          unique_clicks: true
          clicks: true
        campaign_fields:
          country: true
          internal_name: true
          os: true
          campaign_hash: true
          city: true
          program: true
          region: true
          url: true
        list_extra_fields:
        - list_id: 1
          fields:
          - fields
          - fields
        - list_id: 1
          fields:
          - fields
          - fields
        list_base_fields:
        - list_base_fields
        - list_base_fields
      properties:
        list_base_fields:
          description: Array of base fields
          items:
            type: string
          type: array
        list_extra_fields:
          items:
            $ref: '#/components/schemas/AdvancedReportListExtraFields_inner'
          required:
          - fields
          - list_id
          title: AdvancedReportListExtraFields
          type: array
        list_stats_fields:
          $ref: '#/components/schemas/EmailClicksByUrlListStatsFields'
        campaign_fields:
          $ref: '#/components/schemas/EmailClicksByUrlCampaignFields'
      required:
      - campaign_fields
      - list_base_fields
      - list_extra_fields
      - list_stats_fields
      title: AdvancedReportEmailClicksByUrlColumns
      type: object
    EmailClicksByUrlListStatsFields:
      description: List stats fields to include in the report
      example:
        click_rate_per_url: true
        unique_clicks: true
        clicks: true
      properties:
        clicks:
          description: "True to include clicks, false otherwise"
          type: boolean
        unique_clicks:
          description: "True to include unique clicks, false otherwise"
          type: boolean
        click_rate_per_url:
          description: "True to include click rate per URL, false otherwise"
          type: boolean
      required:
      - click_rate_per_url
      - clicks
      - unique_clicks
      title: EmailClicksByUrlListStatsFields
      type: object
    EmailClicksByUrlCampaignFields:
      description: Campaign fields to include in the report
      example:
        country: true
        internal_name: true
        os: true
        campaign_hash: true
        city: true
        program: true
        region: true
        url: true
      properties:
        internal_name:
          description: "True to include the internal name of the campaign, false otherwise"
          type: boolean
        campaign_hash:
          description: "True to include the hash of the campaign, false otherwise"
          type: boolean
        url:
          description: "True to include the URL of the campaign, false otherwise"
          type: boolean
        city:
          description: "True to include city information, false otherwise"
          type: boolean
        country:
          description: "True to include country information, false otherwise"
          type: boolean
        region:
          description: "True to include region information, false otherwise"
          type: boolean
        program:
          description: "True to include device program information, false otherwise"
          type: boolean
        os:
          description: "True to include operating system information, false otherwise"
          type: boolean
      required:
      - campaign_hash
      - city
      - country
      - internal_name
      - os
      - program
      - region
      - url
      title: EmailClicksByUrlCampaignFields
      type: object
    AdvancedReportEmailClicksByUrlOptions:
      description: Columns of the report
      example:
        notify:
        - 1
        - 1
      properties:
        notify:
          description: Array of user IDs to notify
          items:
            $ref: '#/components/schemas/queryId'
          type: array
      title: AdvancedReportEmailClicksByUrlOptions
      type: object
    GenerateEmailEventsReport:
      description: Generate email events report schema
      example:
        callback_url: callback_url
        campaigns:
        - null
        - null
        columns:
          list_stats_fields:
            forwards: true
            tw_shares: true
            social_shares: true
            unsubscribes: true
            fb_likes: true
            forwards_conversion: true
            complaints: true
            opens: true
            clicks: true
            bounces: true
            fb_shares: true
          campaign_fields:
            country: true
            internal_name: true
            os: true
            campaign_hash: true
            send_date: true
            city: true
            program: true
            region: true
            group: true
          list_extra_fields:
          - list_id: 1
            fields:
            - fields
            - fields
          - list_id: 1
            fields:
            - fields
            - fields
          list_base_fields:
          - list_base_fields
          - list_base_fields
        options:
          include_unopens: true
          notify:
          - 1
          - 1
        range:
          start: ""
          end: ""
        title: Report title
      properties:
        title:
          description: Advanced report title
          example: Report title
          type: string
        range:
          $ref: '#/components/schemas/AdvancedReportRange'
        campaigns:
          description: Campaigns of the report
          items:
            $ref: '#/components/schemas/AdvancedReportCampaignsObject'
          title: AdvancedReportCampaigns
          type: array
        columns:
          $ref: '#/components/schemas/AdvancedReportEmailEventsColumns'
        options:
          $ref: '#/components/schemas/AdvancedReportEmailEventsOptions'
        callback_url:
          description: URL which will receive the information of the report
          type: string
      required:
      - campaigns
      - columns
      - options
      - range
      - title
      title: GenerateEmailEventsReport
      type: object
    AdvancedReportEmailEventsColumns:
      description: Columns of the report
      example:
        list_stats_fields:
          forwards: true
          tw_shares: true
          social_shares: true
          unsubscribes: true
          fb_likes: true
          forwards_conversion: true
          complaints: true
          opens: true
          clicks: true
          bounces: true
          fb_shares: true
        campaign_fields:
          country: true
          internal_name: true
          os: true
          campaign_hash: true
          send_date: true
          city: true
          program: true
          region: true
          group: true
        list_extra_fields:
        - list_id: 1
          fields:
          - fields
          - fields
        - list_id: 1
          fields:
          - fields
          - fields
        list_base_fields:
        - list_base_fields
        - list_base_fields
      properties:
        list_base_fields:
          description: Array of base fields
          items:
            type: string
          type: array
        list_extra_fields:
          items:
            $ref: '#/components/schemas/AdvancedReportListExtraFields_inner'
          required:
          - fields
          - list_id
          title: AdvancedReportListExtraFields
          type: array
        list_stats_fields:
          $ref: '#/components/schemas/EmailEventsListStatsFields'
        campaign_fields:
          $ref: '#/components/schemas/EmailEventsCampaignFields'
      required:
      - campaign_fields
      - list_base_fields
      - list_extra_fields
      - list_stats_fields
      title: AdvancedReportEmailEventsColumns
      type: object
    AdvancedReportListExtraFields:
      items:
        $ref: '#/components/schemas/AdvancedReportListExtraFields_inner'
      required:
      - fields
      - list_id
      title: AdvancedReportListExtraFields
      type: array
    EmailEventsListStatsFields:
      description: List stats fields to include in the report
      example:
        forwards: true
        tw_shares: true
        social_shares: true
        unsubscribes: true
        fb_likes: true
        forwards_conversion: true
        complaints: true
        opens: true
        clicks: true
        bounces: true
        fb_shares: true
      properties:
        opens:
          description: "True to include opens, false otherwise"
          type: boolean
        clicks:
          description: "True to include clicks, false otherwise"
          type: boolean
        complaints:
          description: "True to include complaints, false otherwise"
          type: boolean
        unsubscribes:
          description: "True to include unsubscriptions, false otherwise"
          type: boolean
        bounces:
          description: "True to include bounces, false otherwise"
          type: boolean
        forwards:
          description: "True to include forwards, false otherwise"
          type: boolean
        forwards_conversion:
          description: "True to include converted forwards, false otherwise"
          type: boolean
        fb_likes:
          description: "True to include facebook likes, false otherwise"
          type: boolean
        fb_shares:
          description: "True to include facebook shares, false otherwise"
          type: boolean
        tw_shares:
          description: "True to include twitter shares, false otherwise"
          type: boolean
        social_shares:
          description: "True to include social shares, false otherwise"
          type: boolean
      required:
      - bounces
      - clicks
      - complaints
      - fb_likes
      - fb_shares
      - forwards
      - forwards_conversion
      - opens
      - social_shares
      - tw_shares
      - unsubscribes
      title: EmailEventsListStatsFields
      type: object
    EmailEventsCampaignFields:
      description: Campaign fields to include in the report
      example:
        country: true
        internal_name: true
        os: true
        campaign_hash: true
        send_date: true
        city: true
        program: true
        region: true
        group: true
      properties:
        internal_name:
          description: "True to include the internal name of the campaign, false otherwise"
          type: boolean
        campaign_hash:
          description: "True to include the hash of the campaign, false otherwise"
          type: boolean
        send_date:
          description: "True to include the send date of the campaign, false otherwise"
          type: boolean
        group:
          description: "True to include the group of the campaign, false otherwise"
          type: boolean
        city:
          description: "True to include city information, false otherwise"
          type: boolean
        country:
          description: "True to include country information, false otherwise"
          type: boolean
        region:
          description: "True to include region information, false otherwise"
          type: boolean
        program:
          description: "True to include device program information, false otherwise"
          type: boolean
        os:
          description: "True to include operating system information, false otherwise"
          type: boolean
      required:
      - campaign_hash
      - city
      - country
      - group
      - internal_name
      - os
      - program
      - region
      - send_date
      title: EmailEventsCampaignFields
      type: object
    AdvancedReportEmailEventsOptions:
      description: Columns of the report
      example:
        include_unopens: true
        notify:
        - 1
        - 1
      properties:
        include_unopens:
          description: "True to include info for not opened campaigns, false otherwise"
          type: boolean
        notify:
          description: Array of user IDs to notify
          items:
            $ref: '#/components/schemas/queryId'
          type: array
      required:
      - include_unopens
      title: AdvancedReportEmailEventsOptions
      type: object
    GenerateEmailUnsubscriptionsReport:
      description: Generate email unsubscriptions report schema
      example:
        callback_url: callback_url
        campaigns:
        - null
        - null
        columns:
          list_stats_fields:
            unsubscription_motive: true
            unsubscription_method: true
            unsubscription_date: true
          campaign_fields:
            internal_name: true
            campaign_hash: true
            sender: true
          list_extra_fields:
          - list_id: 1
            fields:
            - fields
            - fields
          - list_id: 1
            fields:
            - fields
            - fields
          list_base_fields:
          - list_base_fields
          - list_base_fields
        options:
          notify:
          - 1
          - 1
        range:
          start: ""
          end: ""
        title: Report title
      properties:
        title:
          description: Advanced report title
          example: Report title
          type: string
        range:
          $ref: '#/components/schemas/AdvancedReportRange'
        campaigns:
          description: Campaigns of the report
          items:
            $ref: '#/components/schemas/AdvancedReportCampaignsObject'
          title: AdvancedReportCampaigns
          type: array
        columns:
          $ref: '#/components/schemas/AdvancedReportEmailUnsubscriptionsColumns'
        options:
          $ref: '#/components/schemas/AdvancedReportEmailUnsubscriptionsOptions'
        callback_url:
          description: URL which will receive the information of the report
          type: string
      required:
      - campaigns
      - columns
      - options
      - range
      - title
      title: GenerateEmailUnsubscriptionsReport
      type: object
    AdvancedReportEmailUnsubscriptionsColumns:
      description: Columns of the report
      example:
        list_stats_fields:
          unsubscription_motive: true
          unsubscription_method: true
          unsubscription_date: true
        campaign_fields:
          internal_name: true
          campaign_hash: true
          sender: true
        list_extra_fields:
        - list_id: 1
          fields:
          - fields
          - fields
        - list_id: 1
          fields:
          - fields
          - fields
        list_base_fields:
        - list_base_fields
        - list_base_fields
      properties:
        list_base_fields:
          description: Array of base fields
          items:
            type: string
          type: array
        list_extra_fields:
          items:
            $ref: '#/components/schemas/AdvancedReportListExtraFields_inner'
          required:
          - fields
          - list_id
          title: AdvancedReportListExtraFields
          type: array
        list_stats_fields:
          $ref: '#/components/schemas/EmailUnsubscriptionsListStatsFields'
        campaign_fields:
          $ref: '#/components/schemas/EmailUnsubscriptionsCampaignFields'
      required:
      - campaign_fields
      - list_base_fields
      - list_extra_fields
      - list_stats_fields
      title: AdvancedReportEmailUnsubscriptionsColumns
      type: object
    EmailUnsubscriptionsListStatsFields:
      description: List stats fields to include in the report
      example:
        unsubscription_motive: true
        unsubscription_method: true
        unsubscription_date: true
      properties:
        unsubscription_method:
          description: "True to include unsubscription method, false otherwise"
          type: boolean
        unsubscription_motive:
          description: "True to include unsubscription motive, false otherwise"
          type: boolean
        unsubscription_date:
          description: "True to include unsubscription date, false otherwise"
          type: boolean
      required:
      - unsubscription_date
      - unsubscription_method
      - unsubscription_motive
      title: EmailUnsubscriptionsListStatsFields
      type: object
    EmailUnsubscriptionsCampaignFields:
      description: Campaign fields to include in the report
      example:
        internal_name: true
        campaign_hash: true
        sender: true
      properties:
        internal_name:
          description: "True to include the internal name of the campaign, false otherwise"
          type: boolean
        campaign_hash:
          description: "True to include the hash of the campaign, false otherwise"
          type: boolean
        sender:
          description: "True to include the sender of the campaign, false otherwise"
          type: boolean
      required:
      - campaign_hash
      - internal_name
      - sender
      title: EmailUnsubscriptionsCampaignFields
      type: object
    AdvancedReportEmailUnsubscriptionsOptions:
      description: Columns of the report
      example:
        notify:
        - 1
        - 1
      properties:
        notify:
          description: Array of user IDs to notify
          items:
            $ref: '#/components/schemas/queryId'
          type: array
      title: AdvancedReportEmailUnsubscriptionsOptions
      type: object
    GenerateFormAnswersReport:
      description: Generate form answers report schema
      example:
        callback_url: callback_url
        range:
          start: ""
          end: ""
        title: Report title
        forms:
        - list_id: 1
          forms:
          - 1
          - 1
        - list_id: 1
          forms:
          - 1
          - 1
      properties:
        title:
          description: Advanced report title
          example: Report title
          type: string
        range:
          $ref: '#/components/schemas/AdvancedReportRange'
        forms:
          items:
            $ref: '#/components/schemas/AdvancedReportForms_inner'
          required:
          - forms
          - list_id
          title: AdvancedReportForms
          type: array
        callback_url:
          description: URL which will receive the information of the report
          type: string
      required:
      - forms
      - range
      - title
      title: GenerateFormAnswersReport
      type: object
    AdvancedReportForms:
      items:
        $ref: '#/components/schemas/AdvancedReportForms_inner'
      required:
      - forms
      - list_id
      title: AdvancedReportForms
      type: array
    GenerateSendsReport:
      description: Generate sends report schema
      example:
        callback_url: callback_url
        lists:
        - 1
        - 1
        columns:
          campaign_fields:
            internal_name: true
            campaign_hash: true
            sender: true
            channel: true
            type: true
            group: true
          list_extra_fields:
          - list_id: 1
            fields:
            - fields
            - fields
          - list_id: 1
            fields:
            - fields
            - fields
          list_base_fields:
          - list_base_fields
          - list_base_fields
        options:
          notify:
          - 1
          - 1
        range:
          start: ""
          end: ""
        title: Report title
      properties:
        title:
          description: Advanced report title
          example: Report title
          type: string
        range:
          $ref: '#/components/schemas/AdvancedReportRange'
        lists:
          description: Array of List Id's
          items:
            $ref: '#/components/schemas/id'
          type: array
        columns:
          $ref: '#/components/schemas/AdvancedReportSendsColumns'
        options:
          $ref: '#/components/schemas/AdvancedReportSendsOptions'
        callback_url:
          description: URL which will receive the information of the report
          type: string
      required:
      - columns
      - lists
      - options
      - range
      - title
      title: GenerateSendsReport
      type: object
    AdvancedReportSendsColumns:
      description: Columns of the report
      example:
        campaign_fields:
          internal_name: true
          campaign_hash: true
          sender: true
          channel: true
          type: true
          group: true
        list_extra_fields:
        - list_id: 1
          fields:
          - fields
          - fields
        - list_id: 1
          fields:
          - fields
          - fields
        list_base_fields:
        - list_base_fields
        - list_base_fields
      properties:
        list_base_fields:
          description: Array of base fields
          items:
            type: string
          type: array
        list_extra_fields:
          items:
            $ref: '#/components/schemas/AdvancedReportListExtraFields_inner'
          required:
          - fields
          - list_id
          title: AdvancedReportListExtraFields
          type: array
        campaign_fields:
          $ref: '#/components/schemas/SendsCampaignFields'
      required:
      - campaign_fields
      - list_base_fields
      - list_extra_fields
      title: AdvancedReportSendsColumns
      type: object
    SendsCampaignFields:
      description: Campaign fields to include in the report
      example:
        internal_name: true
        campaign_hash: true
        sender: true
        channel: true
        type: true
        group: true
      properties:
        internal_name:
          description: "True to include the internal name of the campaign, false otherwise"
          type: boolean
        campaign_hash:
          description: "True to include the hash of the campaign, false otherwise"
          type: boolean
        group:
          description: "True to include the group of the campaign, false otherwise"
          type: boolean
        channel:
          description: "True to include the channel of the campaign, false otherwise"
          type: boolean
        type:
          description: "True to include the type of the campaign, false otherwise"
          type: boolean
        sender:
          description: "True to include the sender of the campaign, false otherwise"
          type: boolean
      required:
      - campaign_hash
      - channel
      - group
      - internal_name
      - sender
      - type
      title: SendsCampaignFields
      type: object
    AdvancedReportSendsOptions:
      description: Columns of the report
      example:
        notify:
        - 1
        - 1
      properties:
        notify:
          description: Array of user IDs to notify
          items:
            $ref: '#/components/schemas/queryId'
          type: array
      title: AdvancedReportSendsOptions
      type: object
    GenerateSmsBouncesReport:
      description: Generate SMS bounces report schema
      example:
        callback_url: callback_url
        campaigns:
        - null
        - null
        columns:
          list_stats_fields:
            delivery_date: true
            delivery_answer: true
          campaign_fields:
            internal_name: true
            campaign_hash: true
            send_date: true
            sender: true
          list_extra_fields:
          - list_id: 1
            fields:
            - fields
            - fields
          - list_id: 1
            fields:
            - fields
            - fields
          list_base_fields:
          - list_base_fields
          - list_base_fields
        options:
          grouping: by_campaign
          notify:
          - 1
          - 1
        range:
          start: ""
          end: ""
        title: Report title
      properties:
        title:
          description: Advanced report title
          example: Report title
          type: string
        range:
          $ref: '#/components/schemas/AdvancedReportRange'
        campaigns:
          description: Campaigns of the report
          items:
            $ref: '#/components/schemas/AdvancedReportCampaignsObject'
          title: AdvancedReportCampaigns
          type: array
        columns:
          $ref: '#/components/schemas/AdvancedReportSmsBouncesColumns'
        options:
          $ref: '#/components/schemas/AdvancedReportSmsBouncesOptions'
        callback_url:
          description: URL which will receive the information of the report
          type: string
      required:
      - campaigns
      - columns
      - options
      - range
      - title
      title: GenerateSmsBouncesReport
      type: object
    AdvancedReportSmsBouncesColumns:
      description: Columns of the report
      example:
        list_stats_fields:
          delivery_date: true
          delivery_answer: true
        campaign_fields:
          internal_name: true
          campaign_hash: true
          send_date: true
          sender: true
        list_extra_fields:
        - list_id: 1
          fields:
          - fields
          - fields
        - list_id: 1
          fields:
          - fields
          - fields
        list_base_fields:
        - list_base_fields
        - list_base_fields
      properties:
        list_base_fields:
          description: Array of base fields
          items:
            type: string
          type: array
        list_extra_fields:
          items:
            $ref: '#/components/schemas/AdvancedReportListExtraFields_inner'
          required:
          - fields
          - list_id
          title: AdvancedReportListExtraFields
          type: array
        list_stats_fields:
          $ref: '#/components/schemas/SmsBouncesListStatsFields'
        campaign_fields:
          $ref: '#/components/schemas/SmsBouncesCampaignFields'
      required:
      - campaign_fields
      - list_base_fields
      - list_extra_fields
      - list_stats_fields
      title: AdvancedReportSmsBouncesColumns
      type: object
    SmsBouncesListStatsFields:
      description: List stats fields to include in the report
      example:
        delivery_date: true
        delivery_answer: true
      properties:
        delivery_answer:
          description: "True to include delivery answer, false otherwise"
          type: boolean
        delivery_date:
          description: "True to include delivery date, false otherwise"
          type: boolean
      required:
      - delivery_answer
      - delivery_date
      title: SmsBouncesListStatsFields
      type: object
    SmsBouncesCampaignFields:
      description: Campaign fields to include in the report
      example:
        internal_name: true
        campaign_hash: true
        send_date: true
        sender: true
      properties:
        internal_name:
          description: "True to include the internal name of the campaign, false otherwise"
          type: boolean
        campaign_hash:
          description: "True to include the hash of the campaign, false otherwise"
          type: boolean
        send_date:
          description: "True to include the send date of the campaign, false otherwise"
          type: boolean
        sender:
          description: "True to include the sender of the campaign, false otherwise"
          type: boolean
      required:
      - campaign_hash
      - internal_name
      - send_date
      - sender
      title: SmsBouncesCampaignFields
      type: object
    AdvancedReportSmsBouncesOptions:
      description: Columns of the report
      example:
        grouping: by_campaign
        notify:
        - 1
        - 1
      properties:
        notify:
          description: Array of user IDs to notify
          items:
            $ref: '#/components/schemas/queryId'
          type: array
        grouping:
          default: by_campaign
          description: Field to group data
          enum:
          - by_contact
          - by_campaign
          type: string
      title: AdvancedReportSmsBouncesOptions
      type: object
    GenerateSmsEventsReport:
      description: Generate SMS events report schema
      example:
        callback_url: callback_url
        campaigns:
        - null
        - null
        columns:
          list_stats_fields:
            delivery_date: true
            delivery_answer: true
          campaign_fields:
            internal_name: true
            campaign_hash: true
            send_date: true
            sender: true
            group: true
          list_extra_fields:
          - list_id: 1
            fields:
            - fields
            - fields
          - list_id: 1
            fields:
            - fields
            - fields
          list_base_fields:
          - list_base_fields
          - list_base_fields
        options:
          notify:
          - 1
          - 1
        range:
          start: ""
          end: ""
        title: Report title
      properties:
        title:
          description: Advanced report title
          example: Report title
          type: string
        range:
          $ref: '#/components/schemas/AdvancedReportRange'
        campaigns:
          description: Campaigns of the report
          items:
            $ref: '#/components/schemas/AdvancedReportCampaignsObject'
          title: AdvancedReportCampaigns
          type: array
        columns:
          $ref: '#/components/schemas/AdvancedReportSmsEventsColumns'
        options:
          $ref: '#/components/schemas/AdvancedReportSmsEventsOptions'
        callback_url:
          description: URL which will receive the information of the report
          type: string
      required:
      - campaigns
      - columns
      - options
      - range
      - title
      title: GenerateSmsEventsReport
      type: object
    AdvancedReportSmsEventsColumns:
      description: Columns of the report
      example:
        list_stats_fields:
          delivery_date: true
          delivery_answer: true
        campaign_fields:
          internal_name: true
          campaign_hash: true
          send_date: true
          sender: true
          group: true
        list_extra_fields:
        - list_id: 1
          fields:
          - fields
          - fields
        - list_id: 1
          fields:
          - fields
          - fields
        list_base_fields:
        - list_base_fields
        - list_base_fields
      properties:
        list_base_fields:
          description: Array of base fields
          items:
            type: string
          type: array
        list_extra_fields:
          items:
            $ref: '#/components/schemas/AdvancedReportListExtraFields_inner'
          required:
          - fields
          - list_id
          title: AdvancedReportListExtraFields
          type: array
        list_stats_fields:
          $ref: '#/components/schemas/SmsEventsListStatsFields'
        campaign_fields:
          $ref: '#/components/schemas/SmsEventsCampaignFields'
      required:
      - campaign_fields
      - list_base_fields
      - list_extra_fields
      - list_stats_fields
      title: AdvancedReportSmsEventsColumns
      type: object
    SmsEventsListStatsFields:
      description: List stats fields to include in the report
      example:
        delivery_date: true
        delivery_answer: true
      properties:
        delivery_answer:
          description: "True to include delivery answer, false otherwise"
          type: boolean
        delivery_date:
          description: "True to include delivery date, false otherwise"
          type: boolean
      required:
      - delivery_answer
      - delivery_date
      title: SmsEventsListStatsFields
      type: object
    SmsEventsCampaignFields:
      description: Campaign fields to include in the report
      example:
        internal_name: true
        campaign_hash: true
        send_date: true
        sender: true
        group: true
      properties:
        internal_name:
          description: "True to include the internal name of the campaign, false otherwise"
          type: boolean
        campaign_hash:
          description: "True to include the hash of the campaign, false otherwise"
          type: boolean
        send_date:
          description: "True to include the send date of the campaign, false otherwise"
          type: boolean
        group:
          description: "True to include the group of the campaign, false otherwise"
          type: boolean
        sender:
          description: "True to include the sender of the campaign, false otherwise"
          type: boolean
      required:
      - campaign_hash
      - group
      - internal_name
      - send_date
      - sender
      title: SmsEventsCampaignFields
      type: object
    AdvancedReportSmsEventsOptions:
      description: Columns of the report
      example:
        notify:
        - 1
        - 1
      properties:
        notify:
          description: Array of user IDs to notify
          items:
            $ref: '#/components/schemas/queryId'
          type: array
      title: AdvancedReportSmsEventsOptions
      type: object
    GenerateSubscriptionsReport:
      description: Generate subscriptions report schema
      example:
        callback_url: callback_url
        lists:
        - 1
        - 1
        columns:
          list_stats_fields:
            subscription_src: true
            subscription_method: true
          list_extra_fields:
          - list_id: 1
            fields:
            - fields
            - fields
          - list_id: 1
            fields:
            - fields
            - fields
          list_base_fields:
          - list_base_fields
          - list_base_fields
        options:
          notify:
          - 1
          - 1
        range:
          start: ""
          end: ""
        title: Report title
      properties:
        title:
          description: Advanced report title
          example: Report title
          type: string
        range:
          $ref: '#/components/schemas/AdvancedReportRange'
        lists:
          description: Array of List Id's
          items:
            $ref: '#/components/schemas/id'
          type: array
        columns:
          $ref: '#/components/schemas/AdvancedReportSubscriptionsColumns'
        options:
          $ref: '#/components/schemas/AdvancedReportSubscriptionsOptions'
        callback_url:
          description: URL which will receive the information of the report
          type: string
      required:
      - columns
      - lists
      - options
      - range
      - title
      title: GenerateSubscriptionsReport
      type: object
    AdvancedReportSubscriptionsColumns:
      description: Columns of the report
      example:
        list_stats_fields:
          subscription_src: true
          subscription_method: true
        list_extra_fields:
        - list_id: 1
          fields:
          - fields
          - fields
        - list_id: 1
          fields:
          - fields
          - fields
        list_base_fields:
        - list_base_fields
        - list_base_fields
      properties:
        list_base_fields:
          description: Array of base fields
          items:
            type: string
          type: array
        list_extra_fields:
          items:
            $ref: '#/components/schemas/AdvancedReportListExtraFields_inner'
          required:
          - fields
          - list_id
          title: AdvancedReportListExtraFields
          type: array
        list_stats_fields:
          $ref: '#/components/schemas/SubscriptionsListStatsFields'
      required:
      - list_base_fields
      - list_extra_fields
      - list_stats_fields
      title: AdvancedReportSubscriptionsColumns
      type: object
    SubscriptionsListStatsFields:
      description: List stats fields to include in the report
      example:
        subscription_src: true
        subscription_method: true
      properties:
        subscription_method:
          description: "True to include subscription method, false otherwise"
          type: boolean
        subscription_src:
          description: "True to include subscription source, false otherwise"
          type: boolean
      required:
      - subscription_method
      - subscription_src
      title: SubscriptionsListStatsFields
      type: object
    AdvancedReportSubscriptionsOptions:
      description: Columns of the report
      example:
        notify:
        - 1
        - 1
      properties:
        notify:
          description: Array of user IDs to notify
          items:
            $ref: '#/components/schemas/queryId'
          type: array
      title: AdvancedReportSubscriptionsOptions
      type: object
    GenerateUnsubscriptionsReport:
      description: Generate unsubscriptions report schema
      example:
        callback_url: callback_url
        lists:
        - 1
        - 1
        columns:
          list_stats_fields:
            unsubscription_method: true
            unsubscription_src: true
            unsubscription_date: true
          list_extra_fields:
          - list_id: 1
            fields:
            - fields
            - fields
          - list_id: 1
            fields:
            - fields
            - fields
          list_base_fields:
          - list_base_fields
          - list_base_fields
        options:
          notify:
          - 1
          - 1
        range:
          start: ""
          end: ""
        title: Report title
      properties:
        title:
          description: Advanced report title
          example: Report title
          type: string
        range:
          $ref: '#/components/schemas/AdvancedReportRange'
        lists:
          description: Array of List Id's
          items:
            $ref: '#/components/schemas/id'
          type: array
        columns:
          $ref: '#/components/schemas/AdvancedReportUnsubscriptionsColumns'
        options:
          $ref: '#/components/schemas/AdvancedReportUnsubscriptionsOptions'
        callback_url:
          description: URL which will receive the information of the report
          type: string
      required:
      - columns
      - lists
      - options
      - range
      - title
      title: GenerateUnsubscriptionsReport
      type: object
    AdvancedReportUnsubscriptionsColumns:
      description: Columns of the report
      example:
        list_stats_fields:
          unsubscription_method: true
          unsubscription_src: true
          unsubscription_date: true
        list_extra_fields:
        - list_id: 1
          fields:
          - fields
          - fields
        - list_id: 1
          fields:
          - fields
          - fields
        list_base_fields:
        - list_base_fields
        - list_base_fields
      properties:
        list_base_fields:
          description: Array of base fields
          items:
            type: string
          type: array
        list_extra_fields:
          items:
            $ref: '#/components/schemas/AdvancedReportListExtraFields_inner'
          required:
          - fields
          - list_id
          title: AdvancedReportListExtraFields
          type: array
        list_stats_fields:
          $ref: '#/components/schemas/UnsubscriptionsListStatsFields'
      required:
      - list_base_fields
      - list_extra_fields
      - list_stats_fields
      title: AdvancedReportUnsubscriptionsColumns
      type: object
    UnsubscriptionsListStatsFields:
      description: List stats fields to include in the report
      example:
        unsubscription_method: true
        unsubscription_src: true
        unsubscription_date: true
      properties:
        unsubscription_method:
          description: "True to include unsubscription method, false otherwise"
          type: boolean
        unsubscription_src:
          description: "True to include unsubscription source, false otherwise"
          type: boolean
        unsubscription_date:
          description: "True to include unsubscription date, false otherwise"
          type: boolean
      required:
      - unsubscription_date
      - unsubscription_method
      - unsubscription_src
      title: UnsubscriptionsListStatsFields
      type: object
    AdvancedReportUnsubscriptionsOptions:
      description: Columns of the report
      example:
        notify:
        - 1
        - 1
      properties:
        notify:
          description: Array of user IDs to notify
          items:
            $ref: '#/components/schemas/queryId'
          type: array
      title: AdvancedReportUnsubscriptionsOptions
      type: object
    WebPushStats:
      description: Webpush report stats schema
      example:
        opens: 0
        clicks: 0
        bounces: 0
        sends: 1
      properties:
        opens:
          description: Total number of opened messages
          minimum: 0
          type: integer
        sends:
          description: Total number of sent messages
          example: 1
          minimum: 0
          type: integer
        clicks:
          description: Total number of clicked messages
          example: 0
          minimum: 0
          type: integer
        bounces:
          description: Total number of bounces
          example: 0
          minimum: 0
          type: integer
      title: WebPushStats
      type: object
    WebPushReport:
      description: Webpush report schema
      example:
        operating_systems:
        - versions:
          - null
          - null
          operating_system: macos
        - versions:
          - null
          - null
          operating_system: macos
        campaign_hash: campaign_hash
        devices:
        - null
        - null
        overall:
          opens: 0
          clicks: 0
          bounces: 0
          sends: 1
        browsers:
        - versions:
          - null
          - null
          browser: Chrome
        - versions:
          - null
          - null
          browser: Chrome
        url:
        - null
        - null
      properties:
        campaign_hash:
          pattern: "[a-zA-Z0-9_-]*"
          readOnly: true
          title: Hash
          type: string
        overall:
          $ref: '#/components/schemas/WebPushStats'
        devices:
          description: Stats of the campaign for each device
          items:
            $ref: '#/components/schemas/WebPushReport_devices_inner'
          type: array
        operating_systems:
          description: Stats of the campaign for each operating system
          items:
            $ref: '#/components/schemas/WebPushReport_operating_systems_inner'
          type: array
        browsers:
          description: Stats of the campaign for each browser
          items:
            $ref: '#/components/schemas/WebPushReport_browsers_inner'
          type: array
        url:
          description: Stats of the campaign for each url
          items:
            $ref: '#/components/schemas/WebPushReport_url_inner'
          type: array
      title: Webpush Report
      type: object
    AbstractSegment:
      description: Abstract segment schema
      properties:
        segment_id:
          type: string
        name:
          description: Name of the segment
          type: string
        type:
          description: Type of segment
          enum:
          - auto
          - saved
          - tag
          readOnly: true
          type: string
      title: Abstract Segment
      type: object
    AutomaticSegment:
      allOf:
      - $ref: '#/components/schemas/AutomaticSegment_allOf'
      - $ref: '#/components/schemas/AbstractSegment'
      description: Automatic segment schema
      title: AutomaticSegment
    SavedSegment:
      allOf:
      - $ref: '#/components/schemas/SavedSegment_allOf'
      - $ref: '#/components/schemas/SavedSegment_allOf_1'
      - $ref: '#/components/schemas/AbstractSegment'
      description: Saved segment schema
      required:
      - segment_id
      title: SavedSegment
      type: object
    TagSegment:
      allOf:
      - $ref: '#/components/schemas/TagSegment_allOf'
      - $ref: '#/components/schemas/AbstractSegment'
      description: Tag segment schema
      required:
      - segment_id
      title: Tag Segment
      type: object
    Segment:
      description: Segment schema
      discriminator:
        mapping:
          auto: '#/components/schemas/AutomaticSegment'
          saved: '#/components/schemas/SavedSegment'
          tag: '#/components/schemas/TagSegment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/AutomaticSegment'
      - $ref: '#/components/schemas/SavedSegment'
      - $ref: '#/components/schemas/TagSegment'
      title: Segment
      type: object
    DeleteSegmentsConflict:
      allOf:
      - $ref: '#/components/schemas/BaseConflict'
      description: Error schema for delete segments conflicts
      oneOf:
      - $ref: '#/components/schemas/invalid_segment_type'
      - $ref: '#/components/schemas/used_in_automations'
      - $ref: '#/components/schemas/used_in_recurring_messages'
      - $ref: '#/components/schemas/has_queued_campaigns'
      title: DeleteSegmentsConflict
      type: object
    deleteSegmentsConflictsErrors:
      oneOf:
      - $ref: '#/components/schemas/invalid_segment_type'
      - $ref: '#/components/schemas/used_in_automations'
      - $ref: '#/components/schemas/used_in_recurring_messages'
      - $ref: '#/components/schemas/has_queued_campaigns'
      title: deleteSegmentsConflictsErrors
    invalid_segment_type:
      description: Error schema for conflict when the segment type is invalid
      properties:
        errors:
          $ref: '#/components/schemas/invalid_segment_type_errors'
      title: invalid_segment_type
      type: object
    used_in_automations:
      description: Error schema for conflict when the segment is being used in automations
      properties:
        errors:
          $ref: '#/components/schemas/used_in_automations_errors'
      title: used_in_automations
      type: object
    used_in_recurring_messages:
      description: Error schema for conflict when the segment is being used in recurring
        campaigns
      properties:
        errors:
          $ref: '#/components/schemas/used_in_recurring_messages_errors'
      title: used_in_recurring_messages
      type: object
    has_queued_campaigns:
      description: Error schema for conflict when there are campaigns using the segment
      properties:
        errors:
          $ref: '#/components/schemas/has_queued_campaigns_errors'
      title: has_queued_campaigns
      type: object
    AbstractCellphoneSender:
      allOf:
      - $ref: '#/components/schemas/AbstractCellphoneSender_allOf'
      - $ref: '#/components/schemas/BasicSender'
      description: Abstract cellphone sender schema
      required:
      - type
      title: AbstractCellphoneSender
      type: object
    NumericCellphoneSenderPost:
      allOf:
      - $ref: '#/components/schemas/AbstractCellphoneSender_allOf'
      - $ref: '#/components/schemas/NumericCellphoneSenderPost_allOf'
      description: Numeric cellphone sender schema
      required:
      - cellphone
      - type
      title: NumericCellphoneSenderPost
      type: object
    NumericCellphoneSender:
      allOf:
      - $ref: '#/components/schemas/NumericCellphoneSenderPost_allOf'
      - $ref: '#/components/schemas/AbstractCellphoneSender'
      description: Numeric cellphone sender schema
      required:
      - cellphone
      - type
      title: NumericCellphoneSender
      type: object
    AlphanumericCellphoneSenderPost:
      allOf:
      - $ref: '#/components/schemas/AbstractCellphoneSender_allOf'
      - $ref: '#/components/schemas/AlphanumericCellphoneSenderPost_allOf'
      description: Alphanumeric cellphone sender schema
      required:
      - cellphone
      - file
      - type
      title: AlphanumericCellphoneSenderPost
      type: object
    AlphanumericCellphoneSender:
      allOf:
      - $ref: '#/components/schemas/AlphanumericCellphoneSenderPost_allOf'
      - $ref: '#/components/schemas/AbstractCellphoneSender'
      description: Alphanumeric cellphone sender schema
      required:
      - cellphone
      - file
      - type
      title: AlphanumericCellphoneSender
      type: object
    CellphoneSenderPost:
      description: Cellphone sender schema
      discriminator:
        mapping:
          alpha_numeric: '#/components/schemas/AlphanumericCellphoneSenderPost'
          numeric: '#/components/schemas/NumericCellphoneSenderPost'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/AlphanumericCellphoneSenderPost'
      - $ref: '#/components/schemas/NumericCellphoneSenderPost'
      required:
      - type
      title: Cellphone Sender
      type: object
    CellphoneSender:
      description: Cellphone sender schema
      discriminator:
        mapping:
          alpha_numeric: '#/components/schemas/AlphanumericCellphoneSender'
          numeric: '#/components/schemas/NumericCellphoneSender'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/AlphanumericCellphoneSender'
      - $ref: '#/components/schemas/NumericCellphoneSender'
      required:
      - type
      title: Cellphone Sender
      type: object
    EmailSender:
      allOf:
      - $ref: '#/components/schemas/EmailSender_allOf'
      - $ref: '#/components/schemas/BasicSender'
      description: Email sender schema
      required:
      - email
      - name
      title: Email Sender
      type: object
    EmailSenderPost:
      allOf:
      - $ref: '#/components/schemas/EmailSender_allOf'
      description: Email sender schema
      required:
      - email
      - name
      title: Email Sender
      type: object
    EmailSenderPutRequest:
      description: Email sender put request schema
      example:
        name: New sender name
      properties:
        name:
          description: Sender name
          example: New sender name
          type: string
      required:
      - name
      title: EmailSenderPutRequest
      type: object
    PhoneSender:
      allOf:
      - $ref: '#/components/schemas/PhoneSender_allOf'
      - $ref: '#/components/schemas/BasicSender'
      description: Phone sender schema
      required:
      - file
      - phone
      title: Phone Sender
      type: object
    PhoneSenderPost:
      allOf:
      - $ref: '#/components/schemas/PhoneSender_allOf'
      description: Phone sender schema
      required:
      - file
      - phone
      title: Phone Sender
      type: object
    BasicSender:
      description: Basic sender schema
      properties:
        sender_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        status:
          description: Status of the sender
          enum:
          - active
          - moderation
          - rejected
          example: moderation
          readOnly: true
          type: string
      required:
      - sender_id
      title: Basic Sender
      type: object
    AbstractSuppresionList:
      description: Abstract suppression list schema
      properties:
        type:
          description: Suppression type
          enum:
          - email
          - email_domain
          - email_user
          - cellphone
          - phone
          type: string
      required:
      - type
      title: AbstractSuppresionList
      type: object
    SuppressionList:
      description: Suppression list schema
      example:
        method: unsubscribe
        campaign_hash: campaign_hash
        created: ""
        id: 1
        type: email
        value: value
      properties:
        id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        value:
          description: Suppressed value
          type: string
        type:
          description: Suppression type
          enum:
          - email
          - email_domain
          - email_user
          - cellphone
          - phone
          type: string
        method:
          description: Suppression method
          enum:
          - unsubscribe
          - bounce
          - manual
          - other
          - forgotten
          type: string
        campaign_hash:
          pattern: "[a-zA-Z0-9_-]*"
          readOnly: true
          title: Hash
          type: string
        created:
          allOf:
          - $ref: '#/components/schemas/date_time'
          readOnly: true
      title: SuppressionList
      type: object
    CreateSuppressionListRequest:
      description: Suppression list schema
      discriminator:
        mapping:
          email: '#/components/schemas/SuppressionTypeEmail'
          email_domain: '#/components/schemas/SuppressionTypeEmailDomain'
          email_user: '#/components/schemas/SuppressionTypeUserEmail'
          cellphone: '#/components/schemas/SuppressionTypeCellphone'
          phone: '#/components/schemas/SuppressionTypePhone'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/SuppressionTypeEmail'
      - $ref: '#/components/schemas/SuppressionTypeEmailDomain'
      - $ref: '#/components/schemas/SuppressionTypeUserEmail'
      - $ref: '#/components/schemas/SuppressionTypeCellphone'
      - $ref: '#/components/schemas/SuppressionTypePhone'
      required:
      - type
      title: Suppression list
      type: object
    SuppressionTypeEmail:
      allOf:
      - $ref: '#/components/schemas/SuppressionTypeEmail_allOf'
      - $ref: '#/components/schemas/SuppressionTypeEmail_allOf_1'
      description: Suppression type email schema
      required:
      - type
      - value
      title: Suppression type email schema
      type: object
    SuppressionTypeEmailDomain:
      allOf:
      - $ref: '#/components/schemas/SuppressionTypeEmailDomain_allOf'
      - $ref: '#/components/schemas/SuppressionTypeEmailDomain_allOf_1'
      description: Suppression type email domain chema
      required:
      - type
      - value
      title: Suppression type email domain schema
      type: object
    SuppressionTypeUserEmail:
      allOf:
      - $ref: '#/components/schemas/SuppressionTypeUserEmail_allOf'
      - $ref: '#/components/schemas/SuppressionTypeUserEmail_allOf_1'
      description: Suppression type email user chema
      required:
      - type
      - value
      title: Suppression type email user schema
      type: object
    SuppressionTypeCellphone:
      allOf:
      - $ref: '#/components/schemas/SuppressionTypeCellphone_allOf'
      - $ref: '#/components/schemas/SuppressionTypeCellphone_allOf_1'
      description: Suppression type Cellphone chema
      required:
      - type
      - value
      title: Suppression type Cellphone schema
      type: object
    SuppressionTypePhone:
      allOf:
      - $ref: '#/components/schemas/SuppressionTypePhone_allOf'
      - $ref: '#/components/schemas/SuppressionTypePhone_allOf_1'
      description: Suppression type Phone chema
      required:
      - type
      - value
      title: Suppression type Phone schema
      type: object
    DeleteSuppressionListConflictsErrors:
      allOf:
      - $ref: '#/components/schemas/unremovable_entry'
      - $ref: '#/components/schemas/BaseConflict'
      title: DeleteSuppressionListConflictsErrors
      type: object
    unremovable_entry:
      description: Error schema for conflict when the suppression value requested
        for deletion has other method than manual
      properties:
        errors:
          $ref: '#/components/schemas/unremovable_entry_errors'
      title: unremovable_entry
      type: object
    Tag:
      description: Tag schema
      example:
        color: '#FFFFFF'
        name: Your custom tag
        tag_id: 1
      properties:
        tag_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        name:
          description: Name of the tag
          example: Your custom tag
          type: string
        color:
          description: Main color of the tag
          example: '#FFFFFF'
          type: string
      title: Tag
      type: object
    TagRequest:
      description: Tag schema request
      example:
        color: '#FFFFFF'
        name: Your custom tag
      properties:
        name:
          description: Name of the tag
          example: Your custom tag
          type: string
        color:
          description: Main color of the tag
          example: '#FFFFFF'
          type: string
      title: Tag
      type: object
    Domain:
      description: Domain schema
      example:
        list_id: "1"
        domain: e-goi.com
        status: active
      properties:
        domain:
          description: Domain
          example: e-goi.com
          type: string
        list_id:
          description: List id
          example: "1"
          type: string
        status:
          description: Domain status
          enum:
          - active
          - inactive
          readOnly: true
          type: string
      title: Domain
      type: object
    Goal:
      description: Goal schema
      example:
        domain: www.e-goi.com
        name: Button click
        id: 1
        config: null
      properties:
        domain:
          description: Domain where goal exists
          example: www.e-goi.com
          type: string
        name:
          description: Goal name
          example: Button click
          type: string
        id:
          description: Goal id
          example: 1
          type: number
        config:
          $ref: '#/components/schemas/GoalInfo'
      title: Goal
      type: object
    GoalInfo:
      description: GoalInfo
      discriminator:
        mapping:
          automatic: '#/components/schemas/GoalAutommaticInfo'
          manual: '#/components/schemas/GoalManualInfo'
          time: '#/components/schemas/GoalTimeInfo'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/GoalManualInfo'
      - $ref: '#/components/schemas/GoalAutommaticInfo'
      - $ref: '#/components/schemas/GoalTimeInfo'
      title: GoalInfo
      type: object
    GoalAutommaticInfo:
      description: Automatic goal info schema
      properties:
        type:
          description: Goal type
          enum:
          - automatic
          type: string
        rule:
          description: Goal rule
          enum:
          - url
          - title
          - download
          - external_url
          type: string
        condition:
          description: Goal condition
          enum:
          - contains
          - exactly
          - regex
          type: string
        pattern:
          description: Goal pattern
          example: checkout/confirmation
          type: string
        case_sensitive:
          description: Goal pattern case sensitive
          example: false
          type: boolean
        multiple_conversion:
          description: Goal is multiple conversion
          example: true
          type: boolean
      title: GoalAutommaticInfo
      type: object
    GoalManualInfo:
      description: Manual goal info schema
      properties:
        type:
          description: Goal type
          enum:
          - manual
          type: string
        multiple_conversion:
          description: Goal is multiple conversion
          example: true
          type: boolean
      title: GoalManualInfo
      type: object
    GoalTimeInfo:
      description: Time goal info schema
      properties:
        type:
          description: Goal type
          enum:
          - time
          type: string
        minutes:
          description: Goal trigger time in minutes
          example: 10
          format: double
          type: number
      title: GoalTimeInfo
      type: object
    User:
      allOf:
      - $ref: '#/components/schemas/User_allOf'
      description: User schema
      title: User
      type: object
    UserPost:
      allOf:
      - $ref: '#/components/schemas/UserPost_allOf'
      description: User schema
      title: User
      type: object
    UserPostRequest:
      allOf:
      - $ref: '#/components/schemas/UserPostRequest_allOf'
      - $ref: '#/components/schemas/ComplexUserPost'
      description: User post request schema
      title: UserPostRequest
      type: object
    ComplexUser:
      allOf:
      - $ref: '#/components/schemas/ComplexUser_allOf'
      - $ref: '#/components/schemas/UserPost'
      description: Complex user schema
      title: Complex User
      type: object
    ComplexUserPost:
      allOf:
      - $ref: '#/components/schemas/ComplexUser_allOf'
      - $ref: '#/components/schemas/UserPost'
      description: Complex user schema
      title: Complex User
      type: object
    Country:
      description: Country schema
      example:
        country: 1
        country_code: "351"
        name: Portugal
        currency: EUR
        iso_code: PT
      properties:
        country:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        name:
          description: Name of the country
          example: Portugal
          type: string
        iso_code:
          description: ISO code of the country
          example: PT
          type: string
        currency:
          description: Currency of the country
          example: EUR
          type: string
        country_code:
          description: Country code to be used in phone numbers
          example: "351"
          type: string
      title: Country
      type: object
    WebPushSite:
      description: WebPush site schema
      example:
        site: site
        list_id: 1
        site_id: 1
        name: name
        app_code: 7b89dfsb9a6ab6fbsfbasbd6f6
      properties:
        site_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        site:
          description: Webpush site
          type: string
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        app_code:
          description: App code
          example: 7b89dfsb9a6ab6fbsfbasbd6f6
          readOnly: true
          type: string
        name:
          description: Webpush name
          type: string
      required:
      - list_id
      - name
      - site
      title: WebPush Site
      type: object
    PostWebpushSiteConflict:
      allOf:
      - $ref: '#/components/schemas/name_already_exists'
      - $ref: '#/components/schemas/BaseConflict'
      description: Error schema for post webpush site conflicts
      title: PostWebpushSiteConflict
      type: object
    name_already_exists:
      description: Error schema for conflict when the provided webpush name already
        exists
      properties:
        errors:
          $ref: '#/components/schemas/name_already_exists_errors'
      title: name_already_exists
      type: object
    WebhookActionSchema:
      description: Action that will trigger the webhook
      enum:
      - forget_subscription
      - change_consent
      - web_push_bounce
      - web_push_click
      - web_push_delivered
      - web_push_open
      - web_push_send
      - web_push_subscription
      - web_push_unsubscription
      - email_send
      - email_open
      - email_click
      - email_soft_bounce
      - email_hard_bounce
      - sms_send
      - voice_send
      - unsubscribe
      - subscription
      - edit_subscription
      - resubscription
      - facebook_like
      - social_share
      - double_optin
      - email_spam_complaint
      - email_field_disable
      - cellphone_field_disable
      - phone_field_disable
      - push_send
      - push_open
      - push_click
      - push_received
      - push_error
      - push_canceled
      - new_order
      - cart_update
      - goal_conversion
      - product_view
      title: WebhookActionSchema
      type: string
    Webhook:
      description: Webhook schema
      example:
        list_id: 1
        webhook_id: 1
        fields:
        - fields
        - fields
        actions:
        - null
        - null
        url: url
      properties:
        webhook_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        url:
          description: |-
            Url to send the webhook:
             *       Note: Only 'http' or 'https' protocols are supported
          type: string
        actions:
          description: Action that will trigger the webhook
          items:
            $ref: '#/components/schemas/WebhookActionSchema'
          type: array
        fields:
          description: Array of contact field IDs to be displayed in the webhook
          items:
            type: string
          type: array
      required:
      - actions
      - list_id
      - url
      title: Webhook
      type: object
    BadRequest:
      properties:
        type:
          description: RFC for status code definitions
          example: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
          type: string
        title:
          description: Error title
          enum:
          - Bad Request
          type: string
        status:
          description: Status code
          example: 400
          type: integer
        detail:
          description: Error detail
          example: The server cannot or will not process the request due to something
            that is perceived to be a client error
          type: string
      title: Bad Request
      type: object
    Conflict:
      allOf:
      - $ref: '#/components/schemas/Conflict_allOf'
      - $ref: '#/components/schemas/BaseConflict'
      title: Conflict
      type: object
    BaseConflict:
      properties:
        type:
          description: RFC for status code definitions
          example: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
          type: string
        title:
          description: Error title
          enum:
          - Conflict
          type: string
        status:
          description: Status code
          example: 409
          type: integer
        detail:
          description: Error detail
          example: The request could not be completed due to a conflict with the current
            state of the target resource
          type: string
      title: BaseConflict
      type: object
    Forbidden:
      properties:
        type:
          description: RFC for status code definitions
          example: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
          type: string
        title:
          description: Error title
          enum:
          - Forbidden
          type: string
        status:
          description: Status code
          example: 403
          type: integer
        detail:
          description: Error detail
          example: The server understood the request but refuses to authorize it
          type: string
      title: Forbidden
      type: object
    InternalServerError:
      properties:
        type:
          description: RFC for status code definitions
          example: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
          type: string
        title:
          description: Error title
          enum:
          - Internal Server Error
          type: string
        status:
          description: Status code
          example: 500
          type: integer
        detail:
          description: Error detail
          example: The server encountered an unexpected condition that prevented it
            from fulfilling the request
          type: string
      title: Internal Server Error
      type: object
    NotFound:
      properties:
        type:
          description: RFC for status code definitions
          example: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
          type: string
        title:
          description: Error title
          enum:
          - NotFound
          type: string
        status:
          description: Status code
          example: 404
          type: integer
        detail:
          description: Error detail
          example: The origin server did not find a current representation for the
            target resource or is not willing to disclose that one exists
          type: string
      title: Not Found
      type: object
    PayloadTooLarge:
      properties:
        type:
          description: RFC for status code definitions
          example: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
          type: string
        title:
          description: Error title
          enum:
          - Payload Too Large
          type: string
        status:
          description: Status code
          example: 413
          type: integer
        detail:
          description: Error detail
          example: Server is refusing to process a request because the request payload
            is larger than the server is willing or able to process.
          type: string
      title: Payload Too Large
      type: object
    RequestEntityTooLarge:
      properties:
        type:
          description: RFC for status code definitions
          example: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
          type: string
        title:
          description: Error title
          enum:
          - Request Entity Too Large
          type: string
        status:
          description: Status code
          example: 314
          type: integer
        detail:
          description: Error detail
          example: The server is refusing to process a request because the request
            entity is larger than the server is willing or able to process.
          type: string
      title: Request Entity Too Large
      type: object
    RequestTimeout:
      properties:
        type:
          description: RFC for status code definitions
          example: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
          type: string
        title:
          description: Error title
          enum:
          - Request Timeout
          type: string
        status:
          description: Status code
          example: 408
          type: integer
        detail:
          description: Error detail
          example: The server did not receive a complete request from the client within
            the server’s allotted timeout period
          type: string
      title: Request Timeout
      type: object
    ServiceUnavailable:
      properties:
        type:
          description: RFC for status code definitions
          example: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
          type: string
        title:
          description: Error title
          enum:
          - Service Unavailable
          type: string
        status:
          description: Status code
          example: 503
          type: integer
        detail:
          description: Error detail
          example: "The server is currently unable to handle the request due to a\
            \ temporary overload or scheduled maintenance, whichwill likely be alleviated\
            \ after some delay"
          type: string
      title: Service Unavailable
      type: object
    TooManyRequests:
      properties:
        type:
          description: RFC for status code definitions
          example: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
          type: string
        title:
          description: Error title
          enum:
          - Too Many Requests
          type: string
        status:
          description: Status code
          example: 429
          type: integer
        detail:
          description: Error detail
          example: The user has sent too many requests in a given amount of time
          type: string
      title: Too Many Requests
      type: object
    Unauthorized:
      properties:
        type:
          description: RFC for status code definitions
          example: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
          type: string
        title:
          description: Error title
          enum:
          - Unauthorized
          type: string
        status:
          description: Status code
          example: 401
          type: integer
        detail:
          description: Error detail
          example: The request has not been applied because it lacks valid authentication
            credentials for the target resource
          type: string
      title: Unauthorized
      type: object
    UnprocessableEntity:
      properties:
        errors:
          description: Information about the input validation
          type: object
        type:
          description: RFC for status code definitions
          example: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
          type: string
        title:
          description: Error title
          enum:
          - Unprocessable Entity
          type: string
        status:
          description: Status code
          example: 422
          type: integer
        detail:
          description: Error detail
          example: "The server understands the content type of the request entity,\
            \ and the syntax of the request entity is correct but was unable to process\
            \ the contained instructions"
          type: string
      title: Unprocessable Entity
      type: object
    id:
      example: 1
      minimum: 1
      readOnly: true
      title: ID
      type: integer
    queryId:
      example: 1
      minimum: 1
      title: ID
      type: integer
    hash:
      pattern: "[a-zA-Z0-9_-]*"
      readOnly: true
      title: Hash
      type: string
    pushAppId:
      pattern: "[a-zA-Z0-9_-]*"
      title: Push App Id
      type: string
    language:
      default: en
      description: Current language
      enum:
      - en
      - pt
      - br
      - es
      - de
      - hu
      - fr
      title: language
      type: string
    date:
      description: The date
      format: date
      title: date
      type: string
    date_time:
      description: The date and time
      format: date-time
      title: date_time
      type: string
    BulkActionResponse:
      description: Bulk action response schema
      example:
        success:
        - 1
        - 3
        error:
        - 2
      properties:
        success:
          description: Array of succeeded operations
          items:
            $ref: '#/components/schemas/queryId'
          type: array
        error:
          description: Array of unsuccessful operations
          items:
            $ref: '#/components/schemas/queryId'
          type: array
      title: BulkActionResponse
      type: object
    AcceptedResponse:
      description: Accepted response schema
      example:
        result: success
      properties:
        result:
          enum:
          - success
          type: string
      title: AcceptedResponse
      type: object
    FieldId:
      pattern: "[a-zA-Z0-9_-]*"
      title: FieldId
      type: string
    AutomationCollection:
      description: Collection of automations
      example:
        total_items: 1
        items:
        - null
        - null
      properties:
        total_items:
          description: Returned automations
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned automations
          items:
            $ref: '#/components/schemas/Automation'
          type: array
      title: AutomationCollection
      type: object
    CampaignsCollection:
      description: Collection of Campaigns
      example:
        total_items: 1
        items:
        - end_date: ""
          thumbnail: //bo29.e-goi.com/recursos/resource_folder/listas/name_image.jpg
          list_id: 1
          created: ""
          channel: email
          title: subject of campaign
          schedule_date:
            date: ""
            enabled: true
          created_by: 1
          internal_name: your internal name
          campaign_hash: campaign_hash
          group_id: 1
          updated: ""
          status: sent
          start_date: ""
        - end_date: ""
          thumbnail: //bo29.e-goi.com/recursos/resource_folder/listas/name_image.jpg
          list_id: 1
          created: ""
          channel: email
          title: subject of campaign
          schedule_date:
            date: ""
            enabled: true
          created_by: 1
          internal_name: your internal name
          campaign_hash: campaign_hash
          group_id: 1
          updated: ""
          status: sent
          start_date: ""
      properties:
        total_items:
          description: Returned campaigns
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned campaigns
          items:
            $ref: '#/components/schemas/Campaign'
          type: array
      title: CampaignsCollection
      type: object
    CampaignHash:
      example:
        campaign_hash: campaign_hash
      properties:
        campaign_hash:
          pattern: "[a-zA-Z0-9_-]*"
          readOnly: true
          title: Hash
          type: string
      title: CampaignHash
      type: object
    patchVoiceCampaign_200_response:
      example:
        campaign_hash: campaign_hash
      properties:
        campaign_hash:
          pattern: "[a-zA-Z0-9_-]*"
          readOnly: true
          title: Hash
          type: string
      type: object
    CampaignGroupCollection:
      description: Collection of campaign groups
      example:
        total_items: 1
        items:
        - null
        - null
      properties:
        total_items:
          description: Returned campaign groups
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned tags
          items:
            $ref: '#/components/schemas/CampaignGroup'
          type: array
      title: CampaignGroupCollection
      type: object
    Domain_Collection:
      description: Collection of Connected Sites
      example:
        total_items: 1
        items:
        - list_id: "1"
          domain: e-goi.com
        - list_id: "1"
          domain: e-goi.com
      properties:
        total_items:
          description: Returned domains
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned domains
          items:
            $ref: '#/components/schemas/ConnectedSitesDomain'
          type: array
      title: Domain Collection
      type: object
    ActivityCollection:
      description: Collection of contact activities
      example:
        items:
        - null
        - null
      properties:
        items:
          description: Returned contact activities
          items:
            $ref: '#/components/schemas/ContactActivity'
          type: array
      title: ActivityCollection
      type: object
    getAllContacts_extra_field_id_parameter:
      properties:
        field_id:
          description: Extra field id
          example: value
          type: string
        other_field_id:
          description: Extra field id
          example: value
          type: string
      type: object
    ContactCollection:
      description: Collection of contacts
      example:
        total_items: 1
        items:
        - null
        - null
      properties:
        total_items:
          description: Total returned contacts
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned contacts
          items:
            $ref: '#/components/schemas/Contact'
          type: array
      title: ContactCollection
      type: object
    searchContacts_200_response:
      description: Collection of contacts
      example:
        items:
        - list_id: 1
          contact_id: 8f3a27ef26
        - list_id: 1
          contact_id: 8f3a27ef26
      properties:
        items:
          description: Returned contacts
          items:
            $ref: '#/components/schemas/ContactSearchResponse'
          type: array
      type: object
    CNamesCollection:
      description: Collection of cnames
      example:
        total_items: 1
        items:
        - cname_id: 1
          value: mkt.example.com
          status: verified
        - cname_id: 1
          value: mkt.example.com
          status: verified
      properties:
        total_items:
          description: Total number of cnames returned
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned cnames
          items:
            $ref: '#/components/schemas/CName'
          type: array
      title: CNamesCollection
      type: object
    CatalogCollection:
      description: Collection of catalogs
      example:
        total_items: 1
        items:
        - catalog_id: 1
          created: ""
          language: en
          currency: eur
          title: Catalog title
          updated: ""
        - catalog_id: 1
          created: ""
          language: en
          currency: eur
          title: Catalog title
          updated: ""
      properties:
        total_items:
          description: Total of returned catalogs
          example: 1
          minimum: 0
          type: integer
        items:
          description: List of catalogs
          items:
            $ref: '#/components/schemas/Catalog'
          type: array
      title: CatalogCollection
      type: object
    getAllProducts_custom_attributes_parameter:
      properties:
        alias:
          description: Custom attribute alias
          example: value
          type: string
        other_alias:
          description: "Custom attribute alias, defined in import"
          example: value
          type: string
      type: object
    ProductCollection:
      description: Collection of products
      example:
        total_items: 1
        items:
        - null
        - null
      properties:
        total_items:
          description: Total of returned products
          example: 1
          minimum: 0
          type: integer
        items:
          description: List of products
          items:
            $ref: '#/components/schemas/Product'
          type: array
      title: ProductCollection
      type: object
    FieldCollection:
      description: Collection of fields
      example:
        items:
        - null
        - null
      properties:
        items:
          description: Returned fields
          items:
            $ref: '#/components/schemas/ComplexField'
          type: array
      title: FieldCollection
      type: object
    FieldOptionsCollection:
      description: Collection of field options
      example:
        items:
        - br: Brazilian portuguese example
          de: German example
          pt: Portuguese example
          en: English example
          option_id: 1
          fr: French example
          hu: Hungarian example
          es: Spanish example
        - br: Brazilian portuguese example
          de: German example
          pt: Portuguese example
          en: English example
          option_id: 1
          fr: French example
          hu: Hungarian example
          es: Spanish example
      properties:
        items:
          description: Returned field options
          items:
            $ref: '#/components/schemas/FieldOption'
          type: array
      title: FieldOptionsCollection
      type: object
    ListCollection:
      description: Collection of lists
      example:
        total_items: 1
        items:
        - internal_name: Internal name
          list_id: 1
          group_id: 0
          created: ""
          public_name: Public name
          updated: ""
          status: active
        - internal_name: Internal name
          list_id: 1
          group_id: 0
          created: ""
          public_name: Public name
          updated: ""
          status: active
      properties:
        total_items:
          description: Returned lists
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned lists
          items:
            $ref: '#/components/schemas/List'
          type: array
      title: ListCollection
      type: object
    enableTe_request:
      properties:
        domain:
          description: Website's Domain without protocol
          example: e-goi.com
          type: string
        list_id:
          description: Website's List
          example: 1
          type: integer
      required:
      - domain
      type: object
    OperationsCollection:
      description: Collection of operations in queue
      example:
        total_items: 1
        items:
        - created: ""
          operation_id: 1
          type: import_contacts
          operation_data:
            internal_name: internal_name
            campaign_hash: campaign_hash
          created_by: 1
          status: queued
          start_date: ""
        - created: ""
          operation_id: 1
          type: import_contacts
          operation_data:
            internal_name: internal_name
            campaign_hash: campaign_hash
          created_by: 1
          status: queued
          start_date: ""
      properties:
        total_items:
          description: Total amount of operations in queue
          example: 1
          minimum: 0
          type: integer
        items:
          description: Operations in queue
          items:
            $ref: '#/components/schemas/Operation'
          type: array
      title: OperationsCollection
      type: object
    AdvancedReportsCollection:
      description: Collection of advanced reports
      example:
        total_items: 1
        items:
        - file: file
          created: ""
          title: Report title
          hash: hash
          advanced_report_id: 1
          status: queued
        - file: file
          created: ""
          title: Report title
          hash: hash
          advanced_report_id: 1
          status: queued
      properties:
        total_items:
          description: Total advanced reports
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned advanced reports
          items:
            $ref: '#/components/schemas/AdvancedReport'
          type: array
      title: AdvancedReportsCollection
      type: object
    SegmentCollection:
      description: Collection of segments
      example:
        total_items: 1
        items:
        - null
        - null
      properties:
        total_items:
          description: Total returned segments
          example: 1
          type: integer
        items:
          description: Returned segments
          items:
            $ref: '#/components/schemas/Segment'
          type: array
      title: SegmentCollection
      type: object
    CellphoneSenderCollection:
      description: Collection of phone senders
      example:
        items:
        - null
        - null
      properties:
        items:
          description: Returned cellphone senders
          items:
            $ref: '#/components/schemas/CellphoneSender'
          type: array
      title: CellphoneSenderCollection
      type: object
    EmailSenderCollection:
      description: Collection of email senders
      example:
        items:
        - null
        - null
      properties:
        items:
          description: Returned email senders
          items:
            $ref: '#/components/schemas/EmailSender'
          type: array
      title: EmailSenderCollection
      type: object
    PhoneSenderCollection:
      description: Collection of phone senders
      example:
        items:
        - null
        - null
      properties:
        items:
          description: Returned phone senders
          items:
            $ref: '#/components/schemas/PhoneSender'
          type: array
      title: PhoneSenderCollection
      type: object
    SuppressionListItems:
      description: Suppression list items
      example:
        total_items: 1
        items:
        - method: unsubscribe
          campaign_hash: campaign_hash
          created: ""
          id: 1
          type: email
          value: value
        - method: unsubscribe
          campaign_hash: campaign_hash
          created: ""
          id: 1
          type: email
          value: value
      properties:
        total_items:
          description: Total of suppressed items
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned suppression list
          items:
            $ref: '#/components/schemas/SuppressionList'
          type: array
      title: SuppressionListItems
      type: object
    TagCollection:
      description: Collection of tags
      example:
        total_items: 1
        items:
        - color: '#FFFFFF'
          name: Your custom tag
          tag_id: 1
        - color: '#FFFFFF'
          name: Your custom tag
          tag_id: 1
      properties:
        total_items:
          description: Returned tags
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned tags
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      title: TagCollection
      type: object
    DomainCollection:
      description: Collection of Domains
      example:
        total_items: 1
        items:
        - list_id: "1"
          domain: e-goi.com
          status: active
        - list_id: "1"
          domain: e-goi.com
          status: active
      properties:
        total_items:
          description: Returned domains
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned domains
          items:
            $ref: '#/components/schemas/Domain'
          type: array
      title: DomainCollection
      type: object
    GoalCollection:
      description: Collection of Goals
      example:
        total_items: 1
        items:
        - domain: www.e-goi.com
          name: Button click
          id: 1
          config: null
        - domain: www.e-goi.com
          name: Button click
          id: 1
          config: null
      properties:
        total_items:
          description: Returned goals
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned goals
          items:
            $ref: '#/components/schemas/Goal'
          type: array
      title: GoalCollection
      type: object
    UserCollection:
      description: Collection of users
      example:
        total_items: 1
        items:
        - null
        - null
      properties:
        total_items:
          description: Returned users
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned users
          items:
            $ref: '#/components/schemas/User'
          type: array
      title: UserCollection
      type: object
    CountryCollection:
      description: Collection of countries
      example:
        total_items: 1
        items:
        - country: 1
          country_code: "351"
          name: Portugal
          currency: EUR
          iso_code: PT
        - country: 1
          country_code: "351"
          name: Portugal
          currency: EUR
          iso_code: PT
      properties:
        total_items:
          description: Returned countries
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned countries
          items:
            $ref: '#/components/schemas/Country'
          type: array
      title: CountryCollection
      type: object
    TagCollection_1:
      description: Collection of sites
      example:
        total_items: 1
        items:
        - site: site
          list_id: 1
          site_id: 1
          name: name
          app_code: 7b89dfsb9a6ab6fbsfbasbd6f6
        - site: site
          list_id: 1
          site_id: 1
          name: name
          app_code: 7b89dfsb9a6ab6fbsfbasbd6f6
      properties:
        total_items:
          description: Returned sites
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned sites
          items:
            $ref: '#/components/schemas/WebPushSite'
          type: array
      title: TagCollection
      type: object
    ListCollection_1:
      description: Collection of webhooks
      example:
        total_items: 1
        items:
        - list_id: 1
          webhook_id: 1
          fields:
          - fields
          - fields
          actions:
          - null
          - null
          url: url
        - list_id: 1
          webhook_id: 1
          fields:
          - fields
          - fields
          actions:
          - null
          - null
          url: url
      properties:
        total_items:
          description: Returned webhooks
          example: 1
          minimum: 0
          type: integer
        items:
          description: Returned webhooks
          items:
            $ref: '#/components/schemas/Webhook'
          type: array
      title: ListCollection
      type: object
    Automation_allOf:
      properties:
        automation_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        title:
          description: Automation title
          example: Example Automation
          type: string
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        status:
          description: Automation status
          enum:
          - active
          - inactive
          type: string
        created_by:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        allow_multiple_contacts:
          default: true
          description: "True if the automation allows multiple contacts, false otherwise"
          type: boolean
        contact_limit:
          description: |-
            Contact limit for the automation. Contact limit value (value '0' is returned if contact
                                            limit is not enabled)
          example: 10
          minimum: 0
          type: integer
        created:
          allOf:
          - $ref: '#/components/schemas/date'
          readOnly: true
        updated:
          allOf:
          - $ref: '#/components/schemas/date'
          readOnly: true
      type: object
      example: null
    AutomationPost_allOf:
      properties:
        title:
          description: Automation title
          example: Example Automation
          type: string
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        status:
          description: Automation status
          enum:
          - active
          - inactive
          type: string
        allow_multiple_contacts:
          default: true
          description: "True if the automation allows multiple contacts, false otherwise"
          type: boolean
        contact_limit:
          description: |-
            Contact limit for the automation. Contact limit value (value '0' is returned if contact
            limit is not enabled)
          example: 10
          minimum: 0
          type: integer
      type: object
      example: null
    Campaign_schedule_date:
      example:
        date: ""
        enabled: true
      properties:
        enabled:
          description: True if the campaign was scheduled
          type: boolean
        date:
          allOf:
          - $ref: '#/components/schemas/date_time'
      type: object
    AbstractCampaignSendRequest_segments:
      description: Segments where the campaign will be sent
      properties:
        normal:
          description: Array of IDs of normal segments
          items:
            type: integer
          type: array
        auto:
          description: Array of IDs of automatic segments
          items:
            type: integer
          type: array
        tag:
          description: Array of IDs of segments of type 'tag'
          items:
            type: integer
          type: array
      type: object
    LimitHourActionSend_limit_hour:
      description: Hour limit to send the campaign
      properties:
        hour_start:
          description: Hour start limit
          example: 13:00
          pattern: "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$"
          type: string
        hour_end:
          description: Hour end limit
          example: 15:00
          pattern: "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$"
          type: string
      type: object
    campaign_sent_last_30_days_errors:
      properties:
        campaign_sent_last_30_days:
          description: Occurs when the campaign was sent in the last 30 days
          enum:
          - This campaign cant be deleted since it was sent in the last 30 days
          type: string
      type: object
    CampaignEmailContentHtml_allOf:
      properties:
        type:
          enum:
          - html
          type: string
        body:
          description: HTML code of the campaign
          type: string
      type: object
      example: null
    CampaignEmailRssContentHtml_allOf:
      properties:
        type:
          enum:
          - html
          example: html
          type: string
        body:
          description: HTML code of the rss campaign
          example: "<body>{{FEEDBLOCK:https:\\/\\/example.com\\/?feed=egoi_rssfeed_gcoUFuaaBeAs4tfSY}}{{FEEDITEMS:count=1}}<div\
            \ class='builder-actions-control selected'><table border='0' cellpadding='0'\
            \ cellspacing='0' class='email-container' style='border-spacing: 0px;\
            \ border-collapse: collapse; table-layout: fixed; margin: auto;' width='600'\
            \ align='center' data-compile='true'><tbody><tr><td dir='ltr' valign='top'\
            \ width='100%' bgcolor='#ffffff' style='background-color: rgb(255, 255,\
            \ 255); padding: 20px;'><table border='0' cellpadding='0' cellspacing='0'\
            \ class='row' width='100%' style='border-spacing: 0px; border-collapse:\
            \ collapse; table-layout: fixed; margin: 0px auto;'><tbody><tr><th class='stack-column-center\
            \ columns first' valign='top' width='33.333333333333336%' style='font-weight:\
            \ 400; padding-right: 8px;'><table border='0' cellpadding='0' cellspacing='0'\
            \ width='100%' style='border-spacing: 0px; border-collapse: collapse;\
            \ table-layout: fixed; margin: 0px auto;'><tbody><tr><td dir='ltr' style='padding:\
            \ 0px;' valign='top'><table border='0' cellpadding='0' cellspacing='0'\
            \ class='builder-image-control image-6cbc6cd4b0f6c869b1d651e4288caa1c'\
            \ data-control='image' width='100%' data-compile='true' style='border-spacing:\
            \ 0px; border-collapse: collapse; table-layout: fixed; margin: 0px auto;'><tbody><tr><td\
            \ valign='top' style=''><table border='0' cellpadding='0' cellspacing='0'\
            \ align='center' width='' style='border-spacing: 0px; border-collapse:\
            \ collapse; table-layout: fixed; margin: 0px auto;'><tbody><tr><td style='border:\
            \ 0px;'><a href='{{FEEDITEM:LINK}}'><img align='center' border='0' class='float-center\
            \ fluid' style='display: block; margin: 0px auto; height: auto; max-width:\
            \ 179px; border: 0px !important; outline: none !important; text-decoration:\
            \ none !important;' src='{{FEEDITEM:IMAGE}}' alt='beanie-768x768' height='179'\
            \ width='179'><\\/a><\\/td><\\/tr><\\/tbody><\\/table><\\/td><\\/tr><\\\
            /tbody><\\/table><\\/td><\\/tr><\\/tbody><\\/table><\\/th><th class='stack-column-center\
            \ columns last' valign='top' width='66.66666666666667%' style='font-weight:\
            \ 400; padding-left: 8px;'><table border='0' cellpadding='0' cellspacing='0'\
            \ width='100%' style='border-spacing: 0px; border-collapse: collapse;\
            \ table-layout: fixed; margin: 0px auto;'><tbody><tr><td dir='ltr' style='padding:\
            \ 0px;' valign='top'><table data-control='title' width='100%' class='title-641c2ce04833885b026fd1e0f46c2973'\
            \ id='641c2ce0-4833-885b-026f-d1e0f46c2973' data-compile='true' style='border-spacing:\
            \ 0px; border-collapse: collapse; table-layout: fixed; margin: 0px auto;'><tbody><tr><td\
            \ style=''><p style='font-family: Arial; font-size: 24px; color: rgb(0,\
            \ 0, 0); line-height: 150%; text-align: left; padding-top: 0px; padding-bottom:\
            \ 0px; margin: 0px;'>{{FEEDITEM:TITLE}}<\\/p><\\/td><\\/tr><\\/tbody><\\\
            /table><table data-control='paragraph' width='100%' class='paragraph-12fc4dd322cf0a3cd43032e85db67593'\
            \ id='12fc4dd3-22cf-0a3c-d430-32e85db67593' data-compile='true' style='border-spacing:\
            \ 0px; border-collapse: collapse; table-layout: fixed; margin: 0px auto;'><tbody><tr><td\
            \ class='undefined' style=''><p style='font-family: Arial; font-size:\
            \ 16px; color: rgb(109, 109, 109); line-height: 200%; text-align: left;\
            \ padding-top: 0px; padding-bottom: 0px; margin: 0px; overflow: hidden;'>{{FEEDITEM:DESCRIPTION}}<\\\
            /p><\\/td><\\/tr><\\/tbody><\\/table><\\/td><\\/tr><\\/tbody><\\/table><\\\
            /th><\\/tr><\\/tbody><\\/table><\\/td><\\/tr><\\/tbody><\\/table><\\/div>{{ENDFEEDITEMS}}{{ENDFEEDBLOCK}}<\\\
            /body>"
          type: string
        feed:
          description: Valid url for a rss feed
          example: https://example.com/?feed=egoi_rssfeed_gcoUFuaaBeAs4tfSY
          type: string
      type: object
      example: null
    CampaignEmailContentTemplate_allOf:
      properties:
        type:
          enum:
          - template
          type: string
        template_id:
          description: ID of the template for this campaign (Email builder templates
            are not allowed)
          type: integer
      type: object
      example: null
    CampaignEmailContentWebPage_allOf:
      properties:
        type:
          enum:
          - web_page
          type: string
        url:
          description: Campaign url
          type: string
        use_page_title:
          default: false
          description: True to use page title as the campaign title
          type: boolean
      type: object
      example: null
    CampaignEmailContentFile_allOf:
      properties:
        type:
          enum:
          - file
          type: string
        file:
          description: Campaign file
          type: string
      type: object
      example: null
    CampaignEmailContentHtmlPatch_allOf:
      properties:
        body:
          description: HTML code of the campaign
          type: string
      type: object
      example: null
    HeaderFooter_header_links:
      description: Ignored if provided ID is from a custom template
      example:
        unsubscribe: false
        edit: false
        forward: false
        view_web: false
        twitter_share: false
        social_share: false
        facebook_share: false
      properties:
        forward:
          default: false
          description: Use view forward header link
          type: boolean
        view_web:
          default: false
          description: Use view view in web header link
          type: boolean
        unsubscribe:
          default: false
          description: Use view unsubscribe header link
          type: boolean
        edit:
          default: false
          description: Use view edit header link
          type: boolean
        social_share:
          default: false
          description: Use view social share header link
          type: boolean
        facebook_share:
          default: false
          description: Use view facebook share header link
          type: boolean
        twitter_share:
          default: false
          description: Use view twitter share header link
          type: boolean
      type: object
    HeaderFooter_footer_links:
      description: Ignored if provided ID is from a custom template
      example:
        unsubscribe: false
        edit: false
        forward: false
        view_web: false
        twitter_share: false
        social_share: false
        facebook_share: false
      properties:
        forward:
          default: false
          description: Use view forward footer link
          type: boolean
        view_web:
          default: false
          description: Use view view in web footer link
          type: boolean
        unsubscribe:
          default: false
          description: Use view unsubscribe footer link
          type: boolean
        edit:
          default: false
          description: Use view edit footer link
          type: boolean
        social_share:
          default: false
          description: Use view social share footer link
          type: boolean
        facebook_share:
          default: false
          description: Use view facebook share footer link
          type: boolean
        twitter_share:
          default: false
          description: Use view twitter share footer link
          type: boolean
      type: object
    CampaignEmailScheduleRequest_allOf:
      properties:
        schedule_date:
          description: The date and time
          format: date-time
          title: date_time
          type: string
      type: object
      example: null
    PushCampaignPostRequest_actions:
      description: Actions for push campaign
      example:
        link: link
        type: url
        title: title
        cancel_label: cancel_label
      properties:
        type:
          description: Type of action
          enum:
          - url
          - deeplink
          type: string
        title:
          description: Action title
          type: string
        link:
          description: Action link (may be either URL or deeplink)
          type: string
        cancel_label:
          description: Action cancel label text
          type: string
      type: object
    PushCampaignPostRequest_geo_options:
      description: Push geolocation options
      example:
        duration: 0
        latitude: -151
        range: 0
        longitude: 36
      properties:
        latitude:
          description: Geolocation latitude
          maximum: 180
          minimum: -180
          type: integer
        longitude:
          description: Geolocation longitude
          maximum: 180
          minimum: -180
          type: integer
        range:
          description: Geolocation range
          minimum: 0
          type: integer
        duration:
          description: Geolocation duration
          minimum: 0
          type: integer
      type: object
    PushCampaignPostRequest_notification_options:
      description: Push notification options
      example:
        icon: icon
      properties:
        icon:
          description: Url for the icon of the notification
          type: string
      type: object
    PushCampaignPatchRequest_content:
      description: Campaign content
      example:
        message: Campaign message
      properties:
        message:
          description: Push campaign message
          example: Campaign message
          type: string
      type: object
    PushCampaignPatchRequest_geo_options:
      description: Push geolocation options
      example:
        latitude: -151
        range: 0
        longitude: 36
      properties:
        latitude:
          description: Geolocation latitude
          maximum: 180
          minimum: -180
          type: integer
        longitude:
          description: Geolocation longitude
          maximum: 180
          minimum: -180
          type: integer
        range:
          description: Geolocation range
          minimum: 0
          type: integer
      type: object
    SendPush_allOf:
      properties:
        app_id:
          pattern: "[a-zA-Z0-9_-]*"
          title: Push App Id
          type: string
      type: object
      example: null
    SmartSmsCampaign_campaign_content:
      example:
        message: message
      properties:
        message:
          description: Smart SMS message
          type: string
      required:
      - message
      type: object
    SmartSmsCampaignPatchRequest_campaign_content:
      example:
        message: message
      properties:
        message:
          description: Smart SMS message
          type: string
      type: object
    SmartSmsCampaignPatchRequest_page_content:
      example:
        page_url: page_url
        page_internal_name: page_internal_name
        page_html: page_html
      properties:
        page_url:
          description: Smart SMS page URL
          type: string
        page_html:
          description: Smart SMS page HTML
          type: string
        page_internal_name:
          description: |-
            Smart SMS page name. This is only applicable to campaigns with type 'import' or 'html'.
                                        Campaigns with type 'redirect' will ignore this parameter
          type: string
      type: object
    SendSmartSms_allOf:
      properties:
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
      type: object
      example: null
    SendSmartSms_allOf_1:
      properties:
        destination_field:
          description: |-
            Smart SMS campaign destination field. Must be 'cellphone' or the other field ID of type
                                            cellphone
          example: cellphone
          type: string
      type: object
      example: null
    SendSmartSms_allOf_2:
      properties:
        segments:
          $ref: '#/components/schemas/SmartSmsSegmentsActionSend'
      type: object
      example: null
    SmsCampaignPatchRequest_content:
      example:
        message: Campaign message
      properties:
        message:
          description: SMS campaign message
          example: Campaign message
          type: string
      type: object
    SendSms_allOf:
      properties:
        destination_field:
          description: |-
            SMS campaign destination field. Must be 'cellphone' or the other field ID of type
                                            cellphone
          example: cellphone
          type: string
      type: object
      example: null
    SendSms_allOf_1:
      properties:
        segments:
          $ref: '#/components/schemas/SmsSegmentsActionSend'
      type: object
      example: null
    VoiceCampaign_allOf:
      properties:
        internal_name:
          description: Voice campaign internal name
          type: string
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        group_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        content:
          $ref: '#/components/schemas/ContentVoice'
        sender_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
      type: object
      example: null
    VoicePatchCampaign_allOf:
      properties:
        internal_name:
          description: Voice campaign internal name
          type: string
        group_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        message:
          $ref: '#/components/schemas/ContentVoicePatch'
        sender_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
      type: object
      example: null
    AbstractSendVoice_allOf:
      properties:
        destination_field:
          description: Destination field of this campaign
          enum:
          - phone
          - cellphone
          - phone_failsafe_cellphone
          - cellphone_failsafe_phone
          - cellphone_phone
          type: string
      type: object
      example: null
    AbstractSendVoice_allOf_1:
      properties:
        unique_contacts_only:
          default: false
          description: True to send the campaign only to unique contacts
          type: boolean
      type: object
      example: null
    WebpushActions_inner:
      example:
        link: link
        title: title
      properties:
        title:
          description: Webpush action title
          type: string
        link:
          description: Webpush action link
          type: string
      type: object
    SendWebPush_allOf:
      properties:
        site_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
      type: object
      example: null
    CampaignGroupPost_allOf:
      properties:
        name:
          description: Name of the campaign group
          example: Your custom campaign group
          type: string
      type: object
      example: null
    CampaignGroup_allOf:
      properties:
        group_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        name:
          description: Name of the campaign group
          example: Your custom campaign group
          type: string
      type: object
      example: null
    EmailCampaignTemplate_allOf_sender_data:
      description: Information about the sender
      properties:
        name:
          description: Name of the sender
          example: Sender Name
          type: string
        value:
          description: Email of the sender
          example: example@e-goi.com
          type: string
      type: object
      example: null
    EmailCampaignTemplate_allOf_reply_to_data:
      description: Data of who to reply
      properties:
        name:
          description: Name for reply to
          example: Reply To
          type: string
        value:
          description: Email for reply to
          example: example2@e-goi.com
          type: string
      type: object
      example: null
    EmailCampaignTemplate_allOf:
      properties:
        sender_data:
          $ref: '#/components/schemas/EmailCampaignTemplate_allOf_sender_data'
        image:
          description: Template image
          example: ""
          type: string
        message_html_version:
          description: Html message
          type: string
        message_text_version:
          description: Text message
          type: string
        reply_to_data:
          $ref: '#/components/schemas/EmailCampaignTemplate_allOf_reply_to_data'
      type: object
      example: null
    PhoneCampaignTemplate_allOf:
      properties:
        message:
          description: Message
          type: string
        sender:
          description: Sender number
          type: string
        message_type:
          description: Message type
          enum:
          - normal
          - flash
          example: normal
          type: string
      type: object
      example: null
    SmsCampaignTemplate_allOf:
      properties:
        encoding:
          description: Message encoding
          enum:
          - gsm
          - unicode
          example: gsm
          type: string
        max_messages:
          description: Maximum number of messages
          example: 10
          minimum: 1
          type: integer
      type: object
      example: null
    VoiceCampaignTemplate_allOf:
      properties:
        file:
          description: Voice template message file
          example: ""
          type: string
        options:
          description: Extra options
          items:
            type: object
          type: array
      type: object
      example: null
    ComplexContact_allOf_email_stats:
      description: Email stats of the contact
      properties:
        sent:
          description: Emails sent to the contact
          example: 20
          type: integer
        opens:
          description: Emails opened by the contact
          example: 2
          type: integer
        clicks:
          description: Total number of clicks made by the contact
          example: 4
          type: integer
        soft_bounces:
          description: Soft bounces for the contact
          example: 5
          type: integer
        hard_bounces:
          description: Hard bounces for the contact
          example: 5
          type: integer
        forwards:
          description: Emails forwarded by the contact
          example: 2
          type: integer
        conversions:
          description: Total of conversions
          example: 1
          type: integer
        social_actions:
          description: Total of social actions for the contact
          example: 1
          type: integer
        last_send_date:
          description: Date of the last email sent to the contact
          format: date-time
          nullable: true
          type: string
        last_open_date:
          description: Date of the last email open of the contact
          format: date-time
          nullable: true
          type: string
        last_click_date:
          description: Date of the last email click of the contact
          format: date-time
          nullable: true
          type: string
        last_open_country:
          description: Country where the last email for that contact was opened
          example: Portugal
          nullable: true
          type: string
        last_open_region:
          description: Region where the last email for that contact was opened
          example: Porto
          nullable: true
          type: string
        last_open_city:
          description: City where the last email for that contact was opened
          example: Matosinhos
          nullable: true
          type: string
      readOnly: true
      type: object
      example: null
    ComplexContact_allOf_sms_stats:
      description: SMS stats of the contact
      properties:
        sent:
          description: SMS sent to the contact
          example: 5
          type: integer
        delivered:
          description: SMS delivered to the contact
          example: 5
          type: integer
      readOnly: true
      type: object
      example: null
    ComplexContact_allOf_push_stats:
      description: Push stats of the contact
      properties:
        sent:
          description: Push messages sent to the contact
          example: 5
          type: integer
        delivered:
          description: Push messages delivered to the contact
          example: 5
          type: integer
        not_delivered:
          description: Push messages that were not delivered to the contact
          example: 0
          type: integer
        views:
          description: Push messages that were viewed by the contact
          example: 4
          type: integer
        clicks:
          description: Total number of clicks made by the contact
          example: 3
          type: integer
        last_view_date:
          description: Date of the last push message view of the contact
          format: date-time
          nullable: true
          type: string
      readOnly: true
      type: object
      example: null
    ComplexContact_allOf_webpush_stats:
      description: Webpush stats of the contact
      properties:
        sent:
          description: Webpush messages sent to the contact
          example: 7
          type: integer
        delivered:
          description: Webpush messages delivered to the contact
          example: 7
          type: integer
        clicks:
          description: Total number of clicks made by the contact
          example: 2
          type: integer
        bounces:
          description: Bounces for the contact
          example: 0
          type: integer
        last_send_date:
          description: Date of the last webpush message sent to the contact
          format: date-time
          type: string
        last_delivery_date:
          description: Date of the last webpush message delivered to the contact
          format: date-time
          type: string
        last_click_date:
          description: Date of the last webpush message clicked by the contact
          format: date-time
          type: string
        last_bounce_date:
          description: Date of the last webpush bounce for the contact
          format: date-time
          type: string
      readOnly: true
      type: object
      example: null
    ComplexContact_allOf_voice_stats:
      description: Voice stats of the contact
      properties:
        sent:
          description: Voice campaigns sent to the contact
          example: 20
          type: integer
        answered:
          description: Voice campaigns answered by the contact
          example: 10
          type: integer
      readOnly: true
      type: object
      example: null
    ComplexContact_allOf:
      properties:
        email_stats:
          $ref: '#/components/schemas/ComplexContact_allOf_email_stats'
        sms_stats:
          $ref: '#/components/schemas/ComplexContact_allOf_sms_stats'
        push_stats:
          $ref: '#/components/schemas/ComplexContact_allOf_push_stats'
        webpush_stats:
          $ref: '#/components/schemas/ComplexContact_allOf_webpush_stats'
        voice_stats:
          $ref: '#/components/schemas/ComplexContact_allOf_voice_stats'
      type: object
      example: null
    ContactBaseFieldsSchema_base:
      allOf:
      - $ref: '#/components/schemas/ContactInsideBase'
      description: Contact base fields
      type: object
    ContactBaseFieldsPostSchema_base:
      allOf:
      - $ref: '#/components/schemas/ContactInsideBasePost'
      description: Contact base fields
      type: object
    ContactBaseFieldsWithIdSchema_base:
      allOf:
      - $ref: '#/components/schemas/ContactInsideBaseWithId'
      description: Contact base fields with contact_id
      type: object
    ContactBaseWithStatusNoRemovedFieldsSchema_base_push_token_android_inner:
      properties:
        app_id:
          pattern: "[a-zA-Z0-9_-]*"
          title: Push App Id
          type: string
        token:
          description: Android push app ID
          type: string
      type: object
    ContactBaseWithStatusNoRemovedFieldsSchema_base_push_token_ios_inner:
      properties:
        app_id:
          pattern: "[a-zA-Z0-9_-]*"
          title: Push App Id
          type: string
        token:
          description: Ios push app ID
          type: string
      type: object
    ContactBaseWithStatusNoRemovedFieldsSchema_base:
      description: Contact base fields
      properties:
        contact_id:
          example: 8f3a27ef26
          pattern: "[a-fA-F\\d]{10}"
          readOnly: true
          title: Contact ID
          type: string
        status:
          default: active
          description: Status of the contact
          enum:
          - active
          - inactive
          - unconfirmed
          type: string
        consent:
          description: Contact consent
          enum:
          - any
          - consent
          - contract
          - legitimate_interest
          - none
          - protect_vital_interests
          - public_interests
          - required_by_law
          - withdrawn
          type: string
        first_name:
          description: First name of the contact
          example: John
          type: string
        last_name:
          description: Last name of the contact
          example: Doe
          type: string
        birth_date:
          description: Birth date of the contact
          example: 1975-01-10
          format: date
          type: string
        language:
          $ref: '#/components/schemas/language'
        email:
          description: Email of the contact
          example: example@e-goi.com
          type: string
        email_status:
          description: Email channel status
          enum:
          - active
          - inactive
          type: string
        cellphone:
          description: Cellphone of the contact
          example: 351-300404336
          type: string
        cellphone_status:
          description: Cellphone channel status
          enum:
          - active
          - inactive
          type: string
        phone:
          description: Phone of the contact
          example: 351-300404336
          type: string
        phone_status:
          description: Phone channel status
          enum:
          - active
          - inactive
          type: string
        push_token_android:
          description: Android push token of the contact
          items:
            $ref: '#/components/schemas/ContactBaseWithStatusNoRemovedFieldsSchema_base_push_token_android_inner'
          type: array
        push_token_ios:
          description: IOS push token of the contact
          items:
            $ref: '#/components/schemas/ContactBaseWithStatusNoRemovedFieldsSchema_base_push_token_ios_inner'
          type: array
      type: object
    ContactBaseWithStatusFieldsSchema_base:
      description: Contact base fields
      properties:
        contact_id:
          example: 8f3a27ef26
          pattern: "[a-fA-F\\d]{10}"
          readOnly: true
          title: Contact ID
          type: string
        status:
          default: active
          description: Status of the contact
          enum:
          - active
          - inactive
          - removed
          - unconfirmed
          type: string
        consent:
          description: Contact consent
          enum:
          - any
          - consent
          - contract
          - legitimate_interest
          - none
          - protect_vital_interests
          - public_interests
          - required_by_law
          - withdrawn
          type: string
        first_name:
          description: First name of the contact
          example: John
          type: string
        last_name:
          description: Last name of the contact
          example: Doe
          type: string
        birth_date:
          description: Birth date of the contact
          example: 1975-01-10
          format: date
          type: string
        language:
          $ref: '#/components/schemas/language'
        email:
          description: Email of the contact
          example: example@e-goi.com
          type: string
        email_status:
          description: Email channel status
          enum:
          - active
          - inactive
          type: string
        cellphone:
          description: Cellphone of the contact
          example: 351-300404336
          type: string
        cellphone_status:
          description: Cellphone channel status
          enum:
          - active
          - inactive
          type: string
        phone:
          description: Phone of the contact
          example: 351-300404336
          type: string
        phone_status:
          description: Phone channel status
          enum:
          - active
          - inactive
          type: string
        push_token_android:
          description: Android push token of the contact
          items:
            $ref: '#/components/schemas/ContactBaseWithStatusNoRemovedFieldsSchema_base_push_token_android_inner'
          type: array
        push_token_ios:
          description: IOS push token of the contact
          items:
            $ref: '#/components/schemas/ContactBaseWithStatusNoRemovedFieldsSchema_base_push_token_ios_inner'
          type: array
      type: object
    ContactBaseWithStatusFieldsNoTokensSchema_base:
      description: Contact base fields
      properties:
        contact_id:
          example: 8f3a27ef26
          pattern: "[a-fA-F\\d]{10}"
          readOnly: true
          title: Contact ID
          type: string
        status:
          default: active
          description: Status of the contact
          enum:
          - active
          - inactive
          - removed
          - unconfirmed
          type: string
        consent:
          description: Contact consent
          enum:
          - any
          - consent
          - contract
          - legitimate_interest
          - none
          - protect_vital_interests
          - public_interests
          - required_by_law
          - withdrawn
          type: string
        first_name:
          description: First name of the contact
          example: John
          type: string
        last_name:
          description: Last name of the contact
          example: Doe
          type: string
        birth_date:
          description: Birth date of the contact
          example: 1975-01-10
          format: date
          type: string
        language:
          $ref: '#/components/schemas/language'
        email:
          description: Email of the contact
          example: example@e-goi.com
          type: string
        email_status:
          description: Email channel status
          enum:
          - active
          - inactive
          type: string
        cellphone:
          description: Cellphone of the contact
          example: 351-300404336
          type: string
        cellphone_status:
          description: Cellphone channel status
          enum:
          - active
          - inactive
          type: string
        phone:
          description: Phone of the contact
          example: 351-300404336
          type: string
        phone_status:
          description: Phone channel status
          enum:
          - active
          - inactive
          type: string
      type: object
    Attach_by_Contacts:
      properties:
        contacts:
          description: Array of contact IDs to attach the tag
          items:
            $ref: '#/components/schemas/contact_body_id'
          minItems: 1
          type: array
          uniqueItems: true
      required:
      - contacts
      title: Attach by Contacts
      type: object
      example: null
    Attach_by_Segment:
      properties:
        segment_id:
          type: string
      required:
      - segment_id
      title: Attach by Segment
      type: object
      example: null
    Detach_by_Contacts:
      properties:
        contacts:
          description: Array of contact IDs to dettach the tag
          items:
            $ref: '#/components/schemas/contact_body_id'
          minItems: 1
          type: array
          uniqueItems: true
      required:
      - contacts
      title: Detach by Contacts
      type: object
      example: null
    Detach_by_Segment:
      properties:
        segment_id:
          type: string
      required:
      - segment_id
      title: Detach by Segment
      type: object
      example: null
    ImportBulkFileRequestSchema_file:
      allOf:
      - $ref: '#/components/schemas/ContactBulkFile'
      description: File to import
      type: object
    ContactBulkFile_allOf:
      properties:
        url:
          description: |-
            Url from wich we will download the csv file:
             *       Note: Only 'http' or 'https' protocols are supported
          example: https://e-goi.com/file.csv
          type: string
      required:
      - url
      type: object
      example: null
    ContactBulkFile_allOf_1:
      properties:
        field_mapping:
          description: Contact Import File Field Mapping
          items:
            $ref: '#/components/schemas/contactFieldMappingFileBulkSchema'
          type: array
      required:
      - field_mapping
      type: object
      example: null
    ContactBulkFile_allOf_2:
      properties:
        separator:
          description: Csv column separator (defaults to ")
          example: '"'
          type: string
      type: object
      example: null
    ContactBulkFile_allOf_3:
      properties:
        delimiter:
          description: "Csv column delimiter (defaults to ,)"
          example: ","
          type: string
      type: object
      example: null
    ContactBaseFieldsBulkSchema_base:
      allOf:
      - $ref: '#/components/schemas/ContactInsideBaseBulk'
      description: Contact base fields
      type: object
    RemoveResponse_errors:
      example:
        invalid_data_type:
        - 44fc463242
        contact_not_in_list:
        - a47a947e2b
        invalid_unsubscription_reason:
        - cbb0077994
        - be9715c108
        - 649a15f483
        contact_already_removed:
        - a41a247e21
        invalid_unsubscription_method:
        - 732711d708
        - ba5b2b14aa
      properties:
        invalid_unsubscription_reason:
          example:
          - cbb0077994
          - be9715c108
          - 649a15f483
          items:
            $ref: '#/components/schemas/contact_id'
          type: array
        invalid_unsubscription_method:
          example:
          - 732711d708
          - ba5b2b14aa
          items:
            $ref: '#/components/schemas/contact_id'
          type: array
        invalid_data_type:
          example:
          - 44fc463242
          items:
            $ref: '#/components/schemas/contact_id'
          type: array
        contact_not_in_list:
          example:
          - a47a947e2b
          items:
            $ref: '#/components/schemas/contact_id'
          type: array
        contact_already_removed:
          example:
          - a41a247e21
          items:
            $ref: '#/components/schemas/contact_id'
          type: array
      type: object
    RequestItemsUnsubscribe_allOf:
      properties:
        contact_id:
          example: 8f3a27ef26
          pattern: "[a-fA-F\\d]{10}"
          title: Contact ID
          type: string
      type: object
      example: null
    Update_by_Contact:
      properties:
        type:
          description: Updates the provided contacts (excluding removed contacts)
          enum:
          - contacts
          type: string
        contacts:
          description: Array of contact IDs to update
          items:
            $ref: '#/components/schemas/contact_body_id'
          minItems: 1
          title: Update Contacts Request
          type: array
          uniqueItems: true
      required:
      - contacts
      - type
      title: Update by Contact
      type: object
      example: null
    Update_by_Segment:
      description: Segment ID to update contacts
      properties:
        type:
          description: Updates contacts in the selected segment (excluding removed
            contacts)
          enum:
          - segment
          type: string
        segment_id:
          description: Segment ID to update channel field
          title: Update Contacts Channel Field Request by segment
          type: string
      required:
      - segment_id
      - type
      title: Update by Segment
      type: object
      example: null
    Update_for_All:
      properties:
        type:
          description: Updates the contacts in the whole list (excluding removed contacts)
          enum:
          - all
          type: string
      required:
      - type
      title: Update for All
      type: object
      example: null
    ContactActivityClick_allOf_action_data:
      description: Action data
      properties:
        campaign_hash:
          description: campaign hash
          example: 97b5a6cecf
          type: string
        url:
          description: url
          example: example.com
          type: string
      type: object
      example: null
    ContactActivityClick_allOf:
      properties:
        action_data:
          $ref: '#/components/schemas/ContactActivityClick_allOf_action_data'
      type: object
      example: null
    unique_field_in_use_errors:
      properties:
        unique_field_in_use:
          description: Occurs when a provided field is already in use
          enum:
          - A unique field is already being used
          type: string
        field_id:
          description: Field ID
          type: string
        contacts:
          items:
            $ref: '#/components/schemas/contact_id'
          type: array
      type: object
    cname_exists_errors:
      properties:
        cname_exists:
          description: Occurs when the provided cname already exists
          enum:
          - The provided cname already exists
          type: string
      type: object
    Contact_1:
      allOf:
      - $ref: '#/components/schemas/contactBaseExtraFull'
      description: Contact
      title: Contact
      type: object
    Contact_2:
      allOf:
      - $ref: '#/components/schemas/Contact'
      description: Contact
      title: Contact
      type: object
    Product_allOf:
      properties:
        categories:
          description: |-
            Array of product categories, using the character '>' as delimiter for the breadcrumb
                                            syntax
          items:
            example: Clothing>Women>Blue Jeans
            type: string
          type: array
        related_products:
          description: Related products
          items:
            type: string
          type: array
        custom_attributes:
          description: Custom attributes
          items:
            $ref: '#/components/schemas/ProductCustomAttributes'
          type: array
      type: object
      example: null
    ProductPatchRequest_related_products:
      description: Related products
      example:
        external_product_id:
        - external_product_id
        - external_product_id
      properties:
        external_product_id:
          description: Array of 'product_identifier'
          items:
            type: string
          type: array
      type: object
    product_already_exists_errors:
      properties:
        product_already_exists:
          description: Occurs when the provided product already exists in the catalog
          enum:
          - The provided product already exists in the catalog
          type: string
      type: object
    ComplexField_allOf:
      properties:
        type:
          description: Field type
          enum:
          - base
          - extra
          readOnly: true
          type: string
        options:
          description: Lists of options (only for fields of type 'options')
          items:
            $ref: '#/components/schemas/FieldOption'
          readOnly: true
          type: array
      type: object
      example: null
    field_in_use_errors_field_in_use_data:
      description: Extra information of the conflict
      properties:
        segments:
          description: Array of segments where the field is in use
          items:
            type: integer
          type: array
        forms:
          description: Array of forms where the field is in use
          items:
            type: integer
          type: array
      type: object
    field_in_use_errors:
      properties:
        field_in_use:
          description: Occurs when a field is in use
          enum:
          - The provided extra field is being used in segments or forms
          type: string
        field_in_use_data:
          $ref: '#/components/schemas/field_in_use_errors_field_in_use_data'
      type: object
    ComplexList_allOf_stats:
      description: Contact stats of the list
      properties:
        total_contacts:
          description: Number of total contacts in the list
          example: 1000
          type: integer
        total_active:
          description: Number of total active contacts in the list
          example: 900
          type: integer
        total_inactive:
          description: Number of total inactive contacts in the list
          example: 30
          type: integer
        total_removed:
          description: Number of total removed contacts in the list
          example: 50
          type: integer
        total_unconfirmed:
          description: Number of total unconfirmed contacts in the list
          example: 15
          type: integer
        total_waiting_new_confirmation:
          description: Number of total contacts waiting for new confirmation in the
            list
          example: 5
          type: integer
      readOnly: true
      type: object
      example: null
    ComplexList_allOf:
      properties:
        language:
          $ref: '#/components/schemas/language'
        stats:
          $ref: '#/components/schemas/ComplexList_allOf_stats'
      type: object
      example: null
    list_limit_reached_errors:
      properties:
        list_limit_reached:
          description: Occurs when an account reaches the maximum number of lists
            allowed in its plan
          enum:
          - The maximum number of allowed lists was reached
          type: string
      type: object
    has_queued_operations_errors:
      properties:
        has_queued_operations:
          description: Occurs when a list has operations in queue
          enum:
          - The list has operations in queue
          type: string
      type: object
    has_automations_errors:
      properties:
        has_automations:
          description: Occurs when a list has automations
          enum:
          - The list has automations
          type: string
      type: object
    has_push_app_errors:
      properties:
        has_push_app:
          description: Occurs when a list has push apps
          enum:
          - The list has push apps
          type: string
      type: object
    has_web_push_site_errors:
      properties:
        has_web_push_site:
          description: Occurs when a list has webpush sites
          enum:
          - The list has webpush sites
          type: string
      type: object
    has_campaigns_last_thirty_days_errors:
      properties:
        has_campaigns_last_thirty_days:
          description: Occurs when a list has campaigns sent in the last thirty days
          enum:
          - The list has sent campaigns in the last thirty days
          type: string
      type: object
    domain_already_defined_errors:
      properties:
        domain_already_defined:
          description: Occurs when a domain was already active
          enum:
          - Domain already activated
          type: string
      type: object
    domain_list_required_errors:
      properties:
        domain_list_required:
          description: Occurs when a domain requires a list
          enum:
          - List is mandatory for your version
          type: string
      type: object
    client_already_enabled_errors:
      properties:
        client_already_enabled:
          description: Occurs when a client is already enabled
          enum:
          - Client already enabled
          type: string
      type: object
    client_is_being_enabled_errors:
      properties:
        client_is_being_enabled:
          description: Occurs when a client is in the process of  being enabled
          enum:
          - Client is being enabled
          type: string
      type: object
    GeneralInfo_allOf_general_info:
      description: General Info
      properties:
        name:
          description: Name
          type: string
        website:
          description: Website
          type: string
        cellphone:
          description: Cellphone
          type: string
        client_id:
          description: Client id
          type: string
      type: object
      example: null
    GeneralInfo_allOf:
      properties:
        general_info:
          $ref: '#/components/schemas/GeneralInfo_allOf_general_info'
      type: object
      example: null
    BillingInfo_allOf_billing_info_country:
      description: Country
      properties:
        country_code:
          description: Country Code
          type: string
      type: object
      example: null
    BillingInfo_allOf_billing_info:
      description: Billing Info
      properties:
        type:
          description: Type billing
          enum:
          - single_person
          - company
          type: string
        company_legal_name:
          description: Company legal name
          type: string
        vat_number:
          description: Vat number
          type: string
        country:
          $ref: '#/components/schemas/BillingInfo_allOf_billing_info_country'
        city:
          description: City
          type: string
        state:
          description: State
          type: string
        address1:
          description: Address 1
          type: string
        address2:
          description: Address 2
          type: string
        zip_code:
          description: Zip Code
          type: string
        invoice_comments:
          description: Invoice Comments
          type: string
      type: object
      example: null
    BillingInfo_allOf:
      properties:
        billing_info:
          $ref: '#/components/schemas/BillingInfo_allOf_billing_info'
      type: object
      example: null
    PlanInfo_plan_info:
      description: Plan Info
      properties:
        type:
          description: Return free if the plan in use is free and paid otherwise.
          enum:
          - enterprise
          - free
          - pro
          - starter
          - trial
          - base
          type: string
      type: object
    BalanceInfo_balance_info:
      description: Balance Info
      properties:
        balance:
          description: Account's credits
          type: string
        currency:
          description: Credit's currency
          type: string
      type: object
    ModuleInfo_module_info_te:
      description: Account's credits
      properties:
        enabled:
          description: Track&Engage is Enabled
          type: boolean
      type: object
    ModuleInfo_module_info:
      description: Module Info
      properties:
        te:
          $ref: '#/components/schemas/ModuleInfo_module_info_te'
      type: object
    TeResponse_allOf:
      properties:
        result:
          description: result
          type: boolean
        response:
          description: response
          type: string
      type: object
      example: null
    Operation_operation_data:
      description: Data of the operation
      example:
        internal_name: internal_name
        campaign_hash: campaign_hash
      properties:
        internal_name:
          description: Internal name of the campaign (returns an empty string when
            not applicable)
          type: string
        campaign_hash:
          description: Hash of the campaign (returns an empty string when not applicable)
          type: string
      type: object
    OperationActionResponse_error:
      description: Operation error object
      properties:
        invalid_operation_action:
          description: Array of operation IDs referencing operations where this action
            is invalid
          items:
            $ref: '#/components/schemas/id'
          type: array
        operation_not_found:
          description: Array of invalid operation IDs
          items:
            $ref: '#/components/schemas/id'
          type: array
      type: object
    AppStructure_list:
      description: The list of the app.
      example:
        internal_name: internal_name
        id: 0
      properties:
        id:
          description: The ID of the list.
          type: integer
        internal_name:
          description: The internal name of the list.
          type: string
      type: object
    PushToken_two_steps_data:
      description: The data to register the token with.
      example:
        field: field
        value: value
      properties:
        field:
          description: The field on your E-goi list to insert the data in.
          type: string
        value:
          description: The data to insert in the field defined.
          type: string
      type: object
    EmailReport_allOf:
      properties:
        campaign_hash:
          pattern: "[a-zA-Z0-9_-]*"
          readOnly: true
          title: Hash
          type: string
      type: object
      example: null
    EmailReportByReader_reader_inner:
      properties:
        reader:
          description: Reader
          example: E-goi
          type: string
        type:
          description: Type
          example: webmail
          type: string
        opens:
          description: Total number of open messages
          example: 3
          minimum: 0
          type: integer
      type: object
    EmailReportByUrl_url_inner:
      properties:
        url:
          description: Url
          example: https://www.e-goi.com
          type: string
        clicks:
          description: Total number of clicks in the url
          example: 3
          minimum: 0
          type: integer
      type: object
    EmailReportByEcommerce_ecommerce:
      description: Email stats grouped by Ecommerce
      properties:
        orders:
          description: Total number of orders
          example: 3
          minimum: 0
          type: integer
        invoice:
          description: Total value for invoices
          example: 1.1
          minimum: 0
          type: double
        visits:
          description: Total number of visits
          example: 3
          minimum: 0
          type: integer
      type: object
    EmailReportByDomain_domain_inner:
      properties:
        domain:
          description: Domain
          example: e-goi.com
          type: string
        sends:
          description: Total number of sent messages
          example: 3
          minimum: 0
          type: integer
        opens:
          description: Total number of open messages
          example: 3
          minimum: 0
          type: integer
        clicks:
          description: Total number of clicks in message
          example: 3
          minimum: 0
          type: integer
        hard_bounces:
          description: Total number of hard bounces
          example: 3
          minimum: 0
          type: integer
        soft_bounces:
          description: Total number of soft bounces
          example: 3
          minimum: 0
          type: integer
        complaints:
          description: Total number of complaints
          example: 3
          minimum: 0
          type: integer
        unsubscriptions:
          description: Total number of unsubscriptions
          example: 3
          minimum: 0
          type: integer
      type: object
    EmailReportByLocation_location_inner:
      properties:
        location:
          description: Location
          example: Matosinhos
          type: string
        region:
          description: Region
          example: Porto
          type: string
        country:
          description: Country
          example: Portugal
          type: string
        opens:
          description: Total number of open messages
          example: 3
          minimum: 0
          type: integer
        clicks:
          description: Total number of clicks in message
          example: 3
          minimum: 0
          type: integer
        hard_bounces:
          description: Total number of hard bounces
          example: 3
          minimum: 0
          type: integer
        soft_bounces:
          description: Total number of soft bounces
          example: 3
          minimum: 0
          type: integer
        complaints:
          description: Total number of complaints
          example: 3
          minimum: 0
          type: integer
        unsubscriptions:
          description: Total number of unsubscriptions
          example: 3
          minimum: 0
          type: integer
      type: object
    EmailReportByHour_hour_inner:
      properties:
        hour:
          description: 24-hour format of an hour with leading zeros
          example: "03"
          type: string
        sends:
          description: Total number of sent messages
          example: 3
          minimum: 0
          type: integer
        opens:
          description: Total number of open messages
          example: 3
          minimum: 0
          type: integer
        clicks:
          description: Total number of clicks in message
          example: 3
          minimum: 0
          type: integer
        hard_bounces:
          description: Total number of hard bounces
          example: 3
          minimum: 0
          type: integer
        soft_bounces:
          description: Total number of soft bounces
          example: 3
          minimum: 0
          type: integer
        complaints:
          description: Total number of complaints
          example: 3
          minimum: 0
          type: integer
        unsubscriptions:
          description: Total number of unsubscriptions
          example: 3
          minimum: 0
          type: integer
      type: object
    EmailReportByWeekday_weekday_inner:
      properties:
        weekday:
          description: Numeric representation of the day of the week (0 for sunday)
          example: "3"
          type: string
        sends:
          description: Total number of sent messages
          example: 3
          minimum: 0
          type: integer
        opens:
          description: Total number of open messages
          example: 3
          minimum: 0
          type: integer
        clicks:
          description: Total number of clicks in message
          example: 3
          minimum: 0
          type: integer
        hard_bounces:
          description: Total number of hard bounces
          example: 3
          minimum: 0
          type: integer
        soft_bounces:
          description: Total number of soft bounces
          example: 3
          minimum: 0
          type: integer
        complaints:
          description: Total number of complaints
          example: 3
          minimum: 0
          type: integer
        unsubscriptions:
          description: Total number of unsubscriptions
          example: 3
          minimum: 0
          type: integer
      type: object
    EmailReportByDate_date_inner:
      properties:
        date:
          description: Date
          example: 01-01-1970
          type: date
        sends:
          description: Total number of sent messages
          example: 3
          minimum: 0
          type: integer
        opens:
          description: Total number of open messages
          example: 3
          minimum: 0
          type: integer
        clicks:
          description: Total number of clicks in message
          example: 3
          minimum: 0
          type: integer
        hard_bounces:
          description: Total number of hard bounces
          example: 3
          minimum: 0
          type: integer
        soft_bounces:
          description: Total number of soft bounces
          example: 3
          minimum: 0
          type: integer
        complaints:
          description: Total number of complaints
          example: 3
          minimum: 0
          type: integer
        unsubscriptions:
          description: Total number of unsubscriptions
          example: 3
          minimum: 0
          type: integer
      type: object
    EmailReportOverall_overall:
      description: Overall message information
      properties:
        sends:
          description: Total number of sent messages
          example: 3
          minimum: 0
          type: integer
        opens:
          description: Total number of open messages
          example: 3
          minimum: 0
          type: integer
        unique_opens:
          description: Total number of unique open messages
          example: 3
          minimum: 0
          type: integer
        clicks:
          description: Total number of clicks in message
          example: 3
          minimum: 0
          type: integer
        unique_clicks:
          description: Total number of unique clicks in message
          example: 3
          minimum: 0
          type: integer
        hard_bounces:
          description: Total number of hard bounces
          example: 3
          minimum: 0
          type: integer
        soft_bounces:
          description: Total number of soft bounces
          example: 3
          minimum: 0
          type: integer
        complaints:
          description: Total number of complaints
          example: 3
          minimum: 0
          type: integer
        unsubscriptions:
          description: Total number of unsubscriptions
          example: 3
          minimum: 0
          type: integer
      type: object
    PhoneReport_allOf_networks:
      properties:
        network:
          description: Network name
          example: Vodafone
          type: string
        sends:
          description: Total number of sent messages
          example: 1
          minimum: 0
          type: integer
        delivered:
          description: Total number of delivered messages
          example: 1
          minimum: 0
          type: integer
        error:
          description: Total number of failed messages
          minimum: 0
          type: integer
        invalid:
          description: Total number of invalid messages
          minimum: 0
          type: integer
        pending:
          description: Total number of pending messages
          minimum: 0
          type: integer
      type: object
      example: null
    PhoneReport_allOf:
      properties:
        networks:
          description: Stats of the campaign for each network
          items:
            $ref: '#/components/schemas/PhoneReport_allOf_networks'
          type: array
      type: object
      example: null
    PushVersions_versions_inner:
      properties:
        version:
          description: Operating system version
          example: unknown
          type: string
        opens:
          description: Total number of opened messages
          minimum: 0
          type: integer
        canceled:
          description: Total number of delivered messages
          minimum: 0
          type: integer
        delivered:
          description: Total number of delivered messages
          example: 1
          minimum: 0
          type: integer
      type: object
    PushReport_allOf:
      properties:
        operating_systems:
          description: Stats of the campaign for each operating system
          items:
            allOf:
            - properties:
                operating_system:
                  description: Operating system name
                  example: android
                  type: string
              type: object
            - $ref: '#/components/schemas/PushVersions'
          type: array
        brands:
          description: Stats of the campaign for each brand
          items:
            allOf:
            - properties:
                brand:
                  description: Brand name
                  example: huawei
                  type: string
              type: object
            - $ref: '#/components/schemas/PushVersions'
          type: array
      type: object
      example: null
    Overall_overall:
      description: Overall message information
      properties:
        destinations:
          description: Total number of destinations
          example: 3
          minimum: 1
          type: integer
        sends:
          description: Total number of sent messages
          example: 3
          minimum: 1
          type: integer
        delivered:
          description: Total number of delivered messages
          example: 3
          minimum: 0
          type: integer
        error:
          description: Total number of failed messages
          minimum: 0
          type: integer
        invalid:
          description: Total number of invalid messages
          minimum: 0
          type: integer
        pending:
          description: Total number of pending messages
          minimum: 0
          type: integer
      type: object
    AdvancedReportListExtraFields_inner:
      example:
        list_id: 1
        fields:
        - fields
        - fields
      properties:
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        fields:
          description: Array of extra field IDs
          items:
            type: string
          type: array
      type: object
    AdvancedReportForms_inner:
      example:
        list_id: 1
        forms:
        - 1
        - 1
      properties:
        list_id:
          example: 1
          minimum: 1
          title: ID
          type: integer
        forms:
          description: Array of form IDs
          items:
            $ref: '#/components/schemas/queryId'
          type: array
      type: object
    WebPushReport_devices_inner_allOf:
      properties:
        device:
          description: Device type
          example: desktop
          type: string
      type: object
    WebPushReport_devices_inner:
      allOf:
      - $ref: '#/components/schemas/WebPushReport_devices_inner_allOf'
      - $ref: '#/components/schemas/WebPushStats'
    WebPushReport_operating_systems_inner_versions_inner_allOf:
      properties:
        version:
          description: Operating system version
          example: "10.126"
          type: string
      type: object
    WebPushReport_operating_systems_inner_versions_inner:
      allOf:
      - $ref: '#/components/schemas/WebPushReport_operating_systems_inner_versions_inner_allOf'
      - $ref: '#/components/schemas/WebPushStats'
    WebPushReport_operating_systems_inner:
      example:
        versions:
        - null
        - null
        operating_system: macos
      properties:
        operating_system:
          description: Operating system name
          example: macos
          type: string
        versions:
          description: Collection of operating system versions
          items:
            $ref: '#/components/schemas/WebPushReport_operating_systems_inner_versions_inner'
          type: array
      type: object
    WebPushReport_browsers_inner_versions_inner_allOf:
      properties:
        version:
          description: Browser version
          example: "64.0328214"
          type: string
      type: object
    WebPushReport_browsers_inner_versions_inner:
      allOf:
      - $ref: '#/components/schemas/WebPushReport_browsers_inner_versions_inner_allOf'
      - $ref: '#/components/schemas/WebPushStats'
    WebPushReport_browsers_inner:
      example:
        versions:
        - null
        - null
        browser: Chrome
      properties:
        browser:
          description: Browser name
          example: Chrome
          type: string
        versions:
          description: Collection of browser versions
          items:
            $ref: '#/components/schemas/WebPushReport_browsers_inner_versions_inner'
          type: array
      type: object
    WebPushReport_url_inner_allOf:
      properties:
        url:
          description: Url information
          example: https://e-goi.com
          type: string
      type: object
    WebPushReport_url_inner:
      allOf:
      - $ref: '#/components/schemas/WebPushReport_url_inner_allOf'
      - $ref: '#/components/schemas/WebPushStats'
    AutomaticSegment_allOf:
      properties:
        type:
          description: Type of segment
          enum:
          - auto
          readOnly: true
          type: string
      type: object
      example: null
    SavedSegment_allOf:
      properties:
        created:
          allOf:
          - $ref: '#/components/schemas/date_time'
          readOnly: true
        updated:
          allOf:
          - $ref: '#/components/schemas/date_time'
          readOnly: true
      type: object
      example: null
    SavedSegment_allOf_1_segment_filter_segment_filter_array:
      properties:
        segment_field:
          description: "Field internal name (retrieve fields using GET: /lists/{list_id}/fields)"
          type: string
        segment_operator:
          description: |-
            Segment operator used for comparison. When using a range of dates split them
                                                        using the following format: date1||date2
          enum:
          - equal_to
          - not_equal_to
          - greater_or_equal_to
          - greater_than
          - less_or_equal_to
          - less_than
          - contains
          - does_not_contain
          - begins_with
          - ends_with
          - date_range
          type: string
        segment_value:
          description: Segment search value
          type: string
      type: object
      example: null
    SavedSegment_allOf_1_segment_filter:
      description: Segment filter conditions
      properties:
        segment_filter_array:
          description: Array of filters
          items:
            $ref: '#/components/schemas/SavedSegment_allOf_1_segment_filter_segment_filter_array'
          type: array
        boolean_operator:
          default: and
          description: Boolean operator for all segment conditions
          enum:
          - and
          - or
          type: string
          writeOnly: true
        invert:
          default: false
          description: If true inverts the search result
          type: boolean
          writeOnly: true
      type: object
      writeOnly: true
      example: null
    SavedSegment_allOf_1:
      properties:
        type:
          description: Type of segment
          enum:
          - saved
          readOnly: true
          type: string
        segment_filter:
          $ref: '#/components/schemas/SavedSegment_allOf_1_segment_filter'
      required:
      - segment_filter
      type: object
      example: null
    TagSegment_allOf:
      properties:
        type:
          description: Type of segment
          enum:
          - tag
          readOnly: true
          type: string
        created:
          allOf:
          - $ref: '#/components/schemas/date_time'
          readOnly: true
        updated:
          allOf:
          - $ref: '#/components/schemas/date_time'
          readOnly: true
      type: object
      example: null
    invalid_segment_type_errors:
      properties:
        invalid_segment_type:
          description: Occurs when the segment type is invalid
          enum:
          - You can only delete segments of  type saved
          type: string
      type: object
    used_in_automations_errors:
      properties:
        used_in_automations:
          description: Occurs when the segment is being used in automations
          enum:
          - Segment is being used in automations
          type: string
      type: object
    used_in_recurring_messages_errors:
      properties:
        used_in_recurring_messages:
          description: Occurs when the segment is being used in recurring campaigns
          enum:
          - Segment is being used in recurring campaigns
          type: string
      type: object
    has_queued_campaigns_errors:
      properties:
        has_queued_campaigns:
          description: Occurs when there are campaigns using the segment
          enum:
          - There are queued campaigns using this segment
          type: string
      type: object
    AbstractCellphoneSender_allOf:
      properties:
        type:
          description: Sender code type
          enum:
          - alpha_numeric
          - numeric
          type: string
      type: object
      example: null
    NumericCellphoneSenderPost_allOf:
      properties:
        cellphone:
          description: "Sender cellphone (country code followed by phone number, split\
            \ by '-')"
          example: 351-300404336
          pattern: "^(){0,1}(\\d){1,3}-(\\d){4,20}$"
          type: string
      type: object
      example: null
    AlphanumericCellphoneSenderPost_allOf:
      properties:
        cellphone:
          description: Sender cellphone name
          example: Your company name
          type: string
        file:
          description: Content of your sender file in base64
          format: byte
          type: string
          writeOnly: true
      type: object
      example: null
    EmailSender_allOf:
      properties:
        name:
          description: Sender name
          example: E-goi
          type: string
        email:
          description: Sender email
          example: example@e-goi.com
          type: string
      type: object
      example: null
    PhoneSender_allOf:
      properties:
        phone:
          description: "Sender value (country code followed by phone number, split\
            \ by '-')"
          example: 351-300404336
          pattern: "^(){0,1}(\\d){1,3}-(\\d){4,20}$"
          type: string
        file:
          description: Content of your sender file in base64
          format: byte
          type: string
          writeOnly: true
      type: object
      example: null
    SuppressionTypeEmail_allOf:
      properties:
        type:
          description: Suppression type
          enum:
          - email
          - email_domain
          - email_user
          - cellphone
          - phone
          example: email
          type: string
      type: object
      example: null
    SuppressionTypeEmail_allOf_1:
      properties:
        value:
          description: Array of email values to add to the suppression list
          items:
            example: example@e-goi.com
            type: string
          type: array
      type: object
      example: null
    SuppressionTypeEmailDomain_allOf:
      properties:
        type:
          description: Suppression type
          enum:
          - email
          - email_domain
          - email_user
          - cellphone
          - phone
          example: email_domain
          type: string
      type: object
      example: null
    SuppressionTypeEmailDomain_allOf_1:
      properties:
        value:
          description: Array of email domain values to add to the suppression list
          items:
            example: e-goi.com
            type: string
          type: array
      type: object
      example: null
    SuppressionTypeUserEmail_allOf:
      properties:
        type:
          description: Suppression type
          enum:
          - email
          - email_domain
          - email_user
          - cellphone
          - phone
          example: email_user
          type: string
      type: object
      example: null
    SuppressionTypeUserEmail_allOf_1:
      properties:
        value:
          description: Array of email user values to add to the suppression list
          items:
            example: example
            type: string
          type: array
      type: object
      example: null
    SuppressionTypeCellphone_allOf:
      properties:
        type:
          description: Suppression type
          enum:
          - email
          - email_domain
          - email_user
          - cellphone
          - phone
          example: cellphone
          type: string
      type: object
      example: null
    SuppressionTypeCellphone_allOf_1:
      properties:
        value:
          description: Array of cellphone values to add to the suppression list
          items:
            example: 351-300404336
            type: string
          pattern: "^(){0,1}(\\d){1,3}-(\\d){4,20}$"
          type: array
      type: object
      example: null
    SuppressionTypePhone_allOf:
      properties:
        type:
          description: Suppression type
          enum:
          - email
          - email_domain
          - email_user
          - cellphone
          - phone
          example: phone
          type: string
      type: object
      example: null
    SuppressionTypePhone_allOf_1:
      properties:
        value:
          description: Array of phone values to add to the suppression list
          items:
            example: 351-300404336
            type: string
          pattern: "^(){0,1}(\\d){1,3}-(\\d){4,20}$"
          type: array
      type: object
      example: null
    unremovable_entry_errors:
      properties:
        unremovable_entry:
          description: Occurs when the entry you want to delete was created by a unremovable
            method
          enum:
          - Unremovable Entry
          type: string
      type: object
    User_allOf:
      properties:
        user_id:
          example: 1
          minimum: 1
          readOnly: true
          title: ID
          type: integer
        username:
          description: User login
          example: example@e-goi.com
          readOnly: true
          type: string
        is_admin:
          default: false
          description: "True if user is admin, false otherwise"
          readOnly: true
          type: boolean
        first_name:
          description: First name of the user
          type: string
        last_name:
          description: Last name of the user
          type: string
        email:
          description: Email of the user
          example: example@e-goi.com
          type: string
        phone:
          description: User's phone (may be cellphone or phone)
          example: 351-300404336
          type: string
        profile_image:
          description: User's profile image
          readOnly: true
          type: string
        status:
          description: User status
          enum:
          - active
          - inactive
          readOnly: true
          type: string
        created:
          description: The date and time
          format: date-time
          title: date_time
          type: string
        updated:
          description: The date and time
          format: date-time
          title: date_time
          type: string
      type: object
      example: null
    UserPost_allOf:
      properties:
        username:
          description: User login
          example: example@e-goi.com
          readOnly: true
          type: string
        first_name:
          description: First name of the user
          type: string
        last_name:
          description: Last name of the user
          type: string
        email:
          description: Email of the user
          example: example@e-goi.com
          type: string
        phone:
          description: User's phone (may be cellphone or phone)
          example: 351-300404336
          type: string
      type: object
      example: null
    UserPostRequest_allOf:
      properties:
        password:
          description: User password
          type: string
        password_confirmation:
          description: User password confirmation
          type: string
      type: object
      example: null
    ComplexUser_allOf:
      properties:
        language:
          $ref: '#/components/schemas/language'
        gender:
          description: User gender
          enum:
          - male
          - female
          type: string
      type: object
      example: null
    name_already_exists_errors:
      properties:
        name_already_exists:
          description: Occurs when the provided webpush name already exists
          enum:
          - The provided name already exists
          type: string
      type: object
    Conflict_allOf:
      properties:
        errors:
          description: Information about the conflict
          type: object
      type: object
      example: null
  securitySchemes:
    Apikey:
      in: header
      name: Apikey
      type: apiKey
x-tagGroups:
- name: Api Methods
  tags:
  - Authentication
  - Automations
  - Campaigns
  - Email
  - Push
  - Sms
  - Smart Sms
  - Voice
  - Webpush
  - Campaign Groups
  - Campaign Templates
  - Ecommerce
  - Ecommerce Activity
  - TrackEngage
  - Connected Sites
  - Contacts
  - Fields
  - Forms
  - Lists
  - My Account
  - Operations
  - Ping
  - Reports
  - Advanced Reports
  - Segments
  - Senders
  - CNames
  - Suppression List
  - Tags
  - Users
  - Utilities
  - Web Hooks
x-servers:
- url: https://api.egoiapp.com
  description: Egoi Public API Server

