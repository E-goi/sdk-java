/*
 * APIv3 (Beta)
 *  # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB. <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.egoi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * UnsubscriptionObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-08-10T12:53:53.038698+01:00[Europe/Lisbon]")
public class UnsubscriptionObject   {
  /**
   * Unsubcription Method
   */
  @JsonAdapter(UnsubscriptionMethodEnum.Adapter.class)
  public enum UnsubscriptionMethodEnum {
    MANUAL("manual"),
    
    FORM("form"),
    
    UNSUBSCRIBE_LINK("unsubscribe_link"),
    
    BOUNCE("bounce"),
    
    API("api");

    private String value;

    UnsubscriptionMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnsubscriptionMethodEnum fromValue(String value) {
      for (UnsubscriptionMethodEnum b : UnsubscriptionMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnsubscriptionMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnsubscriptionMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnsubscriptionMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnsubscriptionMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UNSUBSCRIPTION_METHOD = "unsubscription_method";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIPTION_METHOD)
  private UnsubscriptionMethodEnum unsubscriptionMethod;

  /**
   * Unsubcription Reason
   */
  @JsonAdapter(UnsubscriptionReasonEnum.Adapter.class)
  public enum UnsubscriptionReasonEnum {
    NOT_INTERESTED("not_interested"),
    
    LACK_OF_TIME("lack_of_time"),
    
    EMAIL_ADDRESS_CHANGE("email_address_change"),
    
    SPAM("spam"),
    
    OTHER("other");

    private String value;

    UnsubscriptionReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnsubscriptionReasonEnum fromValue(String value) {
      for (UnsubscriptionReasonEnum b : UnsubscriptionReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnsubscriptionReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnsubscriptionReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnsubscriptionReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnsubscriptionReasonEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UNSUBSCRIPTION_REASON = "unsubscription_reason";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIPTION_REASON)
  private UnsubscriptionReasonEnum unsubscriptionReason;

  public static final String SERIALIZED_NAME_UNSUBSCRIPTION_OBSERVATION = "unsubscription_observation";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIPTION_OBSERVATION)
  private String unsubscriptionObservation;


  public UnsubscriptionObject unsubscriptionMethod(UnsubscriptionMethodEnum unsubscriptionMethod) {
    
    this.unsubscriptionMethod = unsubscriptionMethod;
    return this;
  }

   /**
   * Unsubcription Method
   * @return unsubscriptionMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unsubcription Method")

  public UnsubscriptionMethodEnum getUnsubscriptionMethod() {
    return unsubscriptionMethod;
  }


  public void setUnsubscriptionMethod(UnsubscriptionMethodEnum unsubscriptionMethod) {
    this.unsubscriptionMethod = unsubscriptionMethod;
  }


  public UnsubscriptionObject unsubscriptionReason(UnsubscriptionReasonEnum unsubscriptionReason) {
    
    this.unsubscriptionReason = unsubscriptionReason;
    return this;
  }

   /**
   * Unsubcription Reason
   * @return unsubscriptionReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unsubcription Reason")

  public UnsubscriptionReasonEnum getUnsubscriptionReason() {
    return unsubscriptionReason;
  }


  public void setUnsubscriptionReason(UnsubscriptionReasonEnum unsubscriptionReason) {
    this.unsubscriptionReason = unsubscriptionReason;
  }


  public UnsubscriptionObject unsubscriptionObservation(String unsubscriptionObservation) {
    
    this.unsubscriptionObservation = unsubscriptionObservation;
    return this;
  }

   /**
   * Unsubcription Observation
   * @return unsubscriptionObservation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unsubcription Observation")

  public String getUnsubscriptionObservation() {
    return unsubscriptionObservation;
  }


  public void setUnsubscriptionObservation(String unsubscriptionObservation) {
    this.unsubscriptionObservation = unsubscriptionObservation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnsubscriptionObject unsubscriptionObject = (UnsubscriptionObject) o;
    return Objects.equals(this.unsubscriptionMethod, unsubscriptionObject.unsubscriptionMethod) &&
        Objects.equals(this.unsubscriptionReason, unsubscriptionObject.unsubscriptionReason) &&
        Objects.equals(this.unsubscriptionObservation, unsubscriptionObject.unsubscriptionObservation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unsubscriptionMethod, unsubscriptionReason, unsubscriptionObservation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnsubscriptionObject {\n");
    sb.append("    unsubscriptionMethod: ").append(toIndentedString(unsubscriptionMethod)).append("\n");
    sb.append("    unsubscriptionReason: ").append(toIndentedString(unsubscriptionReason)).append("\n");
    sb.append("    unsubscriptionObservation: ").append(toIndentedString(unsubscriptionObservation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

