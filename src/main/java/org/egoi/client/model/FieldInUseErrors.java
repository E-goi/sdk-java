/*
 * APIv3 (Beta)
 *  # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.egoi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.egoi.client.model.FieldInUseErrorsFieldInUseData;

/**
 * FieldInUseErrors
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-01-06T16:12:38.678183Z[Europe/Lisbon]")
public class FieldInUseErrors   {
  /**
   * Occurs when a field is in use
   */
  @JsonAdapter(FieldInUseEnum.Adapter.class)
  public enum FieldInUseEnum {
    THE_PROVIDED_EXTRA_FIELD_IS_BEING_USED_IN_SEGMENTS_OR_FORMS("The provided extra field is being used in segments or forms");

    private String value;

    FieldInUseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FieldInUseEnum fromValue(String value) {
      for (FieldInUseEnum b : FieldInUseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FieldInUseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FieldInUseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FieldInUseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FieldInUseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FIELD_IN_USE = "field_in_use";
  @SerializedName(SERIALIZED_NAME_FIELD_IN_USE)
  private FieldInUseEnum fieldInUse;

  public static final String SERIALIZED_NAME_FIELD_IN_USE_DATA = "field_in_use_data";
  @SerializedName(SERIALIZED_NAME_FIELD_IN_USE_DATA)
  private FieldInUseErrorsFieldInUseData fieldInUseData;


  public FieldInUseErrors fieldInUse(FieldInUseEnum fieldInUse) {
    
    this.fieldInUse = fieldInUse;
    return this;
  }

   /**
   * Occurs when a field is in use
   * @return fieldInUse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Occurs when a field is in use")

  public FieldInUseEnum getFieldInUse() {
    return fieldInUse;
  }


  public void setFieldInUse(FieldInUseEnum fieldInUse) {
    this.fieldInUse = fieldInUse;
  }


  public FieldInUseErrors fieldInUseData(FieldInUseErrorsFieldInUseData fieldInUseData) {
    
    this.fieldInUseData = fieldInUseData;
    return this;
  }

   /**
   * Get fieldInUseData
   * @return fieldInUseData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FieldInUseErrorsFieldInUseData getFieldInUseData() {
    return fieldInUseData;
  }


  public void setFieldInUseData(FieldInUseErrorsFieldInUseData fieldInUseData) {
    this.fieldInUseData = fieldInUseData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldInUseErrors fieldInUseErrors = (FieldInUseErrors) o;
    return Objects.equals(this.fieldInUse, fieldInUseErrors.fieldInUse) &&
        Objects.equals(this.fieldInUseData, fieldInUseErrors.fieldInUseData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldInUse, fieldInUseData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldInUseErrors {\n");
    sb.append("    fieldInUse: ").append(toIndentedString(fieldInUse)).append("\n");
    sb.append("    fieldInUseData: ").append(toIndentedString(fieldInUseData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

