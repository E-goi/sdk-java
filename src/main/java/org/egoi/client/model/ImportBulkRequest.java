/*
 * APIv3 (Beta)
 *  # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB. <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.egoi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.egoi.client.model.ContactBulk;

/**
 * Contact import bulk request schema
 */
@ApiModel(description = "Contact import bulk request schema")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-08-10T12:53:53.038698+01:00[Europe/Lisbon]")
public class ImportBulkRequest   {
  /**
   * Add new contacts only (&#39;add&#39;) or add and replace existing ones (&#39;update&#39;)
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    ADD("add"),
    
    UPDATE("update");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_COMPARE_FIELD = "compare_field";
  @SerializedName(SERIALIZED_NAME_COMPARE_FIELD)
  private String compareField;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<ContactBulk> contacts = new ArrayList<ContactBulk>();

  public static final String SERIALIZED_NAME_FORCE_EMPTY = "force_empty";
  @SerializedName(SERIALIZED_NAME_FORCE_EMPTY)
  private Boolean forceEmpty = false;

  public static final String SERIALIZED_NAME_NOTIFY = "notify";
  @SerializedName(SERIALIZED_NAME_NOTIFY)
  private List<Integer> notify = null;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callback_url";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;


  public ImportBulkRequest mode(ModeEnum mode) {
    
    this.mode = mode;
    return this;
  }

   /**
   * Add new contacts only (&#39;add&#39;) or add and replace existing ones (&#39;update&#39;)
   * @return mode
  **/
  @ApiModelProperty(required = true, value = "Add new contacts only ('add') or add and replace existing ones ('update')")

  public ModeEnum getMode() {
    return mode;
  }


  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public ImportBulkRequest compareField(String compareField) {
    
    this.compareField = compareField;
    return this;
  }

   /**
   * Field ID which will be mapped for comparison to prevent duplicates)
   * @return compareField
  **/
  @ApiModelProperty(example = "email", required = true, value = "Field ID which will be mapped for comparison to prevent duplicates)")

  public String getCompareField() {
    return compareField;
  }


  public void setCompareField(String compareField) {
    this.compareField = compareField;
  }


  public ImportBulkRequest contacts(List<ContactBulk> contacts) {
    
    this.contacts = contacts;
    return this;
  }

  public ImportBulkRequest addContactsItem(ContactBulk contactsItem) {
    this.contacts.add(contactsItem);
    return this;
  }

   /**
   * Array of contacts to import
   * @return contacts
  **/
  @ApiModelProperty(required = true, value = "Array of contacts to import")

  public List<ContactBulk> getContacts() {
    return contacts;
  }


  public void setContacts(List<ContactBulk> contacts) {
    this.contacts = contacts;
  }


  public ImportBulkRequest forceEmpty(Boolean forceEmpty) {
    
    this.forceEmpty = forceEmpty;
    return this;
  }

   /**
   * If &#39;true&#39; accepts empty values and erases those fields
   * @return forceEmpty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If 'true' accepts empty values and erases those fields")

  public Boolean getForceEmpty() {
    return forceEmpty;
  }


  public void setForceEmpty(Boolean forceEmpty) {
    this.forceEmpty = forceEmpty;
  }


  public ImportBulkRequest notify(List<Integer> notify) {
    
    this.notify = notify;
    return this;
  }

  public ImportBulkRequest addNotifyItem(Integer notifyItem) {
    if (this.notify == null) {
      this.notify = new ArrayList<Integer>();
    }
    this.notify.add(notifyItem);
    return this;
  }

   /**
   * Array of IDs of the users to notify
   * @return notify
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of IDs of the users to notify")

  public List<Integer> getNotify() {
    return notify;
  }


  public void setNotify(List<Integer> notify) {
    this.notify = notify;
  }


  public ImportBulkRequest callbackUrl(String callbackUrl) {
    
    this.callbackUrl = callbackUrl;
    return this;
  }

   /**
   * Url to receive the report
   * @return callbackUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Url to receive the report")

  public String getCallbackUrl() {
    return callbackUrl;
  }


  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportBulkRequest importBulkRequest = (ImportBulkRequest) o;
    return Objects.equals(this.mode, importBulkRequest.mode) &&
        Objects.equals(this.compareField, importBulkRequest.compareField) &&
        Objects.equals(this.contacts, importBulkRequest.contacts) &&
        Objects.equals(this.forceEmpty, importBulkRequest.forceEmpty) &&
        Objects.equals(this.notify, importBulkRequest.notify) &&
        Objects.equals(this.callbackUrl, importBulkRequest.callbackUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mode, compareField, contacts, forceEmpty, notify, callbackUrl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportBulkRequest {\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    compareField: ").append(toIndentedString(compareField)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    forceEmpty: ").append(toIndentedString(forceEmpty)).append("\n");
    sb.append("    notify: ").append(toIndentedString(notify)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

