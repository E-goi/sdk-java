/*
 * APIv3 (Beta)
 *  # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.egoi.client.api;

import org.egoi.client.ApiException;
import org.egoi.client.model.AcceptedResponse;
import org.egoi.client.model.BadRequest;
import org.egoi.client.model.CampaignEmailSendRequest;
import org.egoi.client.model.Conflict;
import org.egoi.client.model.EmailCampaignCreate;
import org.egoi.client.model.EmailCampaignPatch;
import org.egoi.client.model.EmailRssCampaignCreate;
import org.egoi.client.model.Forbidden;
import org.egoi.client.model.HashcodeCampaign;
import org.egoi.client.model.InternalServerError;
import org.egoi.client.model.NotFound;
import org.egoi.client.model.Unauthorized;
import org.egoi.client.model.UnprocessableEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmailApi
 */
@Ignore
public class EmailApiTest {

    private final EmailApi api = new EmailApi();

    
    /**
     * Enables a rss email campaign
     *
     * Enables a rss email message
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionEnableEmailRssTest() throws ApiException {
        String campaignHash = null;
        AcceptedResponse response = api.actionEnableEmailRss(campaignHash);

        // TODO: test validations
    }
    
    /**
     * Send email message
     *
     * Deploys and sends an email message
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionSendEmailTest() throws ApiException {
        String campaignHash = null;
        CampaignEmailSendRequest campaignEmailSendRequest = null;
        AcceptedResponse response = api.actionSendEmail(campaignHash, campaignEmailSendRequest);

        // TODO: test validations
    }
    
    /**
     * Create new email campaign
     *
     * Create a new email campaign
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEmailCampaignTest() throws ApiException {
        EmailCampaignCreate emailCampaignCreate = null;
        HashcodeCampaign response = api.createEmailCampaign(emailCampaignCreate);

        // TODO: test validations
    }
    
    /**
     * Create new email rss campaign
     *
     * Create a new email rss campaign
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEmailRssCampaignTest() throws ApiException {
        EmailRssCampaignCreate emailRssCampaignCreate = null;
        HashcodeCampaign response = api.createEmailRssCampaign(emailRssCampaignCreate);

        // TODO: test validations
    }
    
    /**
     * Update a specific email campaign
     *
     * Update email campaign
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchEmailCampaignTest() throws ApiException {
        String campaignHash = null;
        EmailCampaignPatch emailCampaignPatch = null;
        HashcodeCampaign response = api.patchEmailCampaign(campaignHash, emailCampaignPatch);

        // TODO: test validations
    }
    
}
