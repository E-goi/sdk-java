/*
 * APIv3 (Beta)
 *  # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.egoi.client.api;

import org.egoi.client.ApiException;
import org.egoi.client.model.BadRequest;
import org.egoi.client.model.DeleteFieldsConflict;
import org.egoi.client.model.Field;
import org.egoi.client.model.FieldCollection;
import org.egoi.client.model.FieldOption;
import org.egoi.client.model.FieldOptionsCollection;
import org.egoi.client.model.Forbidden;
import org.egoi.client.model.InternalServerError;
import org.egoi.client.model.NotFound;
import org.egoi.client.model.PatchRequestBaseField;
import org.egoi.client.model.PatchRequestField;
import org.egoi.client.model.Unauthorized;
import org.egoi.client.model.UnprocessableEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FieldsApi
 */
@Ignore
public class FieldsApiTest {

    private final FieldsApi api = new FieldsApi();

    
    /**
     * Create extra field
     *
     * Creates an extra field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExtraFieldTest() throws ApiException {
        Integer listId = null;
        Field field = null;
        Field response = api.createExtraField(listId, field);

        // TODO: test validations
    }
    
    /**
     * Create new field option
     *
     * Creates a field option
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFieldOptionTest() throws ApiException {
        Integer listId = null;
        Integer fieldId = null;
        FieldOption fieldOption = null;
        FieldOption response = api.createFieldOption(listId, fieldId, fieldOption);

        // TODO: test validations
    }
    
    /**
     * Remove extra field
     *
     * Removes an extra field given its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExtraFieldTest() throws ApiException {
        Integer listId = null;
        Integer fieldId = null;
        api.deleteExtraField(listId, fieldId);

        // TODO: test validations
    }
    
    /**
     * Deletes an option
     *
     * Deletes an option of a list of values field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFieldOptionTest() throws ApiException {
        Integer listId = null;
        Integer fieldId = null;
        Integer optionId = null;
        api.deleteFieldOption(listId, fieldId, optionId);

        // TODO: test validations
    }
    
    /**
     * Get all field options
     *
     * Returns all options of a given field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllFieldOptionsTest() throws ApiException {
        Integer listId = null;
        Integer fieldId = null;
        FieldOptionsCollection response = api.getAllFieldOptions(listId, fieldId);

        // TODO: test validations
    }
    
    /**
     * Get all fields
     *
     * Returns all fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllFieldsTest() throws ApiException {
        Integer listId = null;
        Integer offset = null;
        Integer limit = null;
        FieldCollection response = api.getAllFields(listId, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Update base field
     *
     * Updates a base field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchBaseFieldTest() throws ApiException {
        Integer listId = null;
        String fieldId = null;
        PatchRequestBaseField patchRequestBaseField = null;
        Field response = api.patchBaseField(listId, fieldId, patchRequestBaseField);

        // TODO: test validations
    }
    
    /**
     * Update extra field
     *
     * Updates an extra field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExtraFieldTest() throws ApiException {
        Integer listId = null;
        Integer fieldId = null;
        PatchRequestField patchRequestField = null;
        Field response = api.patchExtraField(listId, fieldId, patchRequestField);

        // TODO: test validations
    }
    
    /**
     * Update field option
     *
     * Updates a field option
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFieldOptionTest() throws ApiException {
        Integer listId = null;
        Integer fieldId = null;
        Integer optionId = null;
        FieldOption fieldOption = null;
        FieldOption response = api.updateFieldOption(listId, fieldId, optionId, fieldOption);

        // TODO: test validations
    }
    
}
